{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { programInitialState } from '../reducers/initialState.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, programInitialState);\n  const {\n    program\n  } = state; // Destructure program from state\n  const {\n    workouts\n  } = state.workout; // Destructure workouts from state\n\n  // Program Actions\n\n  const setSelectedProgram = ({\n    program,\n    workouts\n  }) => {\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: {\n        program: program || null,\n        workout: {\n          workouts: workouts || []\n        }\n      }\n    });\n  };\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.workout.workouts.map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return;\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: {\n        activeWorkout: workoutId\n      }\n    });\n  };\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: state.workout.workouts.length + 1\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: {\n        workout: newWorkout\n      }\n    });\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        workout: standardizedWorkout\n      }\n    });\n  };\n  const deleteWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to delete workout without a valid ID');\n      return;\n    }\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: {\n        workoutId\n      }\n    });\n  };\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || [],\n      selected: true\n    }));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.workout.activeWorkout) {\n      console.error('No active workout selected');\n      return;\n    }\n    const workout = state.workout.workouts.find(w => w.id === state.workout.activeWorkout);\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: {\n          workoutId: state.workout.activeWorkout,\n          exerciseId\n        }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n        payload: {\n          exerciseIdForToggle: exerciseId,\n          exerciseData: exerciseData\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workout.workouts.find(w => w.id === workoutId);\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workout.workouts.find(w => w.id === workoutId);\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => exerciseUtils.getExerciseId(ex) === exerciseId ? {\n      ...ex,\n      sets: updatedSets\n    } : ex);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      program,\n      workouts,\n      dispatch,\n      activeWorkout: state.workout.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"GwxJPV5k/hGHIIS3H2BuCol4Ws0=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","programInitialState","standardizeWorkout","exerciseUtils","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","program","workouts","workout","setSelectedProgram","type","payload","saveProgram","newProgram","map","id","name","order","exercises","exercise","catalog_exercise_id","sets","set","index","reps","weight","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","console","error","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","programId","DELETE_PROGRAM","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","activeWorkout","addWorkout","newWorkout","length","ADD_WORKOUT","updateWorkout","standardizedWorkout","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","tempId","selected","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","find","w","exerciseExists","some","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","addSet","getExerciseId","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","updatedSets","filter","updatedExercises","clearState","CLEAR_STATE","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { programInitialState } from '../reducers/initialState.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, programInitialState);\n\n  const { program } = state; // Destructure program from state\n  const { workouts } = state.workout; // Destructure workouts from state\n\n  // Program Actions\n\n  const setSelectedProgram = ({ program, workouts }) => {\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: {\n        program: program || null,\n        workout: {\n          workouts: workouts || []\n        }\n      }\n    });\n  };\n\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.workout.workouts.map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return;\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: {\n        activeWorkout: workoutId\n      }\n    });\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: state.workout.workouts.length + 1\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: {\n        workout: newWorkout\n      }\n    });\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        workout: standardizedWorkout\n      }\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to delete workout without a valid ID');\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: { workoutId }\n    });\n  };\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || [],\n      selected: true\n    }));\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.workout.activeWorkout) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    const workout = state.workout.workouts.find(\n      w => w.id === state.workout.activeWorkout\n    );\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: { workoutId: state.workout.activeWorkout, exerciseId }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n        payload: {\n          exerciseIdForToggle: exerciseId,\n          exerciseData: exerciseData\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workout.workouts.find(w => w.id === workoutId);\n\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workout.workouts.find(w => w.id === workoutId);\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex =>\n      exerciseUtils.getExerciseId(ex) === exerciseId\n        ? { ...ex, sets: updatedSets }\n        : ex\n    );\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        program,\n        workouts,\n        dispatch,\n        activeWorkout: state.workout.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}