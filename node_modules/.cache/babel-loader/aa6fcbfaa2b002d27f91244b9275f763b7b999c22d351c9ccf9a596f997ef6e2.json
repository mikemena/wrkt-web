{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [program, setProgram] = useState({\n    user_id: 2,\n    // This should be set to the logged in user's ID\n    name: '',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: []\n  });\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2,\n      // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id,\n        // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order,\n          // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n    console.log('Saving program from front end:', programData);\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({\n      ...prev,\n      ...details\n    }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    const tempId = uuidv4();\n    const newWorkout = {\n      ...workout,\n      id: tempId\n    };\n    setProgram(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, newWorkout]\n    }));\n  }, []);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter(workout => workout.id !== workoutId)\n    }));\n  }, []);\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Add the tempId to the new exercise object\n          const newExercise = {\n            ...exercise,\n            id: tempId,\n            isNew: true\n          };\n\n          // Determine the next order value for the new exercise\n          const nextOrder = workout.exercises.length > 0 ? Math.max(...workout.exercises.map(ex => ex.order)) + 1 : 1;\n          return {\n            ...workout,\n            exercises: [...workout.exercises, {\n              ...newExercise,\n              order: nextOrder\n            }]\n          };\n        }\n        return workout;\n      });\n      return {\n        ...prev,\n        workouts: newWorkouts\n      };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => exercise.catalog_exercise_id === updatedExercise.catalog_exercise_id ? {\n              ...exercise,\n              ...updatedExercise\n            } : exercise)\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(exercise => exercise.catalog_exercise_id !== exerciseId)\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutOrder, exerciseCatalogId, newSet) => {\n    const tempId = uuidv4();\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its order\n        if (workout.order === workoutOrder) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.catalog_exercise_id === exerciseCatalogId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  isNew: true\n                };\n                return {\n                  ...exercise,\n                  sets: [...exercise.sets, updatedSet]\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return {\n                        ...set,\n                        ...updatedSet\n                      };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.filter(set => set.order !== setId)\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      program,\n      saveProgram,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      addExercise,\n      updateExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"0VQifSCEGGoKAb8PfZSVVpcqZ7I=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useState","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","program","setProgram","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workouts","saveProgram","NewProgram","programData","programName","programDuration","daysPerWeek","durationUnit","mainGoal","map","workout","order","id","exercises","exercise","catalog_exercise_id","sets","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","updateProgramDetails","details","prev","addWorkout","tempId","newWorkout","updateWorkout","updatedWorkout","prevProgram","deleteWorkout","workoutId","filter","addExercise","newWorkouts","newExercise","isNew","nextOrder","length","Math","max","ex","updateExercise","updatedExercise","deleteExercise","exerciseId","addSet","workoutOrder","exerciseCatalogId","newSet","updatedSet","updateSet","set","deleteSet","setId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [program, setProgram] = useState({\n    user_id: 2, // This should be set to the logged in user's ID\n    name: '',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: []\n  });\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2, // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id, // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order, // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({ ...prev, ...details }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    const tempId = uuidv4();\n    const newWorkout = { ...workout, id: tempId };\n    setProgram(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, newWorkout]\n    }));\n  }, []);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout =>\n        workout.id === updatedWorkout.id ? updatedWorkout : workout\n      )\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter(workout => workout.id !== workoutId)\n    }));\n  }, []);\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Add the tempId to the new exercise object\n          const newExercise = { ...exercise, id: tempId, isNew: true };\n\n          // Determine the next order value for the new exercise\n          const nextOrder =\n            workout.exercises.length > 0\n              ? Math.max(...workout.exercises.map(ex => ex.order)) + 1\n              : 1;\n\n          return {\n            ...workout,\n            exercises: [\n              ...workout.exercises,\n              { ...newExercise, order: nextOrder }\n            ]\n          };\n        }\n        return workout;\n      });\n      return { ...prev, workouts: newWorkouts };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise =>\n              exercise.catalog_exercise_id ===\n              updatedExercise.catalog_exercise_id\n                ? { ...exercise, ...updatedExercise }\n                : exercise\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(\n              exercise => exercise.catalog_exercise_id !== exerciseId\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutOrder, exerciseCatalogId, newSet) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its order\n        if (workout.order === workoutOrder) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.catalog_exercise_id === exerciseCatalogId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = { ...newSet, id: tempId, isNew: true };\n                return { ...exercise, sets: [...exercise.sets, updatedSet] };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return { ...set, ...updatedSet };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.filter(set => set.order !== setId)\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        program,\n        saveProgram,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        addExercise,\n        updateExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}