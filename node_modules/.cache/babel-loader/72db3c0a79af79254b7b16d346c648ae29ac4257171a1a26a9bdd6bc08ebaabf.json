{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case actionTypes.ADD_SET:\n      {\n        const {\n          exerciseId,\n          weight,\n          reps\n        } = action.payload;\n        const setId = uuidv4();\n        const newSet = {\n          id: setId,\n          weight,\n          reps,\n          order: (state[exerciseId] || []).length + 2\n        };\n        console.log('Adding new set:', newSet);\n        console.log('State before:', state);\n        const newState = {\n          ...state,\n          [exerciseId]: [...(state[exerciseId] || []), newSet]\n        };\n        console.log('State after:', newState);\n        return newState;\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        console.log('Updating set:', updatedSet);\n        return {\n          ...state,\n          [exerciseId]: state[exerciseId].map(set => set.id === updatedSet.id ? {\n            ...set,\n            ...updatedSet\n          } : set)\n        };\n      }\n    case actionTypes.DELETE_SET:\n      {\n        const {\n          exerciseId,\n          setId\n        } = action.payload;\n        console.log('Deleting set with id:', setId);\n\n        //Get all the sets for the exercise, including the ined from the exercise object and the state\n        const exerciseSets = state[exerciseId] || [];\n        const exercise = state.exercises.find(ex => ex.id === exerciseId);\n        const initialState = exercise ? exercise.sets : [];\n\n        //Combine the initial sets with the state sets\n        const allSets = [...initialState, ...exerciseSets];\n\n        // Filter out the set to delete\n        const updatedSets = state[exerciseId].filter(set => set.id !== setId);\n\n        //Recalculate the order of the remaining sets\n        const reorderedSets = updatedSets.map((exercise, index) => ({\n          ...exercise,\n          order: index + 1\n        }));\n        return {\n          ...state,\n          [exerciseId]: reorderedSets\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { setReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","setReducer","state","sets","action","type","ADD_SET","exerciseId","weight","reps","payload","setId","newSet","id","order","length","console","log","newState","UPDATE_SET","updatedSet","map","set","DELETE_SET","exerciseSets","exercise","exercises","find","ex","allSets","updatedSets","filter","reorderedSets","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case actionTypes.ADD_SET: {\n      const { exerciseId, weight, reps } = action.payload;\n      const setId = uuidv4();\n      const newSet = {\n        id: setId,\n        weight,\n        reps,\n        order: (state[exerciseId] || []).length + 2\n      };\n\n      console.log('Adding new set:', newSet);\n      console.log('State before:', state);\n\n      const newState = {\n        ...state,\n        [exerciseId]: [...(state[exerciseId] || []), newSet]\n      };\n\n      console.log('State after:', newState);\n\n      return newState;\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { exerciseId, updatedSet } = action.payload;\n      console.log('Updating set:', updatedSet);\n\n      return {\n        ...state,\n        [exerciseId]: state[exerciseId].map(set =>\n          set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n        )\n      };\n    }\n\n    case actionTypes.DELETE_SET: {\n      const { exerciseId, setId } = action.payload;\n      console.log('Deleting set with id:', setId);\n\n      //Get all the sets for the exercise, including the ined from the exercise object and the state\n      const exerciseSets = state[exerciseId] || [];\n      const exercise = state.exercises.find(ex => ex.id === exerciseId);\n      const initialState = exercise ? exercise.sets : [];\n\n      //Combine the initial sets with the state sets\n      const allSets = [...initialState, ...exerciseSets];\n\n      // Filter out the set to delete\n      const updatedSets = state[exerciseId].filter(set => set.id !== setId);\n\n      //Recalculate the order of the remaining sets\n      const reorderedSets = updatedSets.map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n\n      return {\n        ...state,\n        [exerciseId]: reorderedSets\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport { setReducer };\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,UAAUA,CAACC,KAAK,GAAGF,YAAY,CAACG,IAAI,EAAEC,MAAM,EAAE;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,WAAW,CAACO,OAAO;MAAE;QACxB,MAAM;UAAEC,UAAU;UAAEC,MAAM;UAAEC;QAAK,CAAC,GAAGL,MAAM,CAACM,OAAO;QACnD,MAAMC,KAAK,GAAGb,MAAM,CAAC,CAAC;QACtB,MAAMc,MAAM,GAAG;UACbC,EAAE,EAAEF,KAAK;UACTH,MAAM;UACNC,IAAI;UACJK,KAAK,EAAE,CAACZ,KAAK,CAACK,UAAU,CAAC,IAAI,EAAE,EAAEQ,MAAM,GAAG;QAC5C,CAAC;QAEDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,MAAM,CAAC;QACtCI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEf,KAAK,CAAC;QAEnC,MAAMgB,QAAQ,GAAG;UACf,GAAGhB,KAAK;UACR,CAACK,UAAU,GAAG,CAAC,IAAIL,KAAK,CAACK,UAAU,CAAC,IAAI,EAAE,CAAC,EAAEK,MAAM;QACrD,CAAC;QAEDI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,QAAQ,CAAC;QAErC,OAAOA,QAAQ;MACjB;IAEA,KAAKnB,WAAW,CAACoB,UAAU;MAAE;QAC3B,MAAM;UAAEZ,UAAU;UAAEa;QAAW,CAAC,GAAGhB,MAAM,CAACM,OAAO;QACjDM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,UAAU,CAAC;QAExC,OAAO;UACL,GAAGlB,KAAK;UACR,CAACK,UAAU,GAAGL,KAAK,CAACK,UAAU,CAAC,CAACc,GAAG,CAACC,GAAG,IACrCA,GAAG,CAACT,EAAE,KAAKO,UAAU,CAACP,EAAE,GAAG;YAAE,GAAGS,GAAG;YAAE,GAAGF;UAAW,CAAC,GAAGE,GACzD;QACF,CAAC;MACH;IAEA,KAAKvB,WAAW,CAACwB,UAAU;MAAE;QAC3B,MAAM;UAAEhB,UAAU;UAAEI;QAAM,CAAC,GAAGP,MAAM,CAACM,OAAO;QAC5CM,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEN,KAAK,CAAC;;QAE3C;QACA,MAAMa,YAAY,GAAGtB,KAAK,CAACK,UAAU,CAAC,IAAI,EAAE;QAC5C,MAAMkB,QAAQ,GAAGvB,KAAK,CAACwB,SAAS,CAACC,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACf,EAAE,KAAKN,UAAU,CAAC;QACjE,MAAMP,YAAY,GAAGyB,QAAQ,GAAGA,QAAQ,CAACtB,IAAI,GAAG,EAAE;;QAElD;QACA,MAAM0B,OAAO,GAAG,CAAC,GAAG7B,YAAY,EAAE,GAAGwB,YAAY,CAAC;;QAElD;QACA,MAAMM,WAAW,GAAG5B,KAAK,CAACK,UAAU,CAAC,CAACwB,MAAM,CAACT,GAAG,IAAIA,GAAG,CAACT,EAAE,KAAKF,KAAK,CAAC;;QAErE;QACA,MAAMqB,aAAa,GAAGF,WAAW,CAACT,GAAG,CAAC,CAACI,QAAQ,EAAEQ,KAAK,MAAM;UAC1D,GAAGR,QAAQ;UACXX,KAAK,EAAEmB,KAAK,GAAG;QACjB,CAAC,CAAC,CAAC;QAEH,OAAO;UACL,GAAG/B,KAAK;UACR,CAACK,UAAU,GAAGyB;QAChB,CAAC;MACH;IACA;MACE,OAAO9B,KAAK;EAChB;AACF;AAEA,SAASD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}