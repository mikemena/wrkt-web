{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setSelectedProgram = program => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: program\n    });\n  };\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => {\n        const standardizedWorkout = {\n          ...workout,\n          exercises: (workout.exercises || []).map(exercise => ({\n            ...exercise,\n            sets: exercise.sets || []\n          })),\n          order: workout.order || 1\n        };\n        return standardizedWorkout;\n      })\n    };\n    console.log('Saving program with payload:', newProgram);\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async programId => {\n    const updatedProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => {\n        if (!workout || !workout.id) {\n          return null; // Exclude workouts without an id\n        }\n        const isTemporaryId = typeof workout.id === 'string' && workout.id.includes('-');\n        if (isTemporaryId) {\n          // You might want to handle temporary IDs differently\n          // For example, you could generate a new temporary integer ID\n          workout.id = Math.floor(Math.random() * -1000000); // Negative to distinguish from DB IDs\n        } else if (typeof workout.id !== 'number') {\n          workout.id = parseInt(workout.id, 10);\n          if (isNaN(workout.id)) {\n            return null;\n          }\n        }\n        const updatedExercises = (state.exercises[workout.id] || []).map(exercise => {\n          if (!exercise || !exercise.id) {\n            return null; // Exclude exercises without an id\n          }\n          const isExerciseTemporaryId = typeof exercise.id === 'string' && exercise.id.includes('-');\n          if (isExerciseTemporaryId) {\n            exercise.id = Math.floor(Math.random() * -1000000); // Temporary negative ID\n          } else if (typeof exercise.id !== 'number') {\n            exercise.id = parseInt(exercise.id, 10);\n            if (isNaN(exercise.id)) {\n              return null;\n            }\n          }\n          return {\n            ...exercise,\n            sets: state.sets[exercise.id] || [],\n            id: exercise.id\n          };\n        }).filter(exercise => exercise !== null);\n        return {\n          ...workout,\n          exercises: updatedExercises,\n          id: workout.id,\n          programId: programId\n        };\n      }).filter(workout => workout !== null),\n      // Remove null workouts\n      id: programId\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram); // Validate data before sending\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error updating program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.keys(state.workouts).length + 1\n    };\n    console.log('Add Standardized Workout:', newWorkout);\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    console.log('Edit Standardized Workout:', standardizedWorkout);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises\n      }\n    });\n  };\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    // Check if the workout exists\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    // Check if the exercise exists\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n    if (!exerciseExists) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(ex => ex.id === exerciseId);\n    const initialState = (exercise === null || exercise === void 0 ? void 0 : exercise.sets) || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    if (combinedSets.length > 1) {\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: {\n          workoutId,\n          exerciseId,\n          setId\n        }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","standardizeWorkout","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setSelectedProgram","program","type","SET_SELECTED_PROGRAM","payload","setActiveWorkout","workoutId","console","error","SET_ACTIVE_WORKOUT","saveProgram","programId","Object","keys","programs","newProgram","workouts","values","map","workout","standardizedWorkout","exercises","exercise","sets","order","log","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","id","isTemporaryId","includes","Math","floor","random","parseInt","isNaN","updatedExercises","isExerciseTemporaryId","filter","UPDATE_PROGRAM_SUCCESS","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","addWorkout","newWorkout","name","length","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","ADD_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","weight","reps","exerciseExists","some","ex","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","find","additionalSets","combinedSets","DELETE_SET","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setSelectedProgram = program => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: program\n    });\n  };\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => {\n        const standardizedWorkout = {\n          ...workout,\n          exercises: (workout.exercises || []).map(exercise => ({\n            ...exercise,\n            sets: exercise.sets || []\n          })),\n          order: workout.order || 1\n        };\n        return standardizedWorkout;\n      })\n    };\n\n    console.log('Saving program with payload:', newProgram);\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async programId => {\n    const updatedProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts)\n        .map(workout => {\n          if (!workout || !workout.id) {\n            return null; // Exclude workouts without an id\n          }\n\n          const isTemporaryId =\n            typeof workout.id === 'string' && workout.id.includes('-');\n\n          if (isTemporaryId) {\n            // You might want to handle temporary IDs differently\n            // For example, you could generate a new temporary integer ID\n            workout.id = Math.floor(Math.random() * -1000000); // Negative to distinguish from DB IDs\n          } else if (typeof workout.id !== 'number') {\n            workout.id = parseInt(workout.id, 10);\n            if (isNaN(workout.id)) {\n              return null;\n            }\n          }\n\n          const updatedExercises = (state.exercises[workout.id] || [])\n            .map(exercise => {\n              if (!exercise || !exercise.id) {\n                return null; // Exclude exercises without an id\n              }\n\n              const isExerciseTemporaryId =\n                typeof exercise.id === 'string' && exercise.id.includes('-');\n\n              if (isExerciseTemporaryId) {\n                exercise.id = Math.floor(Math.random() * -1000000); // Temporary negative ID\n              } else if (typeof exercise.id !== 'number') {\n                exercise.id = parseInt(exercise.id, 10);\n                if (isNaN(exercise.id)) {\n                  return null;\n                }\n              }\n\n              return {\n                ...exercise,\n                sets: state.sets[exercise.id] || [],\n                id: exercise.id\n              };\n            })\n            .filter(exercise => exercise !== null);\n\n          return {\n            ...workout,\n            exercises: updatedExercises,\n            id: workout.id,\n            programId: programId\n          };\n        })\n        .filter(workout => workout !== null), // Remove null workouts\n      id: programId\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram); // Validate data before sending\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error updating program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.keys(state.workouts).length + 1\n    };\n    console.log('Add Standardized Workout:', newWorkout);\n    dispatch({ type: actionTypes.ADD_WORKOUT, payload: newWorkout });\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    console.log('Edit Standardized Workout:', standardizedWorkout);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises }\n    });\n  };\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    // Check if the workout exists\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    // Check if the exercise exists\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n    if (!exerciseExists) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(\n      ex => ex.id === exerciseId\n    );\n    const initialState = exercise?.sets || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n\n    if (combinedSets.length > 1) {\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: { workoutId, exerciseId, setId }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}