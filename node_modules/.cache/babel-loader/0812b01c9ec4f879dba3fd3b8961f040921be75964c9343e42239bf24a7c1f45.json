{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    console.log('Dispatching SET_ACTIVE_WORKOUT with:', workoutId);\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: (state.exercises[workout.id] || []).map(exercise => {\n          // Merge sets from both exercise and state.sets\n          const mergedSets = [...(exercise.sets || []), ...(state.sets[exercise.id] || [])];\n\n          // Ensure no duplicate sets by filtering unique set IDs\n          const uniqueSets = mergedSets.reduce((acc, set) => {\n            if (!acc.some(s => s.id === set.id)) {\n              acc.push(set);\n            }\n            return acc;\n          }, []);\n          return {\n            ...exercise,\n            sets: uniqueSets\n          };\n        }),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      console.log('Saving program:', newProgram); // Log the program data\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      console.log('Deleting program:', programId);\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      console.log('Dispatching DELETE_PROGRAM for program ID:', programId);\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    console.log('Adding exercise with workoutId:', workoutId, 'and exercises:', exercises);\n    exercises.forEach(exercise => {\n      const exerciseInstanceId = uuidv4(); // Generate a unique ID for the exercise instance\n      const initialSet = {\n        id: uuidv4(),\n        order: 1,\n        weight: 10,\n        reps: 10\n      };\n      dispatch({\n        type: actionTypes.ADD_EXERCISE,\n        payload: {\n          workoutId,\n          exercise: {\n            ...exercise,\n            id: exerciseInstanceId,\n            sets: [initialSet]\n          }\n        }\n      });\n    });\n  };\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Dispatching ADD_SET:', {\n      workoutId,\n      exerciseId,\n      weight,\n      reps\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    console.log('Dispatching UPDATE_SET:', {\n      workoutId,\n      exerciseId,\n      updatedSet\n    });\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(ex => ex.id === exerciseId);\n    const initialState = (exercise === null || exercise === void 0 ? void 0 : exercise.sets) || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    console.log('combinedSets:', combinedSets);\n    const exerciseSets = state.sets[exerciseId];\n    console.log('exerciseSets in deleteSet:', exerciseSets);\n    console.log('combinedSets length:', combinedSets.length);\n    if (combinedSets.length > 1) {\n      console.log('Dispatching DELETE_SET:', {\n        workoutId,\n        exerciseId,\n        setId\n      });\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: {\n          workoutId,\n          exerciseId,\n          setId\n        }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      addProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setActiveWorkout","workoutId","console","error","log","type","SET_ACTIVE_WORKOUT","payload","saveProgram","programId","Object","keys","programs","newProgram","workouts","values","map","workout","exercises","id","exercise","mergedSets","sets","uniqueSets","reduce","acc","set","some","s","push","order","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","addWorkout","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","exerciseInstanceId","initialSet","weight","reps","ADD_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","find","ex","additionalSets","combinedSets","exerciseSets","length","DELETE_SET","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    console.log('Dispatching SET_ACTIVE_WORKOUT with:', workoutId);\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: (state.exercises[workout.id] || []).map(exercise => {\n          // Merge sets from both exercise and state.sets\n          const mergedSets = [\n            ...(exercise.sets || []),\n            ...(state.sets[exercise.id] || [])\n          ];\n\n          // Ensure no duplicate sets by filtering unique set IDs\n          const uniqueSets = mergedSets.reduce((acc, set) => {\n            if (!acc.some(s => s.id === set.id)) {\n              acc.push(set);\n            }\n            return acc;\n          }, []);\n\n          return {\n            ...exercise,\n            sets: uniqueSets\n          };\n        }),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      console.log('Saving program:', newProgram); // Log the program data\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      console.log('Deleting program:', programId);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      console.log('Dispatching DELETE_PROGRAM for program ID:', programId);\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    console.log(\n      'Adding exercise with workoutId:',\n      workoutId,\n      'and exercises:',\n      exercises\n    );\n    exercises.forEach(exercise => {\n      const exerciseInstanceId = uuidv4(); // Generate a unique ID for the exercise instance\n      const initialSet = {\n        id: uuidv4(),\n        order: 1,\n        weight: 10,\n        reps: 10\n      };\n      dispatch({\n        type: actionTypes.ADD_EXERCISE,\n        payload: {\n          workoutId,\n          exercise: { ...exercise, id: exerciseInstanceId, sets: [initialSet] }\n        }\n      });\n    });\n  };\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Dispatching ADD_SET:', {\n      workoutId,\n      exerciseId,\n      weight,\n      reps\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    console.log('Dispatching UPDATE_SET:', {\n      workoutId,\n      exerciseId,\n      updatedSet\n    });\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(\n      ex => ex.id === exerciseId\n    );\n    const initialState = exercise?.sets || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    console.log('combinedSets:', combinedSets);\n\n    const exerciseSets = state.sets[exerciseId];\n    console.log('exerciseSets in deleteSet:', exerciseSets);\n    console.log('combinedSets length:', combinedSets.length);\n\n    if (combinedSets.length > 1) {\n      console.log('Dispatching DELETE_SET:', { workoutId, exerciseId, setId });\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: { workoutId, exerciseId, setId }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        addProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}