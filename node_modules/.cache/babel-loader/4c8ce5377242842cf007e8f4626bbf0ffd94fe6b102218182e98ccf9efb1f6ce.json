{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState, action) {\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      {\n        const workoutId = action.payload;\n        console.log('Workout ID to activate:', workoutId);\n        console.log('State before activating workout:', state.program.workouts);\n        return {\n          ...state,\n          activeWorkout: workoutId,\n          workouts: {\n            ...state.workouts,\n            [workoutId]: {\n              ...state.workouts[workoutId],\n              active: true\n            }\n          }\n        };\n      }\n    case actionTypes.ADD_WORKOUT:\n      {\n        const newWorkout = standardizeWorkout(action.payload);\n        if (!newWorkout) {\n          console.error('Failed to standardize workout:', action.payload);\n          return state;\n        }\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [newWorkout.id]: newWorkout\n          }\n        };\n      }\n    case actionTypes.UPDATE_WORKOUT:\n      {\n        const updatedWorkout = action.payload;\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [updatedWorkout.id]: updatedWorkout\n          }\n        };\n      }\n    case actionTypes.DELETE_WORKOUT:\n      {\n        const workoutId = action.payload;\n        const {\n          [workoutId]: _,\n          ...remainingWorkouts\n        } = state.workouts;\n        return {\n          ...state,\n          workouts: remainingWorkouts\n        };\n      }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      {\n        const {\n          workoutId,\n          exercises\n        } = action.payload;\n        const updatedWorkout = {\n          ...state.workouts[workoutId],\n          exercises: [...state.workouts[workoutId].exercises, ...exercises.map(ex => ({\n            ...exerciseUtils.standardizeExercise(ex),\n            id: ex.id || null,\n            tempId: ex.tempId || uuidv4() // Generate tempId for new exercises if not present\n          }))]\n        };\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [workoutId]: updatedWorkout\n          }\n        };\n      }\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      {\n        const {\n          workoutId,\n          exerciseIdForToggle,\n          exerciseData\n        } = action.payload;\n        const existingExerciseIndex = state.workouts[workoutId].exercises.findIndex(ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle);\n        let updatedExercises;\n        if (existingExerciseIndex === -1) {\n          updatedExercises = [...state.workouts[workoutId].exercises, {\n            id: exerciseIdForToggle || uuidv4(),\n            tempId: exerciseIdForToggle ? null : uuidv4(),\n            ...exerciseData,\n            sets: [{\n              id: uuidv4(),\n              weight: 10,\n              reps: 10,\n              order: 1\n            }]\n          }];\n        } else {\n          updatedExercises = state.workouts[workoutId].exercises.filter((_, index) => index !== existingExerciseIndex);\n        }\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [workoutId]: {\n              ...state.workouts[workoutId],\n              exercises: updatedExercises\n            }\n          }\n        };\n      }\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveExercise = state.program.workouts.map(workout => {\n        if (workout.id === wId5 || workout.tempId === wId5) {\n          // Filter out the exercise to be removed\n          const updatedExercises = workout.exercises.filter(exercise => exercise.id !== exId5 && exercise.tempId !== exId5 && exercise.catalog_exercise_id !== exId5);\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveExercise\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId: exerciseIdAddSet,\n        newSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddSet = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdAddSet || workout.tempId === workoutIdAddSet) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exerciseIdAddSet || exercise.tempId === exerciseIdAddSet) {\n              // Add the new set to the exercise\n              const updatedSets = [...exercise.sets, {\n                ...newSet,\n                id: uuidv4()\n              }];\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddSet\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForUpdateSet = state.program.workouts.map(workout => {\n        if (workout.id === wId2 || workout.tempId === wId2) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exId || exercise.tempId === exId) {\n              // Update the specific set within the exercise\n              const updatedSets = exercise.sets.map(set => set.id === updatedSet.id || set.tempId === updatedSet.tempId ? {\n                ...set,\n                ...updatedSet\n              } : set);\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForUpdateSet\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveSet = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdDeleteSet || workout.tempId === workoutIdDeleteSet) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exerciseIdDeleteSet || exercise.tempId === exerciseIdDeleteSet) {\n              // Remove the specific set from the exercise\n              const updatedSets = exercise.sets.filter(set => set.id !== setIdDeleteSet && set.tempId !== setIdDeleteSet);\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveSet\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","standardizeWorkout","workoutReducer","state","action","type","SET_ACTIVE_WORKOUT","workoutId","payload","console","log","program","workouts","activeWorkout","active","ADD_WORKOUT","newWorkout","error","id","UPDATE_WORKOUT","updatedWorkout","DELETE_WORKOUT","_","remainingWorkouts","ADD_EXERCISE","exercises","map","ex","standardizeExercise","tempId","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","exerciseData","existingExerciseIndex","findIndex","updatedExercises","sets","weight","reps","order","filter","index","REMOVE_EXERCISE","wId5","exerciseId","exId5","workoutsForRemoveExercise","workout","exercise","catalog_exercise_id","ADD_SET","workoutIdAddSet","exerciseIdAddSet","newSet","workoutsForAddSet","updatedSets","UPDATE_SET","wId2","exId","updatedSet","workoutsForUpdateSet","set","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutsForRemoveSet"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState, action) {\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.SET_ACTIVE_WORKOUT: {\n      const workoutId = action.payload;\n\n      console.log('Workout ID to activate:', workoutId);\n      console.log('State before activating workout:', state.program.workouts);\n\n      return {\n        ...state,\n        activeWorkout: workoutId,\n        workouts: {\n          ...state.workouts,\n          [workoutId]: {\n            ...state.workouts[workoutId],\n            active: true\n          }\n        }\n      };\n    }\n\n    case actionTypes.ADD_WORKOUT: {\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [newWorkout.id]: newWorkout\n        }\n      };\n    }\n\n    case actionTypes.UPDATE_WORKOUT: {\n      const updatedWorkout = action.payload;\n\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [updatedWorkout.id]: updatedWorkout\n        }\n      };\n    }\n\n    case actionTypes.DELETE_WORKOUT: {\n      const workoutId = action.payload;\n      const { [workoutId]: _, ...remainingWorkouts } = state.workouts;\n\n      return {\n        ...state,\n        workouts: remainingWorkouts\n      };\n    }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE: {\n      const { workoutId, exercises } = action.payload;\n\n      const updatedWorkout = {\n        ...state.workouts[workoutId],\n        exercises: [\n          ...state.workouts[workoutId].exercises,\n          ...exercises.map(ex => ({\n            ...exerciseUtils.standardizeExercise(ex),\n            id: ex.id || null,\n            tempId: ex.tempId || uuidv4() // Generate tempId for new exercises if not present\n          }))\n        ]\n      };\n\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [workoutId]: updatedWorkout\n        }\n      };\n    }\n\n    case actionTypes.TOGGLE_EXERCISE_SELECTION: {\n      const { workoutId, exerciseIdForToggle, exerciseData } = action.payload;\n\n      const existingExerciseIndex = state.workouts[\n        workoutId\n      ].exercises.findIndex(\n        ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle\n      );\n\n      let updatedExercises;\n      if (existingExerciseIndex === -1) {\n        updatedExercises = [\n          ...state.workouts[workoutId].exercises,\n          {\n            id: exerciseIdForToggle || uuidv4(),\n            tempId: exerciseIdForToggle ? null : uuidv4(),\n            ...exerciseData,\n            sets: [\n              {\n                id: uuidv4(),\n                weight: 10,\n                reps: 10,\n                order: 1\n              }\n            ]\n          }\n        ];\n      } else {\n        updatedExercises = state.workouts[workoutId].exercises.filter(\n          (_, index) => index !== existingExerciseIndex\n        );\n      }\n\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [workoutId]: {\n            ...state.workouts[workoutId],\n            exercises: updatedExercises\n          }\n        }\n      };\n    }\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveExercise = state.program.workouts.map(workout => {\n        if (workout.id === wId5 || workout.tempId === wId5) {\n          // Filter out the exercise to be removed\n          const updatedExercises = workout.exercises.filter(\n            exercise =>\n              exercise.id !== exId5 &&\n              exercise.tempId !== exId5 &&\n              exercise.catalog_exercise_id !== exId5\n          );\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveExercise\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId: exerciseIdAddSet,\n        newSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddSet = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdAddSet ||\n          workout.tempId === workoutIdAddSet\n        ) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (\n              exercise.id === exerciseIdAddSet ||\n              exercise.tempId === exerciseIdAddSet\n            ) {\n              // Add the new set to the exercise\n              const updatedSets = [\n                ...exercise.sets,\n                { ...newSet, id: uuidv4() }\n              ];\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddSet\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForUpdateSet = state.program.workouts.map(workout => {\n        if (workout.id === wId2 || workout.tempId === wId2) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exId || exercise.tempId === exId) {\n              // Update the specific set within the exercise\n              const updatedSets = exercise.sets.map(set =>\n                set.id === updatedSet.id || set.tempId === updatedSet.tempId\n                  ? { ...set, ...updatedSet }\n                  : set\n              );\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForUpdateSet\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveSet = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdDeleteSet ||\n          workout.tempId === workoutIdDeleteSet\n        ) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (\n              exercise.id === exerciseIdDeleteSet ||\n              exercise.tempId === exerciseIdDeleteSet\n            ) {\n              // Remove the specific set from the exercise\n              const updatedSets = exercise.sets.filter(\n                set =>\n                  set.id !== setIdDeleteSet && set.tempId !== setIdDeleteSet\n              );\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveSet\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}