{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport { standardizeExercise } from '../utils/standardizeExercise';\nfunction workoutReducer(state = {\n  workouts: [],\n  activeWorkout: null\n}, action) {\n  switch (action.type) {\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      return {\n        ...state,\n        activeWorkout: action.payload\n      };\n    case actionTypes.ADD_WORKOUT:\n      {\n        const newWorkout = standardizeWorkout(action.payload);\n        if (!newWorkout) {\n          console.error('Failed to standardize workout:', action.payload);\n          return state;\n        }\n        return {\n          ...state,\n          workouts: [...state.workouts, newWorkout]\n        };\n      }\n    case actionTypes.UPDATE_WORKOUT:\n      {\n        const updatedWorkout = action.payload;\n        console.log('UPDATE_WORKOUT action received. Payload:', updatedWorkout);\n        const newState = {\n          ...state,\n          workouts: state.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n        };\n        console.log('New state after UPDATE_WORKOUT:', newState);\n        return newState;\n      }\n    case actionTypes.DELETE_WORKOUT:\n      {\n        const workoutId = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.filter(workout => workout.id !== workoutId),\n          activeWorkout: state.activeWorkout === workoutId ? null : state.activeWorkout\n        };\n      }\n    case actionTypes.ADD_EXERCISE:\n      {\n        const {\n          workoutId,\n          exercises\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: [...workout.exercises, ...exercises.map(ex => ({\n                  ...exerciseUtils.standardizeExercise(ex),\n                  id: ex.id || uuidv4()\n                }))]\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.REMOVE_EXERCISE:\n      {\n        const {\n          workoutId,\n          exerciseId\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.filter(ex => ex.id !== exerciseId && ex.catalog_exercise_id !== exerciseId)\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.ADD_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          newSet\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, {\n                        ...newSet,\n                        id: uuidv4()\n                      }]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n                        ...set,\n                        ...updatedSet\n                      } : set)\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.REMOVE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          setId\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.filter(set => set.id !== setId)\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","exerciseUtils","standardizeWorkout","standardizeExercise","workoutReducer","state","workouts","activeWorkout","action","type","SET_ACTIVE_WORKOUT","payload","ADD_WORKOUT","newWorkout","console","error","UPDATE_WORKOUT","updatedWorkout","log","newState","map","workout","id","DELETE_WORKOUT","workoutId","filter","ADD_EXERCISE","exercises","ex","REMOVE_EXERCISE","exerciseId","catalog_exercise_id","ADD_SET","newSet","exercise","sets","UPDATE_SET","updatedSet","set","REMOVE_SET","setId"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport { standardizeExercise } from '../utils/standardizeExercise';\n\nfunction workoutReducer(state = { workouts: [], activeWorkout: null }, action) {\n  switch (action.type) {\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      return {\n        ...state,\n        activeWorkout: action.payload\n      };\n\n    case actionTypes.ADD_WORKOUT: {\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n\n      return {\n        ...state,\n        workouts: [...state.workouts, newWorkout]\n      };\n    }\n\n    case actionTypes.UPDATE_WORKOUT: {\n      const updatedWorkout = action.payload;\n      console.log('UPDATE_WORKOUT action received. Payload:', updatedWorkout);\n      const newState = {\n        ...state,\n        workouts: state.workouts.map(workout =>\n          workout.id === updatedWorkout.id ? updatedWorkout : workout\n        )\n      };\n      console.log('New state after UPDATE_WORKOUT:', newState);\n      return newState;\n    }\n\n    case actionTypes.DELETE_WORKOUT: {\n      const workoutId = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.filter(workout => workout.id !== workoutId),\n        activeWorkout:\n          state.activeWorkout === workoutId ? null : state.activeWorkout\n      };\n    }\n\n    case actionTypes.ADD_EXERCISE: {\n      const { workoutId, exercises } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: [\n                ...workout.exercises,\n                ...exercises.map(ex => ({\n                  ...exerciseUtils.standardizeExercise(ex),\n                  id: ex.id || uuidv4()\n                }))\n              ]\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.REMOVE_EXERCISE: {\n      const { workoutId, exerciseId } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.filter(\n                ex =>\n                  ex.id !== exerciseId && ex.catalog_exercise_id !== exerciseId\n              )\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.ADD_SET: {\n      const { workoutId, exerciseId, newSet } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: [...exercise.sets, { ...newSet, id: uuidv4() }]\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { workoutId, exerciseId, updatedSet } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: exercise.sets.map(set =>\n                      set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n                    )\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.REMOVE_SET: {\n      const { workoutId, exerciseId, setId } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: exercise.sets.filter(set => set.id !== setId)\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}