{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      {\n        const {\n          workoutId,\n          exerciseId,\n          count,\n          weight\n        } = action.payload;\n        const setId = uuidv4();\n        return {\n          ...state,\n          programs: {\n            ...state.programs,\n            workouts: state.programs.workouts.map(workout => {\n              if (workout.id === workoutId) {\n                return {\n                  ...workout,\n                  exercises: workout.exercises.map(exercise => {\n                    if (exercise.id === exerciseId) {\n                      const newSet = {\n                        id: setId,\n                        count,\n                        weight,\n                        exerciseId\n                      };\n                      return {\n                        ...exercise,\n                        sets: [...exercise.sets, newSet]\n                      };\n                    }\n                    return exercise;\n                  })\n                };\n              }\n              return workout;\n            })\n          }\n        };\n      }\n    case 'UPDATE_SET':\n      {\n        return {\n          ...state,\n          programs: {\n            ...state.programs,\n            workouts: state.programs.workouts.map(workout => {\n              if (workout.id === action.payload.workoutId) {\n                return {\n                  ...workout,\n                  exercises: workout.exercises.map(exercise => {\n                    if (exercise.id === action.payload.exerciseId) {\n                      return {\n                        ...exercise,\n                        sets: exercise.sets.map(set => {\n                          if (set.id === action.payload.updatedSet.id) {\n                            // Assuming you have set ID to match on\n                            return {\n                              ...set,\n                              ...action.payload.updatedSet\n                            };\n                          }\n                          return set;\n                        })\n                      };\n                    }\n                    return exercise;\n                  })\n                };\n              }\n              return workout;\n            })\n          }\n        };\n      }\n    case 'DELETE_SET':\n      {\n        return {\n          ...state,\n          programs: {\n            ...state.programs,\n            workouts: state.programs.workouts.map(workout => {\n              if (workout.id === action.payload.workoutId) {\n                return {\n                  ...workout,\n                  exercises: workout.exercises.map(exercise => {\n                    if (exercise.id === action.payload.exerciseId) {\n                      const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== action.payload.setId);\n                      return {\n                        ...exercise,\n                        sets: filteredAndRenumberedSets\n                      };\n                    }\n                    return exercise;\n                  })\n                };\n              }\n              return workout;\n            })\n          }\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { setReducer, initialState };","map":{"version":3,"names":["v4","uuidv4","initialState","setReducer","state","sets","action","type","workoutId","exerciseId","count","weight","payload","setId","programs","workouts","map","workout","id","exercises","exercise","newSet","set","updatedSet","filteredAndRenumberedSets","filter"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case 'ADD_SET': {\n      const { workoutId, exerciseId, count, weight } = action.payload;\n      const setId = uuidv4();\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          workouts: state.programs.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    const newSet = {\n                      id: setId,\n                      count,\n                      weight,\n                      exerciseId\n                    };\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    }\n\n    case 'UPDATE_SET': {\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          workouts: state.programs.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.id === action.payload.updatedSet.id) {\n                          // Assuming you have set ID to match on\n                          return { ...set, ...action.payload.updatedSet };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    }\n\n    case 'DELETE_SET': {\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          workouts: state.programs.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets.filter(\n                      set => set.id !== action.payload.setId\n                    );\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { setReducer, initialState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}