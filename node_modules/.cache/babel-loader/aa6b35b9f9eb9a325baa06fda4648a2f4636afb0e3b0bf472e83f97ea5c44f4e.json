{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './programReducer';\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    // Compute the next order for the new set\n                    const nextOrder = exercise.sets.length > 0 ? Math.max(...exercise.sets.map(set => set.order)) + 1 : 1;\n                    const newSet = {\n                      ...action.payload.newSet,\n                      id: uuidv4(),\n                      // Generate a new ID for the set\n                      order: nextOrder,\n                      isNew: true\n                    };\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return {\n                            ...set,\n                            ...action.payload.updatedSet\n                          };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== action.payload.setId).map((set, index) => ({\n                      ...set,\n                      order: index + 1\n                    }));\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { setReducer, initialState };","map":{"version":3,"names":["v4","uuidv4","initialState","setReducer","state","action","type","program","workouts","map","workout","id","payload","workoutId","exercises","exercise","exerciseId","nextOrder","sets","length","Math","max","set","order","newSet","isNew","updatedSet","filteredAndRenumberedSets","filter","setId","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './programReducer';\n\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    // Compute the next order for the new set\n                    const nextOrder =\n                      exercise.sets.length > 0\n                        ? Math.max(...exercise.sets.map(set => set.order)) + 1\n                        : 1;\n\n                    const newSet = {\n                      ...action.payload.newSet,\n                      id: uuidv4(), // Generate a new ID for the set\n                      order: nextOrder,\n                      isNew: true\n                    };\n\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return { ...set, ...action.payload.updatedSet };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets\n                      .filter(set => set.id !== action.payload.setId)\n                      .map((set, index) => ({ ...set, order: index + 1 }));\n\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { setReducer, initialState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}