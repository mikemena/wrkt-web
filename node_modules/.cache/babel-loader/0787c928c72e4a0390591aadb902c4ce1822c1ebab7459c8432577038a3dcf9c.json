{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/pages/programs/create/program.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GOAL_TYPES, DURATION_TYPES } from '../../../utils/constants';\nimport DayContainer from '../../../components/DayContainer/DayContainer';\nimport useFetchData from '../../../hooks/useFetchData';\nimport ProgramForm from '../../../components/Program/ProgramForm';\nimport NavBar from '../../../components/Nav/Nav';\nimport './program.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateProgram = () => {\n  _s();\n  const [program, setProgram] = useState({\n    programName: '',\n    mainGoal: '',\n    programDuration: '',\n    durationUnit: '',\n    daysPerWeek: '',\n    workouts: []\n  });\n  const [days, setDays] = useState([]);\n  const navigate = useNavigate();\n  const {\n    data: exercises,\n    isLoading,\n    error\n  } = useFetchData('http://localhost:9025/api/exercise-catalog');\n\n  // const addDay = () => {\n  //   const newDayId = days.length > 0 ? days[days.length - 1].id + 1 : 1; // Ensure unique ID\n  //   const newDay = {\n  //     id: newDayId,\n  //     name: `Day ${newDayId}` // Customize the naming as needed\n  //   };\n  //   setDays([...days, newDay]);\n  // };\n\n  // const handleRemoveDay = dayId => {\n  //   //remove days\n  //   const updatedDays = days.filter(day => day.id !== dayId);\n\n  //   //renumber the remaining days\n  //   const renumberedDays = updatedDays.map((day, index) => ({\n  //     ...day,\n  //     id: index + 1,\n  //     name: `Day ${index + 1}`\n  //   }));\n  //   setDays(renumberedDays);\n  // };\n\n  const handleSaveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2,\n      name: NewProgram.programName,\n      program_duration: NewProgram.programDuration,\n      days_per_week: NewProgram.daysPerWeek,\n      duration_unit: NewProgram.durationUnit,\n      main_goal: NewProgram.mainGoal,\n      workouts: NewProgram.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.order,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order,\n          sets: exercise.sets.map(set => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order\n          }))\n        }))\n      }))\n    };\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n\n      // After saving, redirect back to the WorkoutPage\n      navigate('/programs');\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error loading exercises: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      isEditing: \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"create-program-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"create-program-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"page-title\",\n          children: \"Create New Program\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgramForm, {\n        program: program,\n        onSubmit: handleSaveProgram,\n        isEditing: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateProgram, \"s0ohcdxHENz/LYKqW4Ws5/rtXnw=\", false, function () {\n  return [useNavigate, useFetchData];\n});\n_c = CreateProgram;\nexport default CreateProgram;\nvar _c;\n$RefreshReg$(_c, \"CreateProgram\");","map":{"version":3,"names":["React","useState","useMemo","useNavigate","GOAL_TYPES","DURATION_TYPES","DayContainer","useFetchData","ProgramForm","NavBar","jsxDEV","_jsxDEV","CreateProgram","_s","program","setProgram","programName","mainGoal","programDuration","durationUnit","daysPerWeek","workouts","days","setDays","navigate","data","exercises","isLoading","error","handleSaveProgram","NewProgram","programData","user_id","name","program_duration","days_per_week","duration_unit","main_goal","map","workout","order","exercise","catalog_exercise_id","sets","set","reps","weight","response","fetch","method","headers","body","JSON","stringify","ok","Error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","isEditing","id","className","onSubmit","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/pages/programs/create/program.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GOAL_TYPES, DURATION_TYPES } from '../../../utils/constants';\nimport DayContainer from '../../../components/DayContainer/DayContainer';\nimport useFetchData from '../../../hooks/useFetchData';\nimport ProgramForm from '../../../components/Program/ProgramForm';\nimport NavBar from '../../../components/Nav/Nav';\nimport './program.css';\n\nconst CreateProgram = () => {\n  const [program, setProgram] = useState({\n    programName: '',\n    mainGoal: '',\n    programDuration: '',\n    durationUnit: '',\n    daysPerWeek: '',\n    workouts: []\n  });\n\n  const [days, setDays] = useState([]);\n\n  const navigate = useNavigate();\n\n  const {\n    data: exercises,\n    isLoading,\n    error\n  } = useFetchData('http://localhost:9025/api/exercise-catalog');\n\n  // const addDay = () => {\n  //   const newDayId = days.length > 0 ? days[days.length - 1].id + 1 : 1; // Ensure unique ID\n  //   const newDay = {\n  //     id: newDayId,\n  //     name: `Day ${newDayId}` // Customize the naming as needed\n  //   };\n  //   setDays([...days, newDay]);\n  // };\n\n  // const handleRemoveDay = dayId => {\n  //   //remove days\n  //   const updatedDays = days.filter(day => day.id !== dayId);\n\n  //   //renumber the remaining days\n  //   const renumberedDays = updatedDays.map((day, index) => ({\n  //     ...day,\n  //     id: index + 1,\n  //     name: `Day ${index + 1}`\n  //   }));\n  //   setDays(renumberedDays);\n  // };\n\n  const handleSaveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2,\n      name: NewProgram.programName,\n      program_duration: NewProgram.programDuration,\n      days_per_week: NewProgram.daysPerWeek,\n      duration_unit: NewProgram.durationUnit,\n      main_goal: NewProgram.mainGoal,\n      workouts: NewProgram.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.order,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order,\n          sets: exercise.sets.map(set => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order\n          }))\n        }))\n      }))\n    };\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n\n      // After saving, redirect back to the WorkoutPage\n      navigate('/programs');\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  if (isLoading) return <div>loading...</div>;\n  if (error) return <div>Error loading exercises: {error}</div>;\n\n  return (\n    <div>\n      <NavBar isEditing='true' />\n      <div id='create-program-container'>\n        <div id='create-program-header-container'>\n          <h1 className='page-title'>Create New Program</h1>\n        </div>\n\n        <ProgramForm\n          program={program}\n          onSubmit={handleSaveProgram}\n          isEditing={true}\n        />\n        {/* <DayContainer /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default CreateProgram;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}