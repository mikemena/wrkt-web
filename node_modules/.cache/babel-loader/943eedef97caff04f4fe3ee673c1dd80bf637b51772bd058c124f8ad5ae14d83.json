{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/components/ExerciseFilters/ExerciseFilters.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dropdown from '../Dropdown/Dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EquipmentDropdown() {\n  _s();\n  const [equipments, setEquipments] = useState([]);\n  const [selectedEquipment, setSelectedEquipment] = useState('Any Equipment');\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    // Fetch equipment from the API\n    fetch('http://localhost:9025/api/equipments').then(response => response.json()).then(data => setEquipments(data)).catch(error => console.error('Failed to fetch equipments:', error));\n  }, []);\n  const toggleDropdown = () => setIsOpen(!isOpen);\n\n  // Make sure to pass only the names of the equipments to the Dropdown options\n  const equipmentOptions = equipments.map(equipment => equipment.equipment_name);\n\n  // Define a method to handle selecting an equipment\n  const handleEquipmentSelect = equipmentName => {\n    // Find the selected equipment object\n    const selected = equipments.find(equipment => equipment.equipment_name === equipmentName);\n    // Update the state with the selected equipment's name\n    setSelectedEquipment(selected.equipment_name);\n    // You might want to do something with the selected equipment's id as well\n    // For example, storing it in a state, or performing some action\n    setIsOpen(false); // Close the dropdown\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDropdown,\n      className: \"equipment-select-button\",\n      children: selectedEquipment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      options: equipmentOptions,\n      selectedOption: selectedEquipment,\n      onOptionSelect: handleEquipmentSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(EquipmentDropdown, \"aEUwep72BlYhPLuVA7QTx5AoYyk=\");\n_c = EquipmentDropdown;\nexport default EquipmentDropdown;\nvar _c;\n$RefreshReg$(_c, \"EquipmentDropdown\");","map":{"version":3,"names":["React","useState","useEffect","Dropdown","jsxDEV","_jsxDEV","EquipmentDropdown","_s","equipments","setEquipments","selectedEquipment","setSelectedEquipment","isOpen","setIsOpen","fetch","then","response","json","data","catch","error","console","toggleDropdown","equipmentOptions","map","equipment","equipment_name","handleEquipmentSelect","equipmentName","selected","find","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","options","selectedOption","onOptionSelect","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/components/ExerciseFilters/ExerciseFilters.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Dropdown from '../Dropdown/Dropdown';\n\nfunction EquipmentDropdown() {\n  const [equipments, setEquipments] = useState([]);\n  const [selectedEquipment, setSelectedEquipment] = useState('Any Equipment');\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    // Fetch equipment from the API\n    fetch('http://localhost:9025/api/equipments')\n      .then(response => response.json())\n      .then(data => setEquipments(data))\n      .catch(error => console.error('Failed to fetch equipments:', error));\n  }, []);\n  const toggleDropdown = () => setIsOpen(!isOpen);\n\n  // Make sure to pass only the names of the equipments to the Dropdown options\n  const equipmentOptions = equipments.map(\n    equipment => equipment.equipment_name\n  );\n\n  // Define a method to handle selecting an equipment\n  const handleEquipmentSelect = equipmentName => {\n    // Find the selected equipment object\n    const selected = equipments.find(\n      equipment => equipment.equipment_name === equipmentName\n    );\n    // Update the state with the selected equipment's name\n    setSelectedEquipment(selected.equipment_name);\n    // You might want to do something with the selected equipment's id as well\n    // For example, storing it in a state, or performing some action\n    setIsOpen(false); // Close the dropdown\n  };\n\n  return (\n    <div>\n      <button onClick={toggleDropdown} className='equipment-select-button'>\n        {selectedEquipment}\n      </button>\n      {isOpen && (\n        <div\n          options={equipmentOptions}\n          selectedOption={selectedEquipment}\n          onOptionSelect={handleEquipmentSelect}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default EquipmentDropdown;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,eAAe,CAAC;EAC3E,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd;IACAY,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIT,aAAa,CAACS,IAAI,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;EACxE,CAAC,EAAE,EAAE,CAAC;EACN,MAAME,cAAc,GAAGA,CAAA,KAAMT,SAAS,CAAC,CAACD,MAAM,CAAC;;EAE/C;EACA,MAAMW,gBAAgB,GAAGf,UAAU,CAACgB,GAAG,CACrCC,SAAS,IAAIA,SAAS,CAACC,cACzB,CAAC;;EAED;EACA,MAAMC,qBAAqB,GAAGC,aAAa,IAAI;IAC7C;IACA,MAAMC,QAAQ,GAAGrB,UAAU,CAACsB,IAAI,CAC9BL,SAAS,IAAIA,SAAS,CAACC,cAAc,KAAKE,aAC5C,CAAC;IACD;IACAjB,oBAAoB,CAACkB,QAAQ,CAACH,cAAc,CAAC;IAC7C;IACA;IACAb,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACER,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAQ2B,OAAO,EAAEV,cAAe;MAACW,SAAS,EAAC,yBAAyB;MAAAF,QAAA,EACjErB;IAAiB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,EACRzB,MAAM,iBACLP,OAAA;MACEiC,OAAO,EAAEf,gBAAiB;MAC1BgB,cAAc,EAAE7B,iBAAkB;MAClC8B,cAAc,EAAEb;IAAsB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9B,EAAA,CA9CQD,iBAAiB;AAAAmC,EAAA,GAAjBnC,iBAAiB;AAgD1B,eAAeA,iBAAiB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}