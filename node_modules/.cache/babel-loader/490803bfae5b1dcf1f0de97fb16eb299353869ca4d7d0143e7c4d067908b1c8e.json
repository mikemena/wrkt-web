{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setSelectedProgram = programId => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: programId\n    });\n  };\n  const setActiveWorkout = workoutId => {\n    console.log('setActiveWorkout called with workoutId:', workoutId);\n    console.log('Current state:', state);\n    const updatedWorkouts = state.program.workouts.map(workout => ({\n      ...workout,\n      selected: workout.id === workoutId\n    }));\n    const updatedProgram = {\n      ...state.program,\n      workouts: updatedWorkouts\n    };\n    console.log('Updated program:', updatedProgram);\n    dispatch({\n      type: 'UPDATE_PROGRAM',\n      payload: updatedProgram\n    });\n    dispatch({\n      type: 'SET_SELECTED_WORKOUT_ID',\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.program.workouts.map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId: updatedWorkout.programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: 'ADD_PROGRAM',\n      payload: {\n        ...details,\n        workouts: [] // Ensure workouts array is initialized\n      }\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = () => {\n    const programId = state.selectedProgramId;\n    const workoutsForProgram = Object.values(state.workouts).filter(w => w.programId === programId);\n\n    // Determine the highest current order and add 1 for the new workout\n    const newOrder = workoutsForProgram.length > 0 ? Math.max(...workoutsForProgram.map(w => w.order)) + 1 : 1;\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      selected: true,\n      exercises: [],\n      order: newOrder\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n\n    // Update the program's workouts array\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n    console.log('addWorkout newWorkout', newWorkout);\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    // Remove duplicates based on catalog_exercise_id\n    const uniqueExercises = Array.from(new Set(standardizedExercises.map(ex => ex.catalog_exercise_id))).map(id => standardizedExercises.find(ex => ex.catalog_exercise_id === id));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: uniqueExercises\n      }\n    });\n\n    // Update the program's workout\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: {\n        workoutId,\n        exercises: uniqueExercises\n      }\n    });\n  };\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: {\n        workoutId,\n        exercise\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    const workout = state.workouts[workoutId];\n    const updatedExercises = workout.exercises.filter(ex => ex.id !== exerciseId).map((exercise, index) => ({\n      ...exercise,\n      order: index + 1\n    }));\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedExercises\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = [...ex.sets, {\n          id: uuidv4(),\n          weight,\n          reps,\n          order: ex.sets.length + 1\n        }].map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...ex,\n          sets: updatedSets\n        };\n      }\n      return ex;\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps,\n        updatedExercises\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = ex.sets.filter(set => set.id !== setId).map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...ex,\n          sets: updatedSets\n        };\n      }\n      return ex;\n    });\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      updateExercise,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","standardizeWorkout","exerciseUtils","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setSelectedProgram","programId","type","SET_SELECTED_PROGRAM","payload","setActiveWorkout","workoutId","console","log","updatedWorkouts","program","workouts","map","workout","selected","id","updatedProgram","saveProgram","newProgram","exercises","exercise","catalog_exercise_id","order","sets","set","index","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","error","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","UPDATE_PROGRAM_WORKOUTS","programData","Array","isArray","forEach","addProgram","details","deleteProgram","DELETE_PROGRAM","addWorkout","selectedProgramId","workoutsForProgram","Object","values","filter","w","newOrder","length","Math","max","newWorkout","name","ADD_WORKOUT","updateWorkout","standardizedWorkout","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","tempId","uniqueExercises","from","Set","find","ADD_EXERCISE","UPDATE_PROGRAM_WORKOUT","updateExercise","UPDATE_EXERCISE","removeExercise","exerciseId","updatedExercises","REMOVE_EXERCISE","addSet","weight","reps","getExerciseId","updatedSets","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","clearState","CLEAR_STATE","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setSelectedProgram = programId => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: programId\n    });\n  };\n\n  const setActiveWorkout = workoutId => {\n    console.log('setActiveWorkout called with workoutId:', workoutId);\n    console.log('Current state:', state);\n\n    const updatedWorkouts = state.program.workouts.map(workout => ({\n      ...workout,\n      selected: workout.id === workoutId\n    }));\n\n    const updatedProgram = {\n      ...state.program,\n      workouts: updatedWorkouts\n    };\n\n    console.log('Updated program:', updatedProgram);\n\n    dispatch({\n      type: 'UPDATE_PROGRAM',\n      payload: updatedProgram\n    });\n\n    dispatch({\n      type: 'SET_SELECTED_WORKOUT_ID',\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.program.workouts.map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId: updatedWorkout.programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: 'ADD_PROGRAM',\n      payload: {\n        ...details,\n        workouts: [] // Ensure workouts array is initialized\n      }\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = () => {\n    const programId = state.selectedProgramId;\n    const workoutsForProgram = Object.values(state.workouts).filter(\n      w => w.programId === programId\n    );\n\n    // Determine the highest current order and add 1 for the new workout\n    const newOrder =\n      workoutsForProgram.length > 0\n        ? Math.max(...workoutsForProgram.map(w => w.order)) + 1\n        : 1;\n\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      selected: true,\n      exercises: [],\n      order: newOrder\n    };\n\n    dispatch({ type: actionTypes.ADD_WORKOUT, payload: newWorkout });\n\n    // Update the program's workouts array\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: { programId, workout: newWorkout }\n    });\n\n    console.log('addWorkout newWorkout', newWorkout);\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    // Remove duplicates based on catalog_exercise_id\n    const uniqueExercises = Array.from(\n      new Set(standardizedExercises.map(ex => ex.catalog_exercise_id))\n    ).map(id =>\n      standardizedExercises.find(ex => ex.catalog_exercise_id === id)\n    );\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: uniqueExercises }\n    });\n\n    // Update the program's workout\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: { workoutId, exercises: uniqueExercises }\n    });\n  };\n\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: { workoutId, exercise }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    const workout = state.workouts[workoutId];\n    const updatedExercises = workout.exercises\n      .filter(ex => ex.id !== exerciseId)\n      .map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId, updatedExercises }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = [\n          ...ex.sets,\n          { id: uuidv4(), weight, reps, order: ex.sets.length + 1 }\n        ].map((set, index) => ({ ...set, order: index + 1 }));\n        return { ...ex, sets: updatedSets };\n      }\n      return ex;\n    });\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps, updatedExercises }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = ex.sets\n          .filter(set => set.id !== setId)\n          .map((set, index) => ({ ...set, order: index + 1 }));\n        return { ...ex, sets: updatedSets };\n      }\n      return ex;\n    });\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        updateExercise,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}