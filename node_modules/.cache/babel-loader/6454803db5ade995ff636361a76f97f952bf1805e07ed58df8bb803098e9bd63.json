{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      console.log('Action Type: ADD_WORKOUT');\n      console.log('State Before:', state);\n      console.log('Action Payload:', action.payload);\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      console.log('Adding workout in reducer:', newWorkout);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      const updatedWorkout = standardizeWorkout(action.payload);\n      if (!updatedWorkout) return state;\n      console.log('Updating workout in reducer:', updatedWorkout);\n      return {\n        ...state,\n        [updatedWorkout.id]: updatedWorkout\n      };\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingExercises = state[workoutIdAddEx].exercises || [];\n      return {\n        ...state,\n        [existingExercises]: {\n          ...state[existingExercises],\n          exercises: [...state[existingExercises].exercises, ...exercises.map(ex => ({\n            ...ex,\n            sets: ex.sets || [],\n            tempId: ex.tempId // Ensure tempId is carried over\n          }))]\n        }\n      };\n    case actionTypes.UPDATE_EXERCISE:\n      const {\n        workoutId: wId4,\n        exercise\n      } = action.payload;\n      const workout4 = state[wId4];\n      if (!workout4) return state;\n      const updatedExercises4 = workout4.exercises.map(ex => ex.id === exercise.id ? {\n        ...ex,\n        ...exercise\n      } : ex);\n      return {\n        ...state,\n        [wId4]: {\n          ...workout4,\n          exercises: updatedExercises4\n        }\n      };\n    case actionTypes.DELETE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n      const remainingExercises = workout5.exercises.filter(ex => ex.id !== exId5);\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: remainingExercises\n        }\n      };\n    case actionTypes.ADD_SET:\n      const {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workout = state[workoutId];\n      if (!workout) return state;\n      const updatedExercises = workout.exercises.map(exercise => {\n        if (exercise.id === exerciseId) {\n          return {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }]\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutId]: {\n          ...workout,\n          exercises: updatedExercises\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n    case actionTypes.DELETE_SET:\n      const {\n        workoutId: wId3,\n        exerciseId: exId2,\n        setId\n      } = action.payload;\n      const workout3 = state[wId3];\n      if (!workout3) return state;\n      const updatedExercises3 = workout3.exercises.map(exercise => {\n        if (exercise.id === exId2) {\n          const updatedSets = exercise.sets.filter(set => set.id !== setId).map((set, index) => ({\n            ...set,\n            order: index + 1\n          }));\n          return {\n            ...exercise,\n            sets: updatedSets\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId3]: {\n          ...workout3,\n          exercises: updatedExercises3\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        const newState = {\n          ...reorderedWorkouts\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","standardizeWorkout","workoutReducer","state","workouts","action","console","log","type","payload","ADD_WORKOUT","newWorkout","error","id","UPDATE_WORKOUT","updatedWorkout","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingExercises","map","ex","sets","tempId","UPDATE_EXERCISE","wId4","exercise","workout4","updatedExercises4","DELETE_EXERCISE","wId5","exerciseId","exId5","workout5","remainingExercises","filter","ADD_SET","weight","reps","workout","updatedExercises","order","length","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercises2","set","DELETE_SET","wId3","exId2","setId","workout3","updatedExercises3","updatedSets","index","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","reduce","acc","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      console.log('Action Type: ADD_WORKOUT');\n      console.log('State Before:', state);\n      console.log('Action Payload:', action.payload);\n\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      console.log('Adding workout in reducer:', newWorkout);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      const updatedWorkout = standardizeWorkout(action.payload);\n      if (!updatedWorkout) return state;\n      console.log('Updating workout in reducer:', updatedWorkout);\n      return {\n        ...state,\n        [updatedWorkout.id]: updatedWorkout\n      };\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingExercises = state[workoutIdAddEx].exercises || [];\n\n      return {\n        ...state,\n        [existingExercises]: {\n          ...state[existingExercises],\n          exercises: [\n            ...state[existingExercises].exercises,\n            ...exercises.map(ex => ({\n              ...ex,\n              sets: ex.sets || [],\n              tempId: ex.tempId // Ensure tempId is carried over\n            }))\n          ]\n        }\n      };\n\n    case actionTypes.UPDATE_EXERCISE:\n      const { workoutId: wId4, exercise } = action.payload;\n      const workout4 = state[wId4];\n      if (!workout4) return state;\n\n      const updatedExercises4 = workout4.exercises.map(ex =>\n        ex.id === exercise.id ? { ...ex, ...exercise } : ex\n      );\n\n      return {\n        ...state,\n        [wId4]: {\n          ...workout4,\n          exercises: updatedExercises4\n        }\n      };\n\n    case actionTypes.DELETE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n\n      const remainingExercises = workout5.exercises.filter(\n        ex => ex.id !== exId5\n      );\n\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: remainingExercises\n        }\n      };\n\n    case actionTypes.ADD_SET:\n      const { workoutId, exerciseId, weight, reps } = action.payload;\n      const workout = state[workoutId];\n      if (!workout) return state;\n\n      const updatedExercises = workout.exercises.map(exercise => {\n        if (exercise.id === exerciseId) {\n          return {\n            ...exercise,\n            sets: [\n              ...exercise.sets,\n              { id: uuidv4(), weight, reps, order: exercise.sets.length + 1 }\n            ]\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [workoutId]: {\n          ...workout,\n          exercises: updatedExercises\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set =>\n              set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n            )\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n\n    case actionTypes.DELETE_SET:\n      const { workoutId: wId3, exerciseId: exId2, setId } = action.payload;\n      const workout3 = state[wId3];\n      if (!workout3) return state;\n\n      const updatedExercises3 = workout3.exercises.map(exercise => {\n        if (exercise.id === exId2) {\n          const updatedSets = exercise.sets\n            .filter(set => set.id !== setId)\n            .map((set, index) => ({ ...set, order: index + 1 }));\n          return {\n            ...exercise,\n            sets: updatedSets\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [wId3]: {\n          ...workout3,\n          exercises: updatedExercises3\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      const newState = {\n        ...reorderedWorkouts\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}