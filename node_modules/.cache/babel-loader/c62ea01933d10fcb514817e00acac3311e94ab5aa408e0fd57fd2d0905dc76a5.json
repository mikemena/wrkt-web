{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.catalog_exercise_id));\n      const updatedExrc = [...existingWorkout.exercises, ...exercises.filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id))].map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n    case actionTypes.UPDATE_EXERCISE:\n      const {\n        workoutId: wId4,\n        exercise\n      } = action.payload;\n      const workout4 = state[wId4];\n      if (!workout4) return state;\n      const updatedExercises4 = workout4.exercises.map(ex => ex.id === exercise.id ? {\n        ...ex,\n        ...exercise\n      } : ex);\n      return {\n        ...state,\n        [wId4]: {\n          ...workout4,\n          exercises: updatedExercises4\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId\n      } = action.payload;\n      const workout = state[workoutId];\n      if (!workout) return state;\n      const remainingExercises = workout.exercises.filter(ex => exerciseUtils.getExerciseId(ex) !== exerciseId).map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      return {\n        ...state,\n        [workoutId]: {\n          ...workout,\n          exercises: remainingExercises\n        }\n      };\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }].map((set, index) => ({\n              ...set,\n              order: index + 1\n            }))\n          } : exercise)\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(exercise => {\n        const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n        if (exerciseIdToCompare === exerciseIdDeleteSet) {\n          return {\n            ...exercise,\n            sets: exercise.sets.filter(set => set.id !== setIdDeleteSet).map((set, index) => ({\n              ...set,\n              order: index + 1\n            }))\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        const newState = {\n          ...reorderedWorkouts\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","workoutReducer","state","workouts","action","type","ADD_WORKOUT","payload","id","UPDATE_WORKOUT","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingWorkout","console","error","existingExerciseIds","Set","map","ex","catalog_exercise_id","updatedExrc","filter","has","exercise","index","order","UPDATE_EXERCISE","wId4","workout4","updatedExercises4","REMOVE_EXERCISE","workout","remainingExercises","getExerciseId","exerciseId","ADD_SET","workoutIdAddSet","weight","reps","workoutToUpdate","sets","length","set","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercises2","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutDeleteSet","updatedExercisesDeleteSet","exerciseIdToCompare","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","reduce","acc","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.catalog_exercise_id)\n      );\n\n      const updatedExrc = [\n        ...existingWorkout.exercises,\n        ...exercises.filter(\n          ex => !existingExerciseIds.has(ex.catalog_exercise_id)\n        )\n      ].map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n\n    case actionTypes.UPDATE_EXERCISE:\n      const { workoutId: wId4, exercise } = action.payload;\n      const workout4 = state[wId4];\n      if (!workout4) return state;\n\n      const updatedExercises4 = workout4.exercises.map(ex =>\n        ex.id === exercise.id ? { ...ex, ...exercise } : ex\n      );\n\n      return {\n        ...state,\n        [wId4]: {\n          ...workout4,\n          exercises: updatedExercises4\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId } = action.payload;\n      const workout = state[workoutId];\n      if (!workout) return state;\n\n      const remainingExercises = workout.exercises\n        .filter(ex => exerciseUtils.getExerciseId(ex) !== exerciseId)\n        .map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n      return {\n        ...state,\n        [workoutId]: {\n          ...workout,\n          exercises: remainingExercises\n        }\n      };\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise =>\n            exerciseUtils.getExerciseId(exercise) === exerciseId\n              ? {\n                  ...exercise,\n                  sets: [\n                    ...exercise.sets,\n                    {\n                      id: uuidv4(),\n                      weight,\n                      reps,\n                      order: exercise.sets.length + 1\n                    }\n                  ].map((set, index) => ({ ...set, order: index + 1 }))\n                }\n              : exercise\n          )\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set =>\n              set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n            )\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(\n        exercise => {\n          const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n          if (exerciseIdToCompare === exerciseIdDeleteSet) {\n            return {\n              ...exercise,\n              sets: exercise.sets\n                .filter(set => set.id !== setIdDeleteSet)\n                .map((set, index) => ({ ...set, order: index + 1 }))\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      const newState = {\n        ...reorderedWorkouts\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}