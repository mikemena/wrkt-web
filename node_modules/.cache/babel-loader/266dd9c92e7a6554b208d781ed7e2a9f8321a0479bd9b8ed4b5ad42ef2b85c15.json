{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.catalog_exercise_id));\n      const updatedExrc = [...existingWorkout.exercises, ...exercises.filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id)).map(ex => exerciseUtils.standardizeExercise(ex))].map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n      const remainingExercises = workout5.exercises.filter(ex => ex.id !== exId5).map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      console.log('remainingExercises', remainingExercises);\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: remainingExercises\n        }\n      };\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }].map((set, index) => ({\n              ...set,\n              order: index + 1\n            }))\n          } : exercise)\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(exercise => {\n        const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n        if (exerciseIdToCompare === exerciseIdDeleteSet) {\n          return {\n            ...exercise,\n            sets: exercise.sets.filter(set => set.id !== setIdDeleteSet).map((set, index) => ({\n              ...set,\n              order: index + 1\n            }))\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        const newState = {\n          ...reorderedWorkouts\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","standardizeWorkout","workoutReducer","state","workouts","action","type","ADD_WORKOUT","newWorkout","payload","console","error","id","UPDATE_WORKOUT","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingWorkout","existingExerciseIds","Set","map","ex","catalog_exercise_id","updatedExrc","filter","has","standardizeExercise","exercise","index","order","REMOVE_EXERCISE","wId5","exerciseId","exId5","workout5","remainingExercises","log","ADD_SET","workoutIdAddSet","weight","reps","workoutToUpdate","getExerciseId","sets","length","set","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercises2","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutDeleteSet","updatedExercisesDeleteSet","exerciseIdToCompare","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","workout","reduce","acc","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.catalog_exercise_id)\n      );\n\n      const updatedExrc = [\n        ...existingWorkout.exercises,\n        ...exercises\n          .filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id))\n          .map(ex => exerciseUtils.standardizeExercise(ex))\n      ].map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n\n      const remainingExercises = workout5.exercises\n        .filter(ex => ex.id !== exId5)\n        .map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n      console.log('remainingExercises', remainingExercises);\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: remainingExercises\n        }\n      };\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise =>\n            exerciseUtils.getExerciseId(exercise) === exerciseId\n              ? {\n                  ...exercise,\n                  sets: [\n                    ...exercise.sets,\n                    {\n                      id: uuidv4(),\n                      weight,\n                      reps,\n                      order: exercise.sets.length + 1\n                    }\n                  ].map((set, index) => ({ ...set, order: index + 1 }))\n                }\n              : exercise\n          )\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set =>\n              set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n            )\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(\n        exercise => {\n          const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n          if (exerciseIdToCompare === exerciseIdDeleteSet) {\n            return {\n              ...exercise,\n              sets: exercise.sets\n                .filter(set => set.id !== setIdDeleteSet)\n                .map((set, index) => ({ ...set, order: index + 1 }))\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      const newState = {\n        ...reorderedWorkouts\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}