{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      const setId = uuidv4();\n      const {\n        id,\n        count,\n        weight,\n        exerciseId\n      } = action.payload;\n      if (!state[id]) {\n        console.error('Set not found:', id);\n        return state;\n      }\n      return {\n        ...state,\n        [setId]: {\n          ...state[setId],\n          id: setId,\n          count,\n          weight,\n          exerciseId\n        }\n      };\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return {\n                            ...set,\n                            ...action.payload.updatedSet\n                          };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== action.payload.setId).map((set, index) => ({\n                      ...set,\n                      order: index + 1\n                    }));\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { setReducer, initialState };","map":{"version":3,"names":["v4","uuidv4","initialState","setReducer","state","action","type","setId","id","count","weight","exerciseId","payload","console","error","program","workouts","map","workout","workoutId","exercises","exercise","sets","set","order","updatedSet","filteredAndRenumberedSets","filter","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      const setId = uuidv4();\n      const { id, count, weight, exerciseId } = action.payload;\n\n      if (!state[id]) {\n        console.error('Set not found:', id);\n        return state;\n      }\n      return {\n        ...state,\n        [setId]: {\n          ...state[setId],\n          id: setId,\n          count,\n          weight,\n          exerciseId\n        }\n      };\n\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return { ...set, ...action.payload.updatedSet };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets\n                      .filter(set => set.id !== action.payload.setId)\n                      .map((set, index) => ({ ...set, order: index + 1 }));\n\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { setReducer, initialState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}