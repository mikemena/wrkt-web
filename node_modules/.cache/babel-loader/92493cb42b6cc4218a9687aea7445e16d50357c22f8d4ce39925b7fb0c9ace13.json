{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [program, setProgram] = useState({\n    user_id: 2,\n    // This should be set to the logged in user's ID\n    name: 'Program 1',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: [{\n      id: uuidv4(),\n      name: 'Workout 1',\n      exercises: [],\n      active: false\n    }]\n  });\n  // console.log('Program state:', program);\n\n  // Initialize the active workout to the first workout in the program\n  const [activeWorkout, setActiveWorkout] = useState(program.workouts[0]);\n  const updateActiveWorkout = useCallback(workout => {\n    setActiveWorkout(workout);\n  }, []);\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2,\n      // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: program.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id,\n        // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order,\n          // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    // console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({\n      ...prev,\n      ...details\n    }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    // console.log('addWorkout function called', workout);\n    // console.log('Current workouts before add:', program.workouts);\n    const tempId = uuidv4();\n\n    // Find the highest index used in existing workout names\n    const maxIndex = program.workouts.reduce((max, currWorkout) => {\n      const match = currWorkout.name.match(/Workout (\\d+)/); // Assuming the format \"Workout 1\", \"Workout 2\", etc.\n      const index = match ? parseInt(match[1], 10) : 0;\n      return Math.max(max, index);\n    }, 0);\n    const workoutTitle = `Workout ${maxIndex + 1}`;\n    const newWorkout = {\n      ...workout,\n      id: tempId,\n      name: workout.name || workoutTitle\n    };\n    setProgram(prev => {\n      const updatedWorkouts = [...prev.workouts, newWorkout];\n      // console.log('Updated workouts after add:', updatedWorkouts);\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n\n    // console.log('New activeWorkoutId set:', newWorkout.id);\n    // console.log('Updated workouts after add:', program.workouts);\n    // console.log('Setting activeWorkoutId to:', tempId);\n    setActiveWorkout(newWorkout);\n    // console.log('activeWorkoutId after set:', tempId);\n  }, [setProgram, setActiveWorkout, program.workouts]);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    // console.log(`Attempting to delete workout with id: ${workoutId}`);\n    setProgram(prev => {\n      const workoutIndex = prev.workouts.findIndex(workout => workout.id === workoutId);\n\n      // Ensure we have more than one workout to prevent deleting the last one.\n      if (prev.workouts.length <= 1) return prev; // Or handle the error as needed.\n\n      const updatedWorkouts = prev.workouts.filter(workout => workout.id !== workoutId);\n      console.log('Workouts after deletion:', updatedWorkouts);\n      let newActiveWorkout = null;\n      // If the deleted workout was the active one, update the activeWorkoutId.\n      if (newActiveWorkoutId === workoutId) {\n        if (workoutIndex === prev.workouts.length - 1) {\n          // If it was the last workout, set the previous one as active.\n          newActiveWorkoutId = updatedWorkouts[workoutIndex - 1].id;\n        } else {\n          // Otherwise, set the next workout as active (or previous if it was the last).\n          newActiveWorkoutId = updatedWorkouts[Math.max(0, workoutIndex)].id;\n        }\n      }\n\n      // Update the active workout ID in the state.\n      setActiveWorkoutId(newActiveWorkoutId);\n      console.log('New active workout ID from deleting a workout:', newActiveWorkoutId);\n\n      // Return the updated program.\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n  }, []);\n\n  // Function to go to the next workout\n\n  const goToNextWorkout = () => {\n    const currentIndex = program.workouts.findIndex(workout => workout.id === activeWorkoutId);\n    const nextIndex = (currentIndex + 1) % program.workouts.length;\n    setActiveWorkoutId(program.workouts[nextIndex].id);\n    console.log('Active workout ID after next:', program.workouts[nextIndex].id);\n  };\n\n  // Function to go to the previous workout\n\n  const goToPreviousWorkout = () => {\n    const currentIndex = program.workouts.findIndex(workout => workout.id === activeWorkout.id);\n    const previousIndex = (currentIndex - 1 + program.workouts.length) % program.workouts.length;\n    setActiveWorkoutId(program.workouts[previousIndex].id);\n    console.log('Active workout ID after previous:', program.workouts[previousIndex].id);\n  };\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          const currentExercises = Array.isArray(workout.exercises) ? workout.exercises : [];\n\n          // Add the tempId to the new exercise object\n          const newExercise = {\n            ...exercise,\n            id: tempId,\n            exerciseCatalogId: exercise.id,\n            isNew: true,\n            sets: [{\n              id: uuidv4(),\n              reps: '',\n              weight: '',\n              order: 1,\n              isNew: true\n            }]\n          };\n          // console.log('Adding exercise:', newExercise);\n\n          // Determine the next order value for the new exercise\n          const nextOrder = currentExercises.length > 0 ? Math.max(...currentExercises.map(ex => ex.order)) + 1 : 1;\n          return {\n            ...workout,\n            exercises: [...currentExercises, {\n              ...newExercise,\n              order: nextOrder\n            }]\n          };\n        }\n        return workout;\n      });\n      return {\n        ...prev,\n        workouts: newWorkouts\n      };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => exercise.catalog_exercise_id === updatedExercise.catalog_exercise_id ? {\n              ...exercise,\n              ...updatedExercise\n            } : exercise)\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    // console.log(\n    //   `Deleting exercise. Workout ID: ${workoutId}, Exercise ID: ${exerciseId}`\n    // );\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // console.log(\n        //   `Before deletion, number of exercises: ${workout.exercises.length}`\n        // );\n\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(exercise => exercise.id !== exerciseId)\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutId, exerciseId, newSet) => {\n    const tempId = uuidv4();\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its id\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.id === exerciseId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const currentSets = Array.isArray(exercise.sets) ? exercise.sets : [];\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const nextOrder = currentSets.length > 0 ? Math.max(...currentSets.map(set => set.order)) + 1 : 1;\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  order: nextOrder,\n                  isNew: true\n                };\n                return {\n                  ...exercise,\n                  sets: [...currentSets, updatedSet]\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // useEffect(() => {\n  //   // console.log('Program state updated:', program);\n  // }, [program]); // This effect will run whenever the 'program' state changes\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return {\n                        ...set,\n                        ...updatedSet\n                      };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                // Filter out the set to be deleted and renumber the remaining sets\n                const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== setId).map((set, index) => ({\n                  ...set,\n                  order: index + 1\n                })); // Assuming 'order' needs to be updated\n\n                return {\n                  ...exercise,\n                  sets: filteredAndRenumberedSets\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      program,\n      saveProgram,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      updateActiveWorkout,\n      deleteWorkout,\n      goToNextWorkout,\n      goToPreviousWorkout,\n      addExercise,\n      updateExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"Bkm7QP6KpmWHZXTPuYQkXHKUL4A=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useState","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","program","setProgram","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workouts","id","exercises","active","activeWorkout","setActiveWorkout","updateActiveWorkout","workout","saveProgram","NewProgram","programData","programName","programDuration","daysPerWeek","durationUnit","mainGoal","map","order","exercise","catalog_exercise_id","sets","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","updateProgramDetails","details","prev","addWorkout","tempId","maxIndex","reduce","max","currWorkout","match","index","parseInt","Math","workoutTitle","newWorkout","updatedWorkouts","updateWorkout","updatedWorkout","prevProgram","deleteWorkout","workoutId","workoutIndex","findIndex","length","filter","log","newActiveWorkout","newActiveWorkoutId","setActiveWorkoutId","goToNextWorkout","currentIndex","activeWorkoutId","nextIndex","goToPreviousWorkout","previousIndex","addExercise","newWorkouts","currentExercises","Array","isArray","newExercise","exerciseCatalogId","isNew","reps","weight","nextOrder","ex","updateExercise","updatedExercise","deleteExercise","exerciseId","addSet","newSet","currentSets","set","updatedSet","updateSet","deleteSet","setId","filteredAndRenumberedSets","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [program, setProgram] = useState({\n    user_id: 2, // This should be set to the logged in user's ID\n    name: 'Program 1',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: [\n      { id: uuidv4(), name: 'Workout 1', exercises: [], active: false }\n    ]\n  });\n  // console.log('Program state:', program);\n\n  // Initialize the active workout to the first workout in the program\n  const [activeWorkout, setActiveWorkout] = useState(program.workouts[0]);\n\n  const updateActiveWorkout = useCallback(workout => {\n    setActiveWorkout(workout);\n  }, []);\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2, // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: program.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id, // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order, // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    // console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({ ...prev, ...details }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(\n    workout => {\n      // console.log('addWorkout function called', workout);\n      // console.log('Current workouts before add:', program.workouts);\n      const tempId = uuidv4();\n\n      // Find the highest index used in existing workout names\n      const maxIndex = program.workouts.reduce((max, currWorkout) => {\n        const match = currWorkout.name.match(/Workout (\\d+)/); // Assuming the format \"Workout 1\", \"Workout 2\", etc.\n        const index = match ? parseInt(match[1], 10) : 0;\n        return Math.max(max, index);\n      }, 0);\n\n      const workoutTitle = `Workout ${maxIndex + 1}`;\n\n      const newWorkout = {\n        ...workout,\n        id: tempId,\n        name: workout.name || workoutTitle\n      };\n      setProgram(prev => {\n        const updatedWorkouts = [...prev.workouts, newWorkout];\n        // console.log('Updated workouts after add:', updatedWorkouts);\n        return { ...prev, workouts: updatedWorkouts };\n      });\n\n      // console.log('New activeWorkoutId set:', newWorkout.id);\n      // console.log('Updated workouts after add:', program.workouts);\n      // console.log('Setting activeWorkoutId to:', tempId);\n      setActiveWorkout(newWorkout);\n      // console.log('activeWorkoutId after set:', tempId);\n    },\n    [setProgram, setActiveWorkout, program.workouts]\n  );\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout =>\n        workout.id === updatedWorkout.id ? updatedWorkout : workout\n      )\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    // console.log(`Attempting to delete workout with id: ${workoutId}`);\n    setProgram(prev => {\n      const workoutIndex = prev.workouts.findIndex(\n        workout => workout.id === workoutId\n      );\n\n      // Ensure we have more than one workout to prevent deleting the last one.\n      if (prev.workouts.length <= 1) return prev; // Or handle the error as needed.\n\n      const updatedWorkouts = prev.workouts.filter(\n        workout => workout.id !== workoutId\n      );\n      console.log('Workouts after deletion:', updatedWorkouts);\n\n      let newActiveWorkout = null;\n      // If the deleted workout was the active one, update the activeWorkoutId.\n      if (newActiveWorkoutId === workoutId) {\n        if (workoutIndex === prev.workouts.length - 1) {\n          // If it was the last workout, set the previous one as active.\n          newActiveWorkoutId = updatedWorkouts[workoutIndex - 1].id;\n        } else {\n          // Otherwise, set the next workout as active (or previous if it was the last).\n          newActiveWorkoutId = updatedWorkouts[Math.max(0, workoutIndex)].id;\n        }\n      }\n\n      // Update the active workout ID in the state.\n      setActiveWorkoutId(newActiveWorkoutId);\n      console.log(\n        'New active workout ID from deleting a workout:',\n        newActiveWorkoutId\n      );\n\n      // Return the updated program.\n      return { ...prev, workouts: updatedWorkouts };\n    });\n  }, []);\n\n  // Function to go to the next workout\n\n  const goToNextWorkout = () => {\n    const currentIndex = program.workouts.findIndex(\n      workout => workout.id === activeWorkoutId\n    );\n    const nextIndex = (currentIndex + 1) % program.workouts.length;\n    setActiveWorkoutId(program.workouts[nextIndex].id);\n    console.log(\n      'Active workout ID after next:',\n      program.workouts[nextIndex].id\n    );\n  };\n\n  // Function to go to the previous workout\n\n  const goToPreviousWorkout = () => {\n    const currentIndex = program.workouts.findIndex(\n      workout => workout.id === activeWorkout.id\n    );\n    const previousIndex =\n      (currentIndex - 1 + program.workouts.length) % program.workouts.length;\n    setActiveWorkoutId(program.workouts[previousIndex].id);\n    console.log(\n      'Active workout ID after previous:',\n      program.workouts[previousIndex].id\n    );\n  };\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          const currentExercises = Array.isArray(workout.exercises)\n            ? workout.exercises\n            : [];\n\n          // Add the tempId to the new exercise object\n          const newExercise = {\n            ...exercise,\n            id: tempId,\n            exerciseCatalogId: exercise.id,\n            isNew: true,\n            sets: [\n              { id: uuidv4(), reps: '', weight: '', order: 1, isNew: true }\n            ]\n          };\n          // console.log('Adding exercise:', newExercise);\n\n          // Determine the next order value for the new exercise\n          const nextOrder =\n            currentExercises.length > 0\n              ? Math.max(...currentExercises.map(ex => ex.order)) + 1\n              : 1;\n\n          return {\n            ...workout,\n            exercises: [\n              ...currentExercises,\n              { ...newExercise, order: nextOrder }\n            ]\n          };\n        }\n        return workout;\n      });\n      return { ...prev, workouts: newWorkouts };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise =>\n              exercise.catalog_exercise_id ===\n              updatedExercise.catalog_exercise_id\n                ? { ...exercise, ...updatedExercise }\n                : exercise\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    // console.log(\n    //   `Deleting exercise. Workout ID: ${workoutId}, Exercise ID: ${exerciseId}`\n    // );\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // console.log(\n        //   `Before deletion, number of exercises: ${workout.exercises.length}`\n        // );\n\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(\n              exercise => exercise.id !== exerciseId\n            )\n          };\n        }\n\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutId, exerciseId, newSet) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its id\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.id === exerciseId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const currentSets = Array.isArray(exercise.sets)\n                  ? exercise.sets\n                  : [];\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const nextOrder =\n                  currentSets.length > 0\n                    ? Math.max(...currentSets.map(set => set.order)) + 1\n                    : 1;\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  order: nextOrder,\n                  isNew: true\n                };\n\n                return { ...exercise, sets: [...currentSets, updatedSet] };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // useEffect(() => {\n  //   // console.log('Program state updated:', program);\n  // }, [program]); // This effect will run whenever the 'program' state changes\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return { ...set, ...updatedSet };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                // Filter out the set to be deleted and renumber the remaining sets\n                const filteredAndRenumberedSets = exercise.sets\n                  .filter(set => set.id !== setId)\n                  .map((set, index) => ({ ...set, order: index + 1 })); // Assuming 'order' needs to be updated\n\n                return {\n                  ...exercise,\n                  sets: filteredAndRenumberedSets\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        program,\n        saveProgram,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        updateActiveWorkout,\n        deleteWorkout,\n        goToNextWorkout,\n        goToPreviousWorkout,\n        addExercise,\n        updateExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}