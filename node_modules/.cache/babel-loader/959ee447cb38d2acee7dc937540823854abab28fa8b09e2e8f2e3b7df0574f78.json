{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useMemo } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { createNewWorkout, createNewExercise, createNewSet } from '../utils/programStructures';\nimport exerciseUtils from '../utils/exercise.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatchBase] = useReducer(rootReducer, initialState);\n\n  // Program Actions\n\n  const dispatch = useMemo(() => dispatchBase, []);\n  const prepareProgramForSave = program => {\n    const {\n      tempId,\n      isNew,\n      ...programToSave\n    } = program;\n    return {\n      ...programToSave,\n      workouts: Object.values(program.workouts).map(prepareWorkoutForSave)\n    };\n  };\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: program\n    });\n  };\n  const saveProgram = async () => {\n    const programToSave = prepareProgramForSave(state.programs[state.selectedProgramId]);\n    console.log('Saving program with payload:', programToSave);\n    dispatch({\n      type: 'SAVE_PROGRAM_START'\n    });\n    try {\n      validateProgramData(programToSave);\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programToSave)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'SAVE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: 'SAVE_PROGRAM_START'\n    });\n    try {\n      const programToUpdate = prepareProgramForSave(updatedProgram);\n      validateProgramData(programToUpdate);\n      console.log('Sending updated program to server:', programToUpdate);\n      const response = await fetch(`http://localhost:9025/api/programs/${programToUpdate.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programToUpdate)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'UPDATE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const prepareWorkoutForSave = workout => {\n    const {\n      tempId,\n      isNew,\n      ...workoutToSave\n    } = workout;\n    return {\n      ...workoutToSave,\n      exercises: workout.exercises.map(prepareExerciseForSave)\n    };\n  };\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order = Object.keys(state.programs[programId].workouts).length + 1;\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n  };\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: {\n      programId,\n      workoutId\n    }\n  });\n\n  // Exercise Actions\n\n  const prepareExerciseForSave = exercise => {\n    const {\n      tempId,\n      isNew,\n      ...exerciseToSave\n    } = exercise;\n    return {\n      ...exerciseToSave,\n      sets: exercise.sets.map(prepareSetForSave)\n    };\n  };\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const prepareSetForSave = set => {\n    const {\n      tempId,\n      isNew,\n      ...setToSave\n    } = set;\n    return setToSave;\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set for workoutId:', workoutId, 'exerciseId:', exerciseId);\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const newSet = createNewSet();\n    newSet.weight = weight;\n    newSet.reps = reps;\n    newSet.order = exercise.sets.length + 1;\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        newSet\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const setExists = exercise.sets.some(set => set.id === setId || set.tempId === setId);\n    if (!setExists) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        setId\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_PROGRAM\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"EpK5rHYqtFFZ5CA3dpjwBMfYLTg=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","useMemo","actionTypes","rootReducer","initialState","createNewWorkout","createNewExercise","createNewSet","exerciseUtils","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatchBase","dispatch","prepareProgramForSave","program","tempId","isNew","programToSave","workouts","Object","values","map","prepareWorkoutForSave","setSelectedProgram","console","log","type","payload","saveProgram","programs","selectedProgramId","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","error","Error","savedProgram","json","message","updateProgram","updatedProgram","programToUpdate","id","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","programData","Array","isArray","forEach","workout","exercises","exercise","sets","addProgram","details","ADD_PROGRAM","deleteProgram","programId","DELETE_PROGRAM","workoutToSave","prepareExerciseForSave","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","addWorkout","newWorkout","name","order","keys","length","ADD_WORKOUT","updateWorkout","deleteWorkout","DELETE_WORKOUT","exerciseToSave","prepareSetForSave","addExercise","standardizedExercises","ex","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","activeWorkoutId","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","set","setToSave","addSet","weight","reps","find","getExerciseId","newSet","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","setExists","some","REMOVE_SET","clearState","CLEAR_PROGRAM","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer, useMemo } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport {\n  createNewWorkout,\n  createNewExercise,\n  createNewSet\n} from '../utils/programStructures';\n\nimport exerciseUtils from '../utils/exercise.js';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatchBase] = useReducer(rootReducer, initialState);\n\n  // Program Actions\n\n  const dispatch = useMemo(() => dispatchBase, []);\n\n  const prepareProgramForSave = program => {\n    const { tempId, isNew, ...programToSave } = program;\n    return {\n      ...programToSave,\n      workouts: Object.values(program.workouts).map(prepareWorkoutForSave)\n    };\n  };\n\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: program\n    });\n  };\n\n  const saveProgram = async () => {\n    const programToSave = prepareProgramForSave(\n      state.programs[state.selectedProgramId]\n    );\n\n    console.log('Saving program with payload:', programToSave);\n\n    dispatch({ type: 'SAVE_PROGRAM_START' });\n    try {\n      validateProgramData(programToSave);\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(programToSave)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'SAVE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: 'SAVE_PROGRAM_START' });\n    try {\n      const programToUpdate = prepareProgramForSave(updatedProgram);\n      validateProgramData(programToUpdate);\n\n      console.log('Sending updated program to server:', programToUpdate);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programToUpdate.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(programToUpdate)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: 'UPDATE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const prepareWorkoutForSave = workout => {\n    const { tempId, isNew, ...workoutToSave } = workout;\n    return {\n      ...workoutToSave,\n      exercises: workout.exercises.map(prepareExerciseForSave)\n    };\n  };\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order =\n      Object.keys(state.programs[programId].workouts).length + 1;\n\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: { programId, workout: newWorkout }\n    });\n  };\n\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: { programId, workout: updatedWorkout }\n    });\n  };\n\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: { programId, workoutId }\n  });\n\n  // Exercise Actions\n\n  const prepareExerciseForSave = exercise => {\n    const { tempId, isNew, ...exerciseToSave } = exercise;\n    return {\n      ...exerciseToSave,\n      sets: exercise.sets.map(prepareSetForSave)\n    };\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const prepareSetForSave = set => {\n    const { tempId, isNew, ...setToSave } = set;\n    return setToSave;\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log(\n      'Adding set for workoutId:',\n      workoutId,\n      'exerciseId:',\n      exerciseId\n    );\n\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const newSet = createNewSet();\n    newSet.weight = weight;\n    newSet.reps = reps;\n    newSet.order = exercise.sets.length + 1;\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, newSet }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const setExists = exercise.sets.some(\n      set => set.id === setId || set.tempId === setId\n    );\n    if (!setExists) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: { workoutId, exerciseId, setId }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_PROGRAM });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}