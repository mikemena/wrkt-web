{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      {\n        const {\n          workoutId,\n          exerciseId,\n          weight,\n          reps\n        } = action.payload;\n        const setId = uuidv4();\n        const newSet = {\n          id: setId,\n          weight,\n          reps,\n          order: (state[exerciseId] || []).length + 1\n        };\n        return {\n          ...state,\n          [exerciseId]: [...(state[exerciseId] || []), newSet]\n        };\n      }\n    case 'UPDATE_SET':\n      {\n        const {\n          workoutId,\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        return {\n          ...state,\n          [exerciseId]: state[exerciseId].map(set => set.id === updatedSet.id ? {\n            ...set,\n            ...updatedSet\n          } : set)\n        };\n      }\n    case 'DELETE_SET':\n      {\n        const {\n          workoutId,\n          exerciseId,\n          setId\n        } = action.payload;\n        return {\n          ...state,\n          [exerciseId]: state[exerciseId].filter(set => set.id !== setId)\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { setReducer };","map":{"version":3,"names":["v4","uuidv4","initialState","setReducer","state","sets","action","type","workoutId","exerciseId","weight","reps","payload","setId","newSet","id","order","length","updatedSet","map","set","filter"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case 'ADD_SET': {\n      const { workoutId, exerciseId, weight, reps } = action.payload;\n      const setId = uuidv4();\n      const newSet = {\n        id: setId,\n        weight,\n        reps,\n        order: (state[exerciseId] || []).length + 1\n      };\n\n      return {\n        ...state,\n        [exerciseId]: [...(state[exerciseId] || []), newSet]\n      };\n    }\n\n    case 'UPDATE_SET': {\n      const { workoutId, exerciseId, updatedSet } = action.payload;\n\n      return {\n        ...state,\n        [exerciseId]: state[exerciseId].map(set =>\n          set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n        )\n      };\n    }\n\n    case 'DELETE_SET': {\n      const { workoutId, exerciseId, setId } = action.payload;\n\n      return {\n        ...state,\n        [exerciseId]: state[exerciseId].filter(set => set.id !== setId)\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { setReducer };\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,UAAUA,CAACC,KAAK,GAAGF,YAAY,CAACG,IAAI,EAAEC,MAAM,EAAE;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MAAE;QACd,MAAM;UAAEC,SAAS;UAAEC,UAAU;UAAEC,MAAM;UAAEC;QAAK,CAAC,GAAGL,MAAM,CAACM,OAAO;QAC9D,MAAMC,KAAK,GAAGZ,MAAM,CAAC,CAAC;QACtB,MAAMa,MAAM,GAAG;UACbC,EAAE,EAAEF,KAAK;UACTH,MAAM;UACNC,IAAI;UACJK,KAAK,EAAE,CAACZ,KAAK,CAACK,UAAU,CAAC,IAAI,EAAE,EAAEQ,MAAM,GAAG;QAC5C,CAAC;QAED,OAAO;UACL,GAAGb,KAAK;UACR,CAACK,UAAU,GAAG,CAAC,IAAIL,KAAK,CAACK,UAAU,CAAC,IAAI,EAAE,CAAC,EAAEK,MAAM;QACrD,CAAC;MACH;IAEA,KAAK,YAAY;MAAE;QACjB,MAAM;UAAEN,SAAS;UAAEC,UAAU;UAAES;QAAW,CAAC,GAAGZ,MAAM,CAACM,OAAO;QAE5D,OAAO;UACL,GAAGR,KAAK;UACR,CAACK,UAAU,GAAGL,KAAK,CAACK,UAAU,CAAC,CAACU,GAAG,CAACC,GAAG,IACrCA,GAAG,CAACL,EAAE,KAAKG,UAAU,CAACH,EAAE,GAAG;YAAE,GAAGK,GAAG;YAAE,GAAGF;UAAW,CAAC,GAAGE,GACzD;QACF,CAAC;MACH;IAEA,KAAK,YAAY;MAAE;QACjB,MAAM;UAAEZ,SAAS;UAAEC,UAAU;UAAEI;QAAM,CAAC,GAAGP,MAAM,CAACM,OAAO;QAEvD,OAAO;UACL,GAAGR,KAAK;UACR,CAACK,UAAU,GAAGL,KAAK,CAACK,UAAU,CAAC,CAACY,MAAM,CAACD,GAAG,IAAIA,GAAG,CAACL,EAAE,KAAKF,KAAK;QAChE,CAAC;MACH;IAEA;MACE,OAAOT,KAAK;EAChB;AACF;AAEA,SAASD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}