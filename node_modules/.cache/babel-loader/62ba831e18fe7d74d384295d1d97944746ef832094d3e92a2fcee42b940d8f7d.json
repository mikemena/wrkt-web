{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async newProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      console.log('Saving program:', newProgram); // Log the program data\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgramDetails = details => {\n    console.log('Dispatching UPDATE_PROGRAM_DETAILS:', {\n      details\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_DETAILS,\n      payload: details\n    });\n  };\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises\n      }\n    });\n  };\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 0, reps = 0) => {\n    console.log('Dispatching ADD_SET:', {\n      workoutId,\n      exerciseId,\n      weight,\n      reps\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    console.log('Dispatching UPDATE_SET:', {\n      workoutId,\n      exerciseId,\n      updatedSet\n    });\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    console.log('Dispatching DELETE_SET:', {\n      workoutId,\n      exerciseId,\n      setId\n    });\n    dispatch({\n      type: actionTypes.DELETE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        setId\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setActiveWorkout","workoutId","console","error","type","SET_ACTIVE_WORKOUT","payload","saveProgram","newProgram","SAVE_PROGRAM_START","log","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgramDetails","details","UPDATE_PROGRAM_DETAILS","addWorkout","workout","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","exercises","ADD_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","weight","reps","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","DELETE_SET","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async newProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      console.log('Saving program:', newProgram); // Log the program data\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgramDetails = details => {\n    console.log('Dispatching UPDATE_PROGRAM_DETAILS:', {\n      details\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_DETAILS,\n      payload: details\n    });\n  };\n\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises }\n    });\n  };\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 0, reps = 0) => {\n    console.log('Dispatching ADD_SET:', {\n      workoutId,\n      exerciseId,\n      weight,\n      reps\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    console.log('Dispatching UPDATE_SET:', {\n      workoutId,\n      exerciseId,\n      updatedSet\n    });\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    console.log('Dispatching DELETE_SET:', { workoutId, exerciseId, setId });\n    dispatch({\n      type: actionTypes.DELETE_SET,\n      payload: { workoutId, exerciseId, setId }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,MAAMC,cAAc,gBAAGP,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMQ,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACE,WAAW,EAAEC,YAAY,CAAC;EAE/D,MAAMS,gBAAgB,GAAGC,SAAS,IAAI;IACpC,IAAI,CAACA,SAAS,EAAE;MACdC,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;MACnE,OAAO,CAAC;IACV;IACAJ,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACgB,kBAAkB;MACpCC,OAAO,EAAEL;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,WAAW,GAAG,MAAMC,UAAU,IAAI;IACtCT,QAAQ,CAAC;MAAEK,IAAI,EAAEf,WAAW,CAACoB;IAAmB,CAAC,CAAC;IAClD,IAAI;MACFP,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEF,UAAU,CAAC,CAAC,CAAC;MAC5C,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QACzClB,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEgB,SAAS,CAAC,CAAC,CAAC;QACnD,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAC1CxB,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACmC,oBAAoB;QACtClB,OAAO,EAAEgB;MACX,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CJ,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACoC,oBAAoB;QACtCnB,OAAO,EAAEH,KAAK,CAACuB;MACjB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAGC,OAAO,IAAI;IACtC1B,OAAO,CAACQ,GAAG,CAAC,qCAAqC,EAAE;MACjDkB;IACF,CAAC,CAAC;IACF7B,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACwC,sBAAsB;MACxCvB,OAAO,EAAEsB;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,UAAU,GAAGC,OAAO,IAAI;IAC5BhC,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC2C,WAAW;MAC7B1B,OAAO,EAAEyB;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,aAAa,GAAGF,OAAO,IAAI;IAC/BhC,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC6C,cAAc;MAChC5B,OAAO,EAAEyB;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,aAAa,GAAGlC,SAAS,IAAI;IACjCF,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC+C,cAAc;MAChC9B,OAAO,EAAEL;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMoC,WAAW,GAAGA,CAACpC,SAAS,EAAEqC,SAAS,KAAK;IAC5CvC,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACkD,YAAY;MAC9BjC,OAAO,EAAE;QAAEL,SAAS;QAAEqC;MAAU;IAClC,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,cAAc,GAAGA,CAACvC,SAAS,EAAEwC,UAAU,KAAK;IAChD1C,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACqD,eAAe;MACjCpC,OAAO,EAAE;QAAEL,SAAS;QAAEwC;MAAW;IACnC,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,MAAM,GAAGA,CAAC1C,SAAS,EAAEwC,UAAU,EAAEG,MAAM,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,KAAK;IAC9D3C,OAAO,CAACQ,GAAG,CAAC,sBAAsB,EAAE;MAClCT,SAAS;MACTwC,UAAU;MACVG,MAAM;MACNC;IACF,CAAC,CAAC;IACF9C,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACyD,OAAO;MACzBxC,OAAO,EAAE;QAAEL,SAAS;QAAEwC,UAAU;QAAEG,MAAM;QAAEC;MAAK;IACjD,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,SAAS,GAAGA,CAAC9C,SAAS,EAAEwC,UAAU,EAAEO,UAAU,KAAK;IACvD9C,OAAO,CAACQ,GAAG,CAAC,yBAAyB,EAAE;MACrCT,SAAS;MACTwC,UAAU;MACVO;IACF,CAAC,CAAC;IACFjD,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC4D,UAAU;MAC5B3C,OAAO,EAAE;QAAEL,SAAS;QAAEwC,UAAU;QAAEO;MAAW;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,SAAS,GAAGA,CAACjD,SAAS,EAAEwC,UAAU,EAAEU,KAAK,KAAK;IAClDjD,OAAO,CAACQ,GAAG,CAAC,yBAAyB,EAAE;MAAET,SAAS;MAAEwC,UAAU;MAAEU;IAAM,CAAC,CAAC;IACxEpD,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC+D,UAAU;MAC5B9C,OAAO,EAAE;QAAEL,SAAS;QAAEwC,UAAU;QAAEU;MAAM;IAC1C,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBtD,QAAQ,CAAC;MAAEK,IAAI,EAAEf,WAAW,CAACiE;IAAY,CAAC,CAAC;EAC7C,CAAC;EAED,oBACE7D,OAAA,CAACC,cAAc,CAAC6D,QAAQ;IACtBC,KAAK,EAAE;MACL1D,KAAK;MACLC,QAAQ;MACR0D,aAAa,EAAE3D,KAAK,CAAC2D,aAAa;MAClC9B,oBAAoB;MACpBG,UAAU;MACVG,aAAa;MACbE,aAAa;MACbnC,gBAAgB;MAChBqC,WAAW;MACXG,cAAc;MACdG,MAAM;MACNI,SAAS;MACTG,SAAS;MACT3C,WAAW;MACX8C;IACF,CAAE;IAAAzD,QAAA,EAEDA;EAAQ;IAAA8D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAAChE,EAAA,CApJWF,eAAe;AAAAmE,EAAA,GAAfnE,eAAe;AAAA,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}