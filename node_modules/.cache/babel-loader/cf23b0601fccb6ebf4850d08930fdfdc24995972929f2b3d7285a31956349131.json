{"ast":null,"code":"import { programInitialState } from './initialState';\nfunction programReducer(state = programInitialState.programs, action) {\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      return {\n        ...state,\n        ...action.payload\n      };\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n      if (!state[id]) {\n        console.error('Program not found:', id);\n        return state; // Return the current state if the program ID does not exist.\n      }\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...state[id],\n          // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal\n        }\n      };\n      return updatedState;\n    case 'UPDATE_PROGRAM':\n      {\n        const updatedProgram = action.payload;\n        console.log('Updating program in reducer:', updatedProgram);\n        return {\n          ...state,\n          selectedProgram: updatedProgram,\n          [updatedProgram.id]: updatedProgram\n        };\n      }\n    case 'UPDATE_PROGRAM_SUCCESS':\n      {\n        const updatedProgram = action.payload;\n        console.log('Updating program in reducer:', updatedProgram);\n        if (!updatedProgram || !updatedProgram.id) {\n          console.error('Invalid program data received:', updatedProgram);\n          return state;\n        }\n        const updatedState = {\n          ...state,\n          [updatedProgram.id]: updatedProgram,\n          selectedProgram: updatedProgram\n        };\n        console.log('Updated state after UPDATE_PROGRAM_SUCCESS:', updatedState);\n        return updatedState;\n      }\n    case 'UPDATE_PROGRAM_WORKOUT':\n      return {\n        ...state,\n        selectedProgram: {\n          ...state.selectedProgram,\n          workouts: state.selectedProgram.workouts.map(workout => workout.id === action.payload.id ? action.payload : workout)\n        }\n      };\n    case 'DELETE_PROGRAM':\n      {\n        const {\n          programId\n        } = action.payload;\n        if (!programId) {\n          console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n          return state;\n        }\n        const newPrograms = {\n          ...state.programs\n        };\n        delete newPrograms[programId];\n        const newState = {\n          ...state,\n          programs: newPrograms\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["programInitialState","programReducer","state","programs","action","type","payload","id","name","program_duration","duration_unit","days_per_week","main_goal","console","error","updatedState","updatedProgram","log","selectedProgram","workouts","map","workout","programId","newPrograms","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["import { programInitialState } from './initialState';\n\nfunction programReducer(state = programInitialState.programs, action) {\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      return { ...state, ...action.payload };\n\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n\n      if (!state[id]) {\n        console.error('Program not found:', id);\n        return state; // Return the current state if the program ID does not exist.\n      }\n\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...state[id], // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal\n        }\n      };\n\n      return updatedState;\n\n    case 'UPDATE_PROGRAM': {\n      const updatedProgram = action.payload;\n      console.log('Updating program in reducer:', updatedProgram);\n\n      return {\n        ...state,\n        selectedProgram: updatedProgram,\n        [updatedProgram.id]: updatedProgram\n      };\n    }\n\n    case 'UPDATE_PROGRAM_SUCCESS': {\n      const updatedProgram = action.payload;\n      console.log('Updating program in reducer:', updatedProgram);\n\n      if (!updatedProgram || !updatedProgram.id) {\n        console.error('Invalid program data received:', updatedProgram);\n        return state;\n      }\n\n      const updatedState = {\n        ...state,\n        [updatedProgram.id]: updatedProgram,\n        selectedProgram: updatedProgram\n      };\n\n      console.log('Updated state after UPDATE_PROGRAM_SUCCESS:', updatedState);\n      return updatedState;\n    }\n\n    case 'UPDATE_PROGRAM_WORKOUT':\n      return {\n        ...state,\n        selectedProgram: {\n          ...state.selectedProgram,\n          workouts: state.selectedProgram.workouts.map(workout =>\n            workout.id === action.payload.id ? action.payload : workout\n          )\n        }\n      };\n\n    case 'DELETE_PROGRAM': {\n      const { programId } = action.payload;\n\n      if (!programId) {\n        console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n        return state;\n      }\n\n      const newPrograms = { ...state.programs };\n      delete newPrograms[programId];\n\n      const newState = {\n        ...state,\n        programs: newPrograms\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,gBAAgB;AAEpD,SAASC,cAAcA,CAACC,KAAK,GAAGF,mBAAmB,CAACG,QAAQ,EAAEC,MAAM,EAAE;EACpE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,sBAAsB;MACzB,OAAO;QAAE,GAAGH,KAAK;QAAE,GAAGE,MAAM,CAACE;MAAQ,CAAC;IAExC,KAAK,aAAa;MAChB,MAAM;QACJC,EAAE;QACFC,IAAI;QACJC,gBAAgB;QAChBC,aAAa;QACbC,aAAa;QACbC;MACF,CAAC,GAAGR,MAAM,CAACE,OAAO;MAElB,IAAI,CAACJ,KAAK,CAACK,EAAE,CAAC,EAAE;QACdM,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEP,EAAE,CAAC;QACvC,OAAOL,KAAK,CAAC,CAAC;MAChB;MAEA,MAAMa,YAAY,GAAG;QACnB,GAAGb,KAAK;QACR,CAACK,EAAE,GAAG;UACJ,GAAGL,KAAK,CAACK,EAAE,CAAC;UAAE;UACdC,IAAI;UACJC,gBAAgB;UAChBC,aAAa;UACbC,aAAa;UACbC;QACF;MACF,CAAC;MAED,OAAOG,YAAY;IAErB,KAAK,gBAAgB;MAAE;QACrB,MAAMC,cAAc,GAAGZ,MAAM,CAACE,OAAO;QACrCO,OAAO,CAACI,GAAG,CAAC,8BAA8B,EAAED,cAAc,CAAC;QAE3D,OAAO;UACL,GAAGd,KAAK;UACRgB,eAAe,EAAEF,cAAc;UAC/B,CAACA,cAAc,CAACT,EAAE,GAAGS;QACvB,CAAC;MACH;IAEA,KAAK,wBAAwB;MAAE;QAC7B,MAAMA,cAAc,GAAGZ,MAAM,CAACE,OAAO;QACrCO,OAAO,CAACI,GAAG,CAAC,8BAA8B,EAAED,cAAc,CAAC;QAE3D,IAAI,CAACA,cAAc,IAAI,CAACA,cAAc,CAACT,EAAE,EAAE;UACzCM,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEE,cAAc,CAAC;UAC/D,OAAOd,KAAK;QACd;QAEA,MAAMa,YAAY,GAAG;UACnB,GAAGb,KAAK;UACR,CAACc,cAAc,CAACT,EAAE,GAAGS,cAAc;UACnCE,eAAe,EAAEF;QACnB,CAAC;QAEDH,OAAO,CAACI,GAAG,CAAC,6CAA6C,EAAEF,YAAY,CAAC;QACxE,OAAOA,YAAY;MACrB;IAEA,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGb,KAAK;QACRgB,eAAe,EAAE;UACf,GAAGhB,KAAK,CAACgB,eAAe;UACxBC,QAAQ,EAAEjB,KAAK,CAACgB,eAAe,CAACC,QAAQ,CAACC,GAAG,CAACC,OAAO,IAClDA,OAAO,CAACd,EAAE,KAAKH,MAAM,CAACE,OAAO,CAACC,EAAE,GAAGH,MAAM,CAACE,OAAO,GAAGe,OACtD;QACF;MACF,CAAC;IAEH,KAAK,gBAAgB;MAAE;QACrB,MAAM;UAAEC;QAAU,CAAC,GAAGlB,MAAM,CAACE,OAAO;QAEpC,IAAI,CAACgB,SAAS,EAAE;UACdT,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEV,MAAM,CAACE,OAAO,CAAC;UACnE,OAAOJ,KAAK;QACd;QAEA,MAAMqB,WAAW,GAAG;UAAE,GAAGrB,KAAK,CAACC;QAAS,CAAC;QACzC,OAAOoB,WAAW,CAACD,SAAS,CAAC;QAE7B,MAAME,QAAQ,GAAG;UACf,GAAGtB,KAAK;UACRC,QAAQ,EAAEoB;QACZ,CAAC;QAED,OAAOC,QAAQ;MACjB;IAEA;MACE,OAAOtB,KAAK;EAChB;AACF;AAEA,SAASD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}