{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [activeWorkout, setActiveWorkout] = useState(null);\n  const [program, setProgram] = useState({\n    user_id: 2,\n    // This should be set to the logged in user's ID\n    name: 'Program 1',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: [{\n      id: uuidv4(),\n      name: 'Workout 1',\n      exercises: [],\n      active: false\n    }]\n  });\n  console.log('Provider Rendered, Active Workout:', activeWorkout);\n  // console.log('Program state:', program);\n\n  // Initialize the active workout to the first workout in the program\n\n  const updateActiveWorkout = useCallback(workout => {\n    console.log('Updating active workout:', workout);\n    setActiveWorkout(workout);\n  }, []);\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2,\n      // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: program.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id,\n        // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order,\n          // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    // console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({\n      ...prev,\n      ...details\n    }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    // console.log('addWorkout function called', workout);\n    // console.log('Current workouts before add:', program.workouts);\n    const tempId = uuidv4();\n\n    // Find the highest index used in existing workout names\n    const maxIndex = program.workouts.reduce((max, currWorkout) => {\n      const match = currWorkout.name.match(/Workout (\\d+)/); // Assuming the format \"Workout 1\", \"Workout 2\", etc.\n      const index = match ? parseInt(match[1], 10) : 0;\n      return Math.max(max, index);\n    }, 0);\n    const workoutTitle = `Workout ${maxIndex + 1}`;\n    const newWorkout = {\n      ...workout,\n      id: tempId,\n      name: workout.name || workoutTitle\n    };\n    setProgram(prev => {\n      const updatedWorkouts = [...prev.workouts, newWorkout];\n      // console.log('Updated workouts after add:', updatedWorkouts);\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n\n    // console.log('New activeWorkoutId set:', newWorkout.id);\n    // console.log('Updated workouts after add:', program.workouts);\n    // console.log('Setting activeWorkoutId to:', tempId);\n    setActiveWorkout(newWorkout);\n    // console.log('activeWorkoutId after set:', tempId);\n  }, [setProgram, setActiveWorkout, program.workouts]);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => {\n      const workoutIndex = prev.workouts.findIndex(workout => workout.id === workoutId);\n\n      // Ensure we have more than one workout to prevent deleting the last one.\n      if (prev.workouts.length <= 1) return prev; // Optionally handle the error as needed.\n\n      const updatedWorkouts = prev.workouts.filter(workout => workout.id !== workoutId);\n\n      // Determine the new active workout\n      let newActiveWorkout = null;\n      if (prev.activeWorkout && prev.activeWorkout.id === workoutId) {\n        // If the active workout is the one being deleted, need to find a new active workout\n        if (workoutIndex === prev.workouts.length - 1) {\n          // If it was the last workout, set the previous one as active\n          newActiveWorkout = updatedWorkouts[workoutIndex - 1];\n        } else {\n          // Otherwise, set the next workout as active (or previous if it was the last)\n          newActiveWorkout = updatedWorkouts[Math.max(0, workoutIndex)];\n        }\n      } else {\n        // If the active workout is not the one being deleted, keep it as is\n        newActiveWorkout = prev.activeWorkout;\n      }\n\n      // Update the active workout in the context\n      setActiveWorkout(newActiveWorkout);\n\n      // Return the updated program with the workout removed\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n  }, [setActiveWorkout]);\n\n  // Function to go to the next workout\n\n  const goToNextWorkout = () => {\n    const currentIndex = program.workouts.findIndex(workout => workout.id === activeWorkout.id);\n    const nextIndex = (currentIndex + 1) % program.workouts.length;\n    setActiveWorkout(program.workouts[nextIndex]);\n    console.log('Active workout ID after next:', program.workouts[nextIndex].id);\n  };\n\n  // Function to go to the previous workout\n\n  const goToPreviousWorkout = () => {\n    const currentIndex = program.workouts.findIndex(workout => workout.id === activeWorkout.id);\n    const previousIndex = (currentIndex - 1 + program.workouts.length) % program.workouts.length;\n    setActiveWorkout(program.workouts[previousIndex]);\n    console.log('Active workout ID after previous:', program.workouts[previousIndex].id);\n  };\n\n  // Function to add exercises to a specific workout\n\n  const addExercise = useCallback((workoutId, exercises) => {\n    const {\n      workouts\n    } = program;\n    console.log('Current state before update:', JSON.stringify(workouts, null, 2));\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          const currentExercises = Array.isArray(workout.exercises) ? workout.exercises : [];\n          console.log('Existing exercises for this workout:', currentExercises);\n          const newExercises = Array.isArray(exercises) ? exercises : [exercises]; // Ensure it's always an array\n          newExercises.forEach(exercise => {\n            const tempId = uuidv4();\n            const newExercise = {\n              ...exercise,\n              id: tempId,\n              exerciseCatalogId: exercise.id,\n              isNew: true,\n              sets: [{\n                id: uuidv4(),\n                reps: '',\n                weight: '',\n                order: currentExercises.length + 1,\n                isNew: true\n              }]\n            };\n            currentExercises.push(newExercise);\n          });\n          return {\n            ...workout,\n            exercises: currentExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...prev,\n        workouts: newWorkouts\n      };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => exercise.catalog_exercise_id === updatedExercise.catalog_exercise_id ? {\n              ...exercise,\n              ...updatedExercise\n            } : exercise)\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    // console.log(\n    //   `Deleting exercise. Workout ID: ${workoutId}, Exercise ID: ${exerciseId}`\n    // );\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // console.log(\n        //   `Before deletion, number of exercises: ${workout.exercises.length}`\n        // );\n\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(exercise => exercise.id !== exerciseId)\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutId, exerciseId, newSet) => {\n    const tempId = uuidv4();\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its id\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.id === exerciseId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const currentSets = Array.isArray(exercise.sets) ? exercise.sets : [];\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const nextOrder = currentSets.length > 0 ? Math.max(...currentSets.map(set => set.order)) + 1 : 1;\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  order: nextOrder,\n                  isNew: true\n                };\n                return {\n                  ...exercise,\n                  sets: [...currentSets, updatedSet]\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // useEffect(() => {\n  //   // console.log('Program state updated:', program);\n  // }, [program]); // This effect will run whenever the 'program' state changes\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return {\n                        ...set,\n                        ...updatedSet\n                      };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                // Filter out the set to be deleted and renumber the remaining sets\n                const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== setId).map((set, index) => ({\n                  ...set,\n                  order: index + 1\n                })); // Assuming 'order' needs to be updated\n\n                return {\n                  ...exercise,\n                  sets: filteredAndRenumberedSets\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      program,\n      saveProgram,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      activeWorkout,\n      updateActiveWorkout,\n      deleteWorkout,\n      goToNextWorkout,\n      goToPreviousWorkout,\n      addExercise,\n      updateExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"LycU5GwIpfSui/Pc1FddRcJEn68=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useState","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","activeWorkout","setActiveWorkout","program","setProgram","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workouts","id","exercises","active","console","log","updateActiveWorkout","workout","saveProgram","NewProgram","programData","programName","programDuration","daysPerWeek","durationUnit","mainGoal","map","order","exercise","catalog_exercise_id","sets","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","updateProgramDetails","details","prev","addWorkout","tempId","maxIndex","reduce","max","currWorkout","match","index","parseInt","Math","workoutTitle","newWorkout","updatedWorkouts","updateWorkout","updatedWorkout","prevProgram","deleteWorkout","workoutId","workoutIndex","findIndex","length","filter","newActiveWorkout","goToNextWorkout","currentIndex","nextIndex","goToPreviousWorkout","previousIndex","addExercise","newWorkouts","currentExercises","Array","isArray","newExercises","forEach","newExercise","exerciseCatalogId","isNew","reps","weight","push","updateExercise","updatedExercise","deleteExercise","exerciseId","addSet","newSet","currentSets","nextOrder","set","updatedSet","updateSet","deleteSet","setId","filteredAndRenumberedSets","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [activeWorkout, setActiveWorkout] = useState(null);\n  const [program, setProgram] = useState({\n    user_id: 2, // This should be set to the logged in user's ID\n    name: 'Program 1',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: [\n      { id: uuidv4(), name: 'Workout 1', exercises: [], active: false }\n    ]\n  });\n\n  console.log('Provider Rendered, Active Workout:', activeWorkout);\n  // console.log('Program state:', program);\n\n  // Initialize the active workout to the first workout in the program\n\n  const updateActiveWorkout = useCallback(workout => {\n    console.log('Updating active workout:', workout);\n    setActiveWorkout(workout);\n  }, []);\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2, // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: program.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id, // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order, // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    // console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({ ...prev, ...details }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(\n    workout => {\n      // console.log('addWorkout function called', workout);\n      // console.log('Current workouts before add:', program.workouts);\n      const tempId = uuidv4();\n\n      // Find the highest index used in existing workout names\n      const maxIndex = program.workouts.reduce((max, currWorkout) => {\n        const match = currWorkout.name.match(/Workout (\\d+)/); // Assuming the format \"Workout 1\", \"Workout 2\", etc.\n        const index = match ? parseInt(match[1], 10) : 0;\n        return Math.max(max, index);\n      }, 0);\n\n      const workoutTitle = `Workout ${maxIndex + 1}`;\n\n      const newWorkout = {\n        ...workout,\n        id: tempId,\n        name: workout.name || workoutTitle\n      };\n      setProgram(prev => {\n        const updatedWorkouts = [...prev.workouts, newWorkout];\n        // console.log('Updated workouts after add:', updatedWorkouts);\n        return { ...prev, workouts: updatedWorkouts };\n      });\n\n      // console.log('New activeWorkoutId set:', newWorkout.id);\n      // console.log('Updated workouts after add:', program.workouts);\n      // console.log('Setting activeWorkoutId to:', tempId);\n      setActiveWorkout(newWorkout);\n      // console.log('activeWorkoutId after set:', tempId);\n    },\n    [setProgram, setActiveWorkout, program.workouts]\n  );\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout =>\n        workout.id === updatedWorkout.id ? updatedWorkout : workout\n      )\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(\n    workoutId => {\n      setProgram(prev => {\n        const workoutIndex = prev.workouts.findIndex(\n          workout => workout.id === workoutId\n        );\n\n        // Ensure we have more than one workout to prevent deleting the last one.\n        if (prev.workouts.length <= 1) return prev; // Optionally handle the error as needed.\n\n        const updatedWorkouts = prev.workouts.filter(\n          workout => workout.id !== workoutId\n        );\n\n        // Determine the new active workout\n        let newActiveWorkout = null;\n        if (prev.activeWorkout && prev.activeWorkout.id === workoutId) {\n          // If the active workout is the one being deleted, need to find a new active workout\n          if (workoutIndex === prev.workouts.length - 1) {\n            // If it was the last workout, set the previous one as active\n            newActiveWorkout = updatedWorkouts[workoutIndex - 1];\n          } else {\n            // Otherwise, set the next workout as active (or previous if it was the last)\n            newActiveWorkout = updatedWorkouts[Math.max(0, workoutIndex)];\n          }\n        } else {\n          // If the active workout is not the one being deleted, keep it as is\n          newActiveWorkout = prev.activeWorkout;\n        }\n\n        // Update the active workout in the context\n        setActiveWorkout(newActiveWorkout);\n\n        // Return the updated program with the workout removed\n        return { ...prev, workouts: updatedWorkouts };\n      });\n    },\n    [setActiveWorkout]\n  );\n\n  // Function to go to the next workout\n\n  const goToNextWorkout = () => {\n    const currentIndex = program.workouts.findIndex(\n      workout => workout.id === activeWorkout.id\n    );\n    const nextIndex = (currentIndex + 1) % program.workouts.length;\n    setActiveWorkout(program.workouts[nextIndex]);\n    console.log(\n      'Active workout ID after next:',\n      program.workouts[nextIndex].id\n    );\n  };\n\n  // Function to go to the previous workout\n\n  const goToPreviousWorkout = () => {\n    const currentIndex = program.workouts.findIndex(\n      workout => workout.id === activeWorkout.id\n    );\n    const previousIndex =\n      (currentIndex - 1 + program.workouts.length) % program.workouts.length;\n    setActiveWorkout(program.workouts[previousIndex]);\n    console.log(\n      'Active workout ID after previous:',\n      program.workouts[previousIndex].id\n    );\n  };\n\n  // Function to add exercises to a specific workout\n\n  const addExercise = useCallback((workoutId, exercises) => {\n    const { workouts } = program;\n    console.log(\n      'Current state before update:',\n      JSON.stringify(workouts, null, 2)\n    );\n\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          const currentExercises = Array.isArray(workout.exercises)\n            ? workout.exercises\n            : [];\n          console.log('Existing exercises for this workout:', currentExercises);\n          const newExercises = Array.isArray(exercises)\n            ? exercises\n            : [exercises]; // Ensure it's always an array\n          newExercises.forEach(exercise => {\n            const tempId = uuidv4();\n            const newExercise = {\n              ...exercise,\n              id: tempId,\n              exerciseCatalogId: exercise.id,\n              isNew: true,\n              sets: [\n                {\n                  id: uuidv4(),\n                  reps: '',\n                  weight: '',\n                  order: currentExercises.length + 1,\n                  isNew: true\n                }\n              ]\n            };\n            currentExercises.push(newExercise);\n          });\n\n          return { ...workout, exercises: currentExercises };\n        }\n        return workout;\n      });\n      return { ...prev, workouts: newWorkouts };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise =>\n              exercise.catalog_exercise_id ===\n              updatedExercise.catalog_exercise_id\n                ? { ...exercise, ...updatedExercise }\n                : exercise\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    // console.log(\n    //   `Deleting exercise. Workout ID: ${workoutId}, Exercise ID: ${exerciseId}`\n    // );\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // console.log(\n        //   `Before deletion, number of exercises: ${workout.exercises.length}`\n        // );\n\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(\n              exercise => exercise.id !== exerciseId\n            )\n          };\n        }\n\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutId, exerciseId, newSet) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its id\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.id === exerciseId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const currentSets = Array.isArray(exercise.sets)\n                  ? exercise.sets\n                  : [];\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const nextOrder =\n                  currentSets.length > 0\n                    ? Math.max(...currentSets.map(set => set.order)) + 1\n                    : 1;\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  order: nextOrder,\n                  isNew: true\n                };\n\n                return { ...exercise, sets: [...currentSets, updatedSet] };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // useEffect(() => {\n  //   // console.log('Program state updated:', program);\n  // }, [program]); // This effect will run whenever the 'program' state changes\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return { ...set, ...updatedSet };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.id === exerciseId) {\n                // Filter out the set to be deleted and renumber the remaining sets\n                const filteredAndRenumberedSets = exercise.sets\n                  .filter(set => set.id !== setId)\n                  .map((set, index) => ({ ...set, order: index + 1 })); // Assuming 'order' needs to be updated\n\n                return {\n                  ...exercise,\n                  sets: filteredAndRenumberedSets\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        program,\n        saveProgram,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        activeWorkout,\n        updateActiveWorkout,\n        deleteWorkout,\n        goToNextWorkout,\n        goToPreviousWorkout,\n        addExercise,\n        updateExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}