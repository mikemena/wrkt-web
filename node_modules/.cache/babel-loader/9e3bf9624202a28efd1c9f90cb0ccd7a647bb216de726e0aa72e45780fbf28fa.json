{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [program, setProgram] = useState({\n    user_id: 2,\n    // This should be set to the logged in user's ID\n    name: '',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: []\n  });\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({\n      ...prev,\n      ...details\n    }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    const tempId = uuidv4();\n    const newWorkout = {\n      ...workout,\n      id: tempId\n    };\n    setProgram(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, newWorkout]\n    }));\n  }, []);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter(workout => workout.id !== workoutId)\n    }));\n  }, []);\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Add the tempId to the new exercise object\n          const newExercise = {\n            ...exercise,\n            id: tempId,\n            isNew: true\n          };\n\n          // Determine the next order value for the new exercise\n          const nextOrder = workout.exercises.length > 0 ? Math.max(...workout.exercises.map(ex => ex.order)) + 1 : 1;\n          return {\n            ...workout,\n            exercises: [...workout.exercises, {\n              ...newExercise,\n              order: nextOrder\n            }]\n          };\n        }\n        return workout;\n      });\n      return {\n        ...prev,\n        workouts: newWorkouts\n      };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => exercise.catalog_exercise_id === updatedExercise.catalog_exercise_id ? {\n              ...exercise,\n              ...updatedExercise\n            } : exercise)\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(exercise => exercise.catalog_exercise_id !== exerciseId)\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutOrder, exerciseCatalogId, newSet) => {\n    const tempId = uuidv4();\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its order\n        if (workout.order === workoutOrder) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.catalog_exercise_id === exerciseCatalogId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  isNew: true\n                };\n                return {\n                  ...exercise,\n                  sets: [...exercise.sets, updatedSet]\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return {\n                        ...set,\n                        ...updatedSet\n                      };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.filter(set => set.order !== setId)\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      program,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      addExercise,\n      updateExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"0VQifSCEGGoKAb8PfZSVVpcqZ7I=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useState","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","program","setProgram","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workouts","updateProgramDetails","details","prev","addWorkout","workout","tempId","newWorkout","id","updateWorkout","updatedWorkout","prevProgram","map","deleteWorkout","workoutId","filter","addExercise","exercise","newWorkouts","order","newExercise","isNew","nextOrder","exercises","length","Math","max","ex","updateExercise","updatedExercise","catalog_exercise_id","deleteExercise","exerciseId","addSet","workoutOrder","exerciseCatalogId","newSet","updatedSet","sets","updateSet","set","deleteSet","setId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [program, setProgram] = useState({\n    user_id: 2, // This should be set to the logged in user's ID\n    name: '',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: []\n  });\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({ ...prev, ...details }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    const tempId = uuidv4();\n    const newWorkout = { ...workout, id: tempId };\n    setProgram(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, newWorkout]\n    }));\n  }, []);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout =>\n        workout.id === updatedWorkout.id ? updatedWorkout : workout\n      )\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter(workout => workout.id !== workoutId)\n    }));\n  }, []);\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Add the tempId to the new exercise object\n          const newExercise = { ...exercise, id: tempId, isNew: true };\n\n          // Determine the next order value for the new exercise\n          const nextOrder =\n            workout.exercises.length > 0\n              ? Math.max(...workout.exercises.map(ex => ex.order)) + 1\n              : 1;\n\n          return {\n            ...workout,\n            exercises: [\n              ...workout.exercises,\n              { ...newExercise, order: nextOrder }\n            ]\n          };\n        }\n        return workout;\n      });\n      return { ...prev, workouts: newWorkouts };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise =>\n              exercise.catalog_exercise_id ===\n              updatedExercise.catalog_exercise_id\n                ? { ...exercise, ...updatedExercise }\n                : exercise\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(\n              exercise => exercise.catalog_exercise_id !== exerciseId\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutOrder, exerciseCatalogId, newSet) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its order\n        if (workout.order === workoutOrder) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.catalog_exercise_id === exerciseCatalogId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = { ...newSet, id: tempId, isNew: true };\n                return { ...exercise, sets: [...exercise.sets, updatedSet] };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return { ...set, ...updatedSet };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.order === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.filter(set => set.order !== setId)\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        program,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        addExercise,\n        updateExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}