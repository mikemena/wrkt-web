{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      const newSet = {\n        id: uuidv4(),\n        count: action.payload.newSet.count,\n        weight: action.payload.newSet.weight,\n        exerciseId: action.payload.exerciseId\n      };\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          workouts: state.programs.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    // Compute the next order for the new set\n                    const nextOrder = exercise.sets.length > 0 ? Math.max(...exercise.sets.map(set => set.order)) + 1 : 1;\n                    const newSet = {\n                      ...action.payload.newSet,\n                      id: uuidv4(),\n                      // Generate a new ID for the set\n                      order: nextOrder,\n                      isNew: true\n                    };\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return {\n                            ...set,\n                            ...action.payload.updatedSet\n                          };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== action.payload.setId).map((set, index) => ({\n                      ...set,\n                      order: index + 1\n                    }));\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { setReducer, initialState };","map":{"version":3,"names":["v4","uuidv4","initialState","setReducer","state","action","type","newSet","id","count","payload","weight","exerciseId","programs","workouts","map","workout","workoutId","exercises","exercise","nextOrder","sets","length","Math","max","set","order","isNew","program","updatedSet","filteredAndRenumberedSets","filter","setId","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      const newSet = {\n        id: uuidv4(),\n        count: action.payload.newSet.count,\n        weight: action.payload.newSet.weight,\n        exerciseId: action.payload.exerciseId\n      };\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          workouts: state.programs.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    // Compute the next order for the new set\n                    const nextOrder =\n                      exercise.sets.length > 0\n                        ? Math.max(...exercise.sets.map(set => set.order)) + 1\n                        : 1;\n\n                    const newSet = {\n                      ...action.payload.newSet,\n                      id: uuidv4(), // Generate a new ID for the set\n                      order: nextOrder,\n                      isNew: true\n                    };\n\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return { ...set, ...action.payload.updatedSet };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets\n                      .filter(set => set.id !== action.payload.setId)\n                      .map((set, index) => ({ ...set, order: index + 1 }));\n\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { setReducer, initialState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}