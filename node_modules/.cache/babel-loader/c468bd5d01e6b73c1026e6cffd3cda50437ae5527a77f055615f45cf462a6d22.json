{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useEffect } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  console.log('Initial state in ProgramProvider:', state);\n  useEffect(() => {\n    console.log('CreateProgram useEffect - state:', JSON.stringify(state, null, 2));\n    if (!state.program) {\n      console.error('No program in state');\n    } else {\n      console.log('Selected Program:', JSON.stringify(state.program, null, 2));\n    }\n  }, [state]);\n  const setSelectedProgram = programId => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: programId\n    });\n  };\n  const setActiveWorkout = workoutId => {\n    console.log('setActiveWorkout called with workoutId:', workoutId);\n    console.log('Current state:', JSON.stringify(state, null, 2));\n    if (!state.program || !Array.isArray(state.program.workouts)) {\n      console.error('Invalid state structure:', state);\n      return;\n    }\n    const updatedWorkouts = state.program.workouts.map(workout => ({\n      ...workout,\n      selected: workout.id === workoutId\n    }));\n    const updatedProgram = {\n      ...state.program,\n      workouts: updatedWorkouts\n    };\n    console.log('Dispatching UPDATE_PROGRAM with:', JSON.stringify(updatedProgram, null, 2));\n    dispatch({\n      type: 'UPDATE_PROGRAM',\n      payload: updatedProgram\n    });\n    console.log('Dispatching SET_SELECTED_WORKOUT_ID with:', workoutId);\n    dispatch({\n      type: 'SET_SELECTED_WORKOUT_ID',\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.program.workouts.map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId: updatedWorkout.programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: 'ADD_PROGRAM',\n      payload: {\n        ...details,\n        workouts: [] // Ensure workouts array is initialized\n      }\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = () => {\n    const programId = state.selectedProgramId;\n    const workoutsForProgram = Object.values(state.workouts).filter(w => w.programId === programId);\n\n    // Determine the highest current order and add 1 for the new workout\n    const newOrder = workoutsForProgram.length > 0 ? Math.max(...workoutsForProgram.map(w => w.order)) + 1 : 1;\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      selected: true,\n      exercises: [],\n      order: newOrder\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n\n    // Update the program's workouts array\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n    console.log('addWorkout newWorkout', newWorkout);\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    // Remove duplicates based on catalog_exercise_id\n    const uniqueExercises = Array.from(new Set(standardizedExercises.map(ex => ex.catalog_exercise_id))).map(id => standardizedExercises.find(ex => ex.catalog_exercise_id === id));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: uniqueExercises\n      }\n    });\n\n    // Update the program's workout\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: {\n        workoutId,\n        exercises: uniqueExercises\n      }\n    });\n  };\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: {\n        workoutId,\n        exercise\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    const workout = state.workouts[workoutId];\n    const updatedExercises = workout.exercises.filter(ex => ex.id !== exerciseId).map((exercise, index) => ({\n      ...exercise,\n      order: index + 1\n    }));\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedExercises\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = [...ex.sets, {\n          id: uuidv4(),\n          weight,\n          reps,\n          order: ex.sets.length + 1\n        }].map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...ex,\n          sets: updatedSets\n        };\n      }\n      return ex;\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps,\n        updatedExercises\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = ex.sets.filter(set => set.id !== setId).map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...ex,\n          sets: updatedSets\n        };\n      }\n      return ex;\n    });\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      updateExercise,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","useEffect","actionTypes","rootReducer","initialState","exerciseUtils","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","console","log","JSON","stringify","program","error","setSelectedProgram","programId","type","SET_SELECTED_PROGRAM","payload","setActiveWorkout","workoutId","Array","isArray","workouts","updatedWorkouts","map","workout","selected","id","updatedProgram","saveProgram","newProgram","exercises","exercise","catalog_exercise_id","order","sets","set","index","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","UPDATE_PROGRAM_WORKOUTS","programData","forEach","addProgram","details","deleteProgram","DELETE_PROGRAM","addWorkout","selectedProgramId","workoutsForProgram","Object","values","filter","w","newOrder","length","Math","max","newWorkout","name","ADD_WORKOUT","updateWorkout","standardizedWorkout","standardizeWorkout","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","tempId","uniqueExercises","from","Set","find","ADD_EXERCISE","UPDATE_PROGRAM_WORKOUT","updateExercise","UPDATE_EXERCISE","removeExercise","exerciseId","updatedExercises","REMOVE_EXERCISE","addSet","weight","reps","getExerciseId","updatedSets","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","clearState","CLEAR_STATE","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer, useEffect } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  console.log('Initial state in ProgramProvider:', state);\n\n  useEffect(() => {\n    console.log(\n      'CreateProgram useEffect - state:',\n      JSON.stringify(state, null, 2)\n    );\n    if (!state.program) {\n      console.error('No program in state');\n    } else {\n      console.log('Selected Program:', JSON.stringify(state.program, null, 2));\n    }\n  }, [state]);\n\n  const setSelectedProgram = programId => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: programId\n    });\n  };\n\n  const setActiveWorkout = workoutId => {\n    console.log('setActiveWorkout called with workoutId:', workoutId);\n    console.log('Current state:', JSON.stringify(state, null, 2));\n\n    if (!state.program || !Array.isArray(state.program.workouts)) {\n      console.error('Invalid state structure:', state);\n      return;\n    }\n\n    const updatedWorkouts = state.program.workouts.map(workout => ({\n      ...workout,\n      selected: workout.id === workoutId\n    }));\n\n    const updatedProgram = {\n      ...state.program,\n      workouts: updatedWorkouts\n    };\n\n    console.log(\n      'Dispatching UPDATE_PROGRAM with:',\n      JSON.stringify(updatedProgram, null, 2)\n    );\n    dispatch({\n      type: 'UPDATE_PROGRAM',\n      payload: updatedProgram\n    });\n\n    console.log('Dispatching SET_SELECTED_WORKOUT_ID with:', workoutId);\n    dispatch({\n      type: 'SET_SELECTED_WORKOUT_ID',\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.program.workouts.map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId: updatedWorkout.programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: 'ADD_PROGRAM',\n      payload: {\n        ...details,\n        workouts: [] // Ensure workouts array is initialized\n      }\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = () => {\n    const programId = state.selectedProgramId;\n    const workoutsForProgram = Object.values(state.workouts).filter(\n      w => w.programId === programId\n    );\n\n    // Determine the highest current order and add 1 for the new workout\n    const newOrder =\n      workoutsForProgram.length > 0\n        ? Math.max(...workoutsForProgram.map(w => w.order)) + 1\n        : 1;\n\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      selected: true,\n      exercises: [],\n      order: newOrder\n    };\n\n    dispatch({ type: actionTypes.ADD_WORKOUT, payload: newWorkout });\n\n    // Update the program's workouts array\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: { programId, workout: newWorkout }\n    });\n\n    console.log('addWorkout newWorkout', newWorkout);\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    // Remove duplicates based on catalog_exercise_id\n    const uniqueExercises = Array.from(\n      new Set(standardizedExercises.map(ex => ex.catalog_exercise_id))\n    ).map(id =>\n      standardizedExercises.find(ex => ex.catalog_exercise_id === id)\n    );\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: uniqueExercises }\n    });\n\n    // Update the program's workout\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: { workoutId, exercises: uniqueExercises }\n    });\n  };\n\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: { workoutId, exercise }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    const workout = state.workouts[workoutId];\n    const updatedExercises = workout.exercises\n      .filter(ex => ex.id !== exerciseId)\n      .map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId, updatedExercises }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = [\n          ...ex.sets,\n          { id: uuidv4(), weight, reps, order: ex.sets.length + 1 }\n        ].map((set, index) => ({ ...set, order: index + 1 }));\n        return { ...ex, sets: updatedSets };\n      }\n      return ex;\n    });\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps, updatedExercises }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = ex.sets\n          .filter(set => set.id !== setId)\n          .map((set, index) => ({ ...set, order: index + 1 }));\n        return { ...ex, sets: updatedSets };\n      }\n      return ex;\n    });\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        updateExercise,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}