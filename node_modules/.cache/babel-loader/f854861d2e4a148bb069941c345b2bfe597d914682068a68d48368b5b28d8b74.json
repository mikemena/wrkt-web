{"ast":null,"code":"function programReducer(state, action) {\n  console.log('Reducer called with action:', action.type);\n  console.log('Current state before reduction:', JSON.stringify(state, null, 2));\n  console.log('Action:', JSON.stringify(action, null, 2));\n  let newState;\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      return {\n        ...state,\n        selected: true\n      };\n    case 'UPDATE_PROGRAM':\n      console.log('UPDATE_PROGRAM action received');\n      console.log('Current state:', state);\n      console.log('Action payload:', action.payload);\n      return {\n        ...state,\n        program: action.payload\n      };\n    case 'SET_SELECTED_WORKOUT_ID':\n      return {\n        ...state,\n        selectedWorkoutId: action.payload\n      };\n    case 'UPDATE_PROGRAM_SUCCESS':\n      {\n        const updatedProgram = action.payload;\n        if (!updatedProgram || !updatedProgram.id) {\n          console.error('Invalid program data received:', updatedProgram);\n          return state;\n        }\n        const updatedState = {\n          ...state,\n          [updatedProgram.id]: updatedProgram,\n          selectedProgram: updatedProgram\n        };\n        return updatedState;\n      }\n    case 'UPDATE_PROGRAM_WORKOUTS':\n      return {\n        ...state,\n        workouts: state.workouts.map(w => w.id === action.payload.workout.id ? action.payload.workout : w)\n      };\n    case 'DELETE_PROGRAM':\n      {\n        const {\n          programId\n        } = action.payload;\n        if (!programId) {\n          console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n          return state;\n        }\n        const newPrograms = {\n          ...state.programs\n        };\n        delete newPrograms[programId];\n        const newState = {\n          ...state,\n          programs: newPrograms\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["programReducer","state","action","console","log","type","JSON","stringify","newState","selected","payload","program","selectedWorkoutId","updatedProgram","id","error","updatedState","selectedProgram","workouts","map","w","workout","programId","newPrograms","programs"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["function programReducer(state, action) {\n  console.log('Reducer called with action:', action.type);\n  console.log(\n    'Current state before reduction:',\n    JSON.stringify(state, null, 2)\n  );\n  console.log('Action:', JSON.stringify(action, null, 2));\n  let newState;\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      return {\n        ...state,\n        selected: true\n      };\n\n    case 'UPDATE_PROGRAM':\n      console.log('UPDATE_PROGRAM action received');\n      console.log('Current state:', state);\n      console.log('Action payload:', action.payload);\n      return {\n        ...state,\n        program: action.payload\n      };\n    case 'SET_SELECTED_WORKOUT_ID':\n      return {\n        ...state,\n        selectedWorkoutId: action.payload\n      };\n\n    case 'UPDATE_PROGRAM_SUCCESS': {\n      const updatedProgram = action.payload;\n\n      if (!updatedProgram || !updatedProgram.id) {\n        console.error('Invalid program data received:', updatedProgram);\n        return state;\n      }\n\n      const updatedState = {\n        ...state,\n        [updatedProgram.id]: updatedProgram,\n        selectedProgram: updatedProgram\n      };\n\n      return updatedState;\n    }\n\n    case 'UPDATE_PROGRAM_WORKOUTS':\n      return {\n        ...state,\n        workouts: state.workouts.map(w =>\n          w.id === action.payload.workout.id ? action.payload.workout : w\n        )\n      };\n\n    case 'DELETE_PROGRAM': {\n      const { programId } = action.payload;\n\n      if (!programId) {\n        console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n        return state;\n      }\n\n      const newPrograms = { ...state.programs };\n      delete newPrograms[programId];\n\n      const newState = {\n        ...state,\n        programs: newPrograms\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"AAAA,SAASA,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACrCC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,MAAM,CAACG,IAAI,CAAC;EACvDF,OAAO,CAACC,GAAG,CACT,iCAAiC,EACjCE,IAAI,CAACC,SAAS,CAACN,KAAK,EAAE,IAAI,EAAE,CAAC,CAC/B,CAAC;EACDE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,IAAI,CAACC,SAAS,CAACL,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACvD,IAAIM,QAAQ;EACZ,QAAQN,MAAM,CAACG,IAAI;IACjB,KAAK,sBAAsB;MACzB,OAAO;QACL,GAAGJ,KAAK;QACRQ,QAAQ,EAAE;MACZ,CAAC;IAEH,KAAK,gBAAgB;MACnBN,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7CD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,KAAK,CAAC;MACpCE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,MAAM,CAACQ,OAAO,CAAC;MAC9C,OAAO;QACL,GAAGT,KAAK;QACRU,OAAO,EAAET,MAAM,CAACQ;MAClB,CAAC;IACH,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGT,KAAK;QACRW,iBAAiB,EAAEV,MAAM,CAACQ;MAC5B,CAAC;IAEH,KAAK,wBAAwB;MAAE;QAC7B,MAAMG,cAAc,GAAGX,MAAM,CAACQ,OAAO;QAErC,IAAI,CAACG,cAAc,IAAI,CAACA,cAAc,CAACC,EAAE,EAAE;UACzCX,OAAO,CAACY,KAAK,CAAC,gCAAgC,EAAEF,cAAc,CAAC;UAC/D,OAAOZ,KAAK;QACd;QAEA,MAAMe,YAAY,GAAG;UACnB,GAAGf,KAAK;UACR,CAACY,cAAc,CAACC,EAAE,GAAGD,cAAc;UACnCI,eAAe,EAAEJ;QACnB,CAAC;QAED,OAAOG,YAAY;MACrB;IAEA,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGf,KAAK;QACRiB,QAAQ,EAAEjB,KAAK,CAACiB,QAAQ,CAACC,GAAG,CAACC,CAAC,IAC5BA,CAAC,CAACN,EAAE,KAAKZ,MAAM,CAACQ,OAAO,CAACW,OAAO,CAACP,EAAE,GAAGZ,MAAM,CAACQ,OAAO,CAACW,OAAO,GAAGD,CAChE;MACF,CAAC;IAEH,KAAK,gBAAgB;MAAE;QACrB,MAAM;UAAEE;QAAU,CAAC,GAAGpB,MAAM,CAACQ,OAAO;QAEpC,IAAI,CAACY,SAAS,EAAE;UACdnB,OAAO,CAACY,KAAK,CAAC,oCAAoC,EAAEb,MAAM,CAACQ,OAAO,CAAC;UACnE,OAAOT,KAAK;QACd;QAEA,MAAMsB,WAAW,GAAG;UAAE,GAAGtB,KAAK,CAACuB;QAAS,CAAC;QACzC,OAAOD,WAAW,CAACD,SAAS,CAAC;QAE7B,MAAMd,QAAQ,GAAG;UACf,GAAGP,KAAK;UACRuB,QAAQ,EAAED;QACZ,CAAC;QAED,OAAOf,QAAQ;MACjB;IAEA;MACE,OAAOP,KAAK;EAChB;AACF;AAEA,SAASD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}