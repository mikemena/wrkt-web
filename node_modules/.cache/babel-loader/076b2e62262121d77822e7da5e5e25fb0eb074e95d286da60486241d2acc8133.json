{"ast":null,"code":"import { initialState } from './initialState';\nfunction programReducer(state, action) {\n  console.log('Reducer called with action:', action.type);\n  console.log('Current state before reduction:', JSON.stringify(state, null, 2));\n  console.log('Action:', JSON.stringify(action, null, 2));\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      return {\n        ...state,\n        selected: true\n      };\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n      if (!state[id]) {\n        console.error('Program not found:', id);\n        return state; // Return the current state if the program ID does not exist.\n      }\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...state[id],\n          // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal\n        }\n      };\n      return updatedState;\n    case 'UPDATE_PROGRAM':\n      console.log('UPDATE_PROGRAM action received');\n      console.log('Current state:', state);\n      console.log('Action payload:', action.payload);\n      return {\n        ...state,\n        program: action.payload\n      };\n    case 'SET_SELECTED_WORKOUT_ID':\n      return {\n        ...state,\n        selectedWorkoutId: action.payload\n      };\n    case 'UPDATE_PROGRAM_SUCCESS':\n      {\n        const updatedProgram = action.payload;\n        if (!updatedProgram || !updatedProgram.id) {\n          console.error('Invalid program data received:', updatedProgram);\n          return state;\n        }\n        const updatedState = {\n          ...state,\n          [updatedProgram.id]: updatedProgram,\n          selectedProgram: updatedProgram\n        };\n        return updatedState;\n      }\n    case 'UPDATE_PROGRAM_WORKOUTS':\n      return {\n        ...state,\n        workouts: state.workouts.map(w => w.id === action.payload.workout.id ? action.payload.workout : w)\n      };\n    case 'DELETE_PROGRAM':\n      {\n        const {\n          programId\n        } = action.payload;\n        if (!programId) {\n          console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n          return state;\n        }\n        const newPrograms = {\n          ...state.programs\n        };\n        delete newPrograms[programId];\n        const newState = {\n          ...state,\n          programs: newPrograms\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["initialState","programReducer","state","action","console","log","type","JSON","stringify","selected","id","name","program_duration","duration_unit","days_per_week","main_goal","payload","error","updatedState","program","selectedWorkoutId","updatedProgram","selectedProgram","workouts","map","w","workout","programId","newPrograms","programs","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["import { initialState } from './initialState';\n\nfunction programReducer(state, action) {\n  console.log('Reducer called with action:', action.type);\n  console.log(\n    'Current state before reduction:',\n    JSON.stringify(state, null, 2)\n  );\n  console.log('Action:', JSON.stringify(action, null, 2));\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      return {\n        ...state,\n        selected: true\n      };\n\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n\n      if (!state[id]) {\n        console.error('Program not found:', id);\n        return state; // Return the current state if the program ID does not exist.\n      }\n\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...state[id], // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal\n        }\n      };\n\n      return updatedState;\n\n    case 'UPDATE_PROGRAM':\n      console.log('UPDATE_PROGRAM action received');\n      console.log('Current state:', state);\n      console.log('Action payload:', action.payload);\n      return {\n        ...state,\n        program: action.payload\n      };\n    case 'SET_SELECTED_WORKOUT_ID':\n      return {\n        ...state,\n        selectedWorkoutId: action.payload\n      };\n\n    case 'UPDATE_PROGRAM_SUCCESS': {\n      const updatedProgram = action.payload;\n\n      if (!updatedProgram || !updatedProgram.id) {\n        console.error('Invalid program data received:', updatedProgram);\n        return state;\n      }\n\n      const updatedState = {\n        ...state,\n        [updatedProgram.id]: updatedProgram,\n        selectedProgram: updatedProgram\n      };\n\n      return updatedState;\n    }\n\n    case 'UPDATE_PROGRAM_WORKOUTS':\n      return {\n        ...state,\n        workouts: state.workouts.map(w =>\n          w.id === action.payload.workout.id ? action.payload.workout : w\n        )\n      };\n\n    case 'DELETE_PROGRAM': {\n      const { programId } = action.payload;\n\n      if (!programId) {\n        console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n        return state;\n      }\n\n      const newPrograms = { ...state.programs };\n      delete newPrograms[programId];\n\n      const newState = {\n        ...state,\n        programs: newPrograms\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}