{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      const newSet = {\n        id: uuidv4(),\n        count: action.payload.newSet.count,\n        weight: action.payload.newSet.weight,\n        exerciseId: action.payload.exerciseId,\n        order: nextOrder,\n        // Compute the next order for the new set\n        isNew: true\n      };\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    // Compute the next order for the new set\n                    const nextOrder = exercise.sets.length > 0 ? Math.max(...exercise.sets.map(set => set.order)) + 1 : 1;\n                    const newSet = {\n                      ...action.payload.newSet,\n                      id: uuidv4(),\n                      // Generate a new ID for the set\n                      order: nextOrder,\n                      isNew: true\n                    };\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return {\n                            ...set,\n                            ...action.payload.updatedSet\n                          };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets.filter(set => set.id !== action.payload.setId).map((set, index) => ({\n                      ...set,\n                      order: index + 1\n                    }));\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { setReducer, initialState };","map":{"version":3,"names":["v4","uuidv4","initialState","setReducer","state","action","type","newSet","id","count","payload","weight","exerciseId","order","nextOrder","isNew","program","workouts","map","workout","workoutId","exercises","exercise","sets","length","Math","max","set","updatedSet","filteredAndRenumberedSets","filter","setId","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SET':\n      const newSet = {\n        id: uuidv4(),\n        count: action.payload.newSet.count,\n        weight: action.payload.newSet.weight,\n        exerciseId: action.payload.exerciseId,\n        order: nextOrder, // Compute the next order for the new set\n        isNew: true\n      };\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    // Compute the next order for the new set\n                    const nextOrder =\n                      exercise.sets.length > 0\n                        ? Math.max(...exercise.sets.map(set => set.order)) + 1\n                        : 1;\n\n                    const newSet = {\n                      ...action.payload.newSet,\n                      id: uuidv4(), // Generate a new ID for the set\n                      order: nextOrder,\n                      isNew: true\n                    };\n\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, newSet]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    case 'UPDATE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => {\n                        if (set.order === action.payload.updatedSet.order) {\n                          return { ...set, ...action.payload.updatedSet };\n                        }\n                        return set;\n                      })\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case 'DELETE_SET':\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === action.payload.exerciseId) {\n                    const filteredAndRenumberedSets = exercise.sets\n                      .filter(set => set.id !== action.payload.setId)\n                      .map((set, index) => ({ ...set, order: index + 1 }));\n\n                    return {\n                      ...exercise,\n                      sets: filteredAndRenumberedSets\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { setReducer, initialState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}