{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setSelectedProgram = program => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: program\n    });\n    program.workouts.forEach(workout => {\n      dispatch({\n        type: actionTypes.UPDATE_WORKOUT,\n        payload: workout\n      });\n    });\n  };\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n    setSelectedProgram(details);\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.keys(state.workouts).length + 1\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: {\n        workoutId,\n        exercise\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => exerciseUtils.getExerciseId(ex) === exerciseId ? {\n      ...ex,\n      sets: updatedSets\n    } : ex);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      updateExercise,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","standardizeWorkout","exerciseUtils","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setSelectedProgram","program","type","SET_SELECTED_PROGRAM","payload","workouts","forEach","workout","UPDATE_WORKOUT","setActiveWorkout","workoutId","console","error","SET_ACTIVE_WORKOUT","saveProgram","programId","Object","keys","programs","newProgram","values","map","exercises","exercise","catalog_exercise_id","order","sets","set","index","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","id","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","UPDATE_PROGRAM_WORKOUT","programData","Array","isArray","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","addWorkout","newWorkout","name","length","ADD_WORKOUT","updateWorkout","standardizedWorkout","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","tempId","ADD_EXERCISE","updateExercise","UPDATE_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","addSet","weight","reps","find","getExerciseId","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","updatedSets","filter","updatedExercises","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setSelectedProgram = program => {\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: program\n    });\n\n    program.workouts.forEach(workout => {\n      dispatch({\n        type: actionTypes.UPDATE_WORKOUT,\n        payload: workout\n      });\n    });\n  };\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n    setSelectedProgram(details);\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.keys(state.workouts).length + 1\n    };\n\n    dispatch({ type: actionTypes.ADD_WORKOUT, payload: newWorkout });\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: { workoutId, exercise }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex =>\n      exerciseUtils.getExerciseId(ex) === exerciseId\n        ? { ...ex, sets: updatedSets }\n        : ex\n    );\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        updateExercise,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}