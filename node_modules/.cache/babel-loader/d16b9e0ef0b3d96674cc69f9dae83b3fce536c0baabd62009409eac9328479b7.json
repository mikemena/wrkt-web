{"ast":null,"code":"import { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nfunction exerciseReducer(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.ADD_EXERCISE:\n      console.log('ADD_EXERCISE action:', action);\n      console.log('State:', state);\n      console.log('initialState:', initialState);\n      const {\n        exercise\n      } = action.payload; // Assuming 'exercise' contains the necessary exercise details including its ID\n      const activeWorkoutId = state.activeWorkout;\n      console.log('Active workout ID:', activeWorkoutId);\n\n      // Ensure that there is an active workout and it exists in the state\n      if (!activeWorkoutId || !state.workouts[activeWorkoutId]) {\n        console.error('Active workout is undefined or does not exist in the state:', activeWorkoutId);\n        return state; // Exit without making changes if there's no valid active workout\n      }\n\n      // Retrieve the current list of exercises for the active workout, defaulting to an empty array if undefined\n      const currentExercises = state.workouts[activeWorkoutId].exercises || [];\n      console.log('Current exercises:', currentExercises);\n\n      // Return the updated state with the new exercise added to the active workout\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [activeWorkoutId]: {\n            ...state.workouts[activeWorkoutId],\n            exercises: [...currentExercises, exercise.id] // Add the new exercise ID to the list of exercises\n          }\n        }\n      };\n    case actionTypes.UPDATE_EXERCISE:\n      console.log('UPDATE_EXERCISE action:', action);\n      const {\n        id,\n        updates\n      } = action.payload;\n      const workoutContainingExercise = Object.values(state.workouts).find(workout => workout.exercises.includes(id));\n      if (workoutContainingExercise) {\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [workoutContainingExercise.id]: {\n              ...workoutContainingExercise,\n              exercises: workoutContainingExercise.exercises.map(ex => ex.id === id ? {\n                ...ex,\n                ...updates\n              } : ex)\n            }\n          }\n        };\n      } else {\n        console.error('Exercise id does not exist in state:', id);\n      }\n      return state;\n    case actionTypes.DELETE_EXERCISE:\n      console.log('DELETE_EXERCISE action:', action);\n      const newState = {\n        ...state\n      };\n      delete newState[action.payload];\n      return newState;\n    default:\n      return state;\n  }\n}\nexport { exerciseReducer };","map":{"version":3,"names":["actionTypes","initialState","exerciseReducer","state","action","type","ADD_EXERCISE","console","log","exercise","payload","activeWorkoutId","activeWorkout","workouts","error","currentExercises","exercises","id","UPDATE_EXERCISE","updates","workoutContainingExercise","Object","values","find","workout","includes","map","ex","DELETE_EXERCISE","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/exerciseReducer.js"],"sourcesContent":["import { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\n\nfunction exerciseReducer(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.ADD_EXERCISE:\n      console.log('ADD_EXERCISE action:', action);\n      console.log('State:', state);\n      console.log('initialState:', initialState);\n      const { exercise } = action.payload; // Assuming 'exercise' contains the necessary exercise details including its ID\n      const activeWorkoutId = state.activeWorkout;\n      console.log('Active workout ID:', activeWorkoutId);\n\n      // Ensure that there is an active workout and it exists in the state\n      if (!activeWorkoutId || !state.workouts[activeWorkoutId]) {\n        console.error(\n          'Active workout is undefined or does not exist in the state:',\n          activeWorkoutId\n        );\n        return state; // Exit without making changes if there's no valid active workout\n      }\n\n      // Retrieve the current list of exercises for the active workout, defaulting to an empty array if undefined\n      const currentExercises = state.workouts[activeWorkoutId].exercises || [];\n\n      console.log('Current exercises:', currentExercises);\n\n      // Return the updated state with the new exercise added to the active workout\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [activeWorkoutId]: {\n            ...state.workouts[activeWorkoutId],\n            exercises: [...currentExercises, exercise.id] // Add the new exercise ID to the list of exercises\n          }\n        }\n      };\n\n    case actionTypes.UPDATE_EXERCISE:\n      console.log('UPDATE_EXERCISE action:', action);\n      const { id, updates } = action.payload;\n      const workoutContainingExercise = Object.values(state.workouts).find(\n        workout => workout.exercises.includes(id)\n      );\n\n      if (workoutContainingExercise) {\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [workoutContainingExercise.id]: {\n              ...workoutContainingExercise,\n              exercises: workoutContainingExercise.exercises.map(ex =>\n                ex.id === id ? { ...ex, ...updates } : ex\n              )\n            }\n          }\n        };\n      } else {\n        console.error('Exercise id does not exist in state:', id);\n      }\n      return state;\n\n    case actionTypes.DELETE_EXERCISE:\n      console.log('DELETE_EXERCISE action:', action);\n      const newState = { ...state };\n      delete newState[action.payload];\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexport { exerciseReducer };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,wBAAwB;AACpD,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,eAAeA,CAACC,KAAK,GAAGF,YAAY,EAAEG,MAAM,EAAE;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,WAAW,CAACM,YAAY;MAC3BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,MAAM,CAAC;MAC3CG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,KAAK,CAAC;MAC5BI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,YAAY,CAAC;MAC1C,MAAM;QAAEQ;MAAS,CAAC,GAAGL,MAAM,CAACM,OAAO,CAAC,CAAC;MACrC,MAAMC,eAAe,GAAGR,KAAK,CAACS,aAAa;MAC3CL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEG,eAAe,CAAC;;MAElD;MACA,IAAI,CAACA,eAAe,IAAI,CAACR,KAAK,CAACU,QAAQ,CAACF,eAAe,CAAC,EAAE;QACxDJ,OAAO,CAACO,KAAK,CACX,6DAA6D,EAC7DH,eACF,CAAC;QACD,OAAOR,KAAK,CAAC,CAAC;MAChB;;MAEA;MACA,MAAMY,gBAAgB,GAAGZ,KAAK,CAACU,QAAQ,CAACF,eAAe,CAAC,CAACK,SAAS,IAAI,EAAE;MAExET,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEO,gBAAgB,CAAC;;MAEnD;MACA,OAAO;QACL,GAAGZ,KAAK;QACRU,QAAQ,EAAE;UACR,GAAGV,KAAK,CAACU,QAAQ;UACjB,CAACF,eAAe,GAAG;YACjB,GAAGR,KAAK,CAACU,QAAQ,CAACF,eAAe,CAAC;YAClCK,SAAS,EAAE,CAAC,GAAGD,gBAAgB,EAAEN,QAAQ,CAACQ,EAAE,CAAC,CAAC;UAChD;QACF;MACF,CAAC;IAEH,KAAKjB,WAAW,CAACkB,eAAe;MAC9BX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEJ,MAAM,CAAC;MAC9C,MAAM;QAAEa,EAAE;QAAEE;MAAQ,CAAC,GAAGf,MAAM,CAACM,OAAO;MACtC,MAAMU,yBAAyB,GAAGC,MAAM,CAACC,MAAM,CAACnB,KAAK,CAACU,QAAQ,CAAC,CAACU,IAAI,CAClEC,OAAO,IAAIA,OAAO,CAACR,SAAS,CAACS,QAAQ,CAACR,EAAE,CAC1C,CAAC;MAED,IAAIG,yBAAyB,EAAE;QAC7B,OAAO;UACL,GAAGjB,KAAK;UACRU,QAAQ,EAAE;YACR,GAAGV,KAAK,CAACU,QAAQ;YACjB,CAACO,yBAAyB,CAACH,EAAE,GAAG;cAC9B,GAAGG,yBAAyB;cAC5BJ,SAAS,EAAEI,yBAAyB,CAACJ,SAAS,CAACU,GAAG,CAACC,EAAE,IACnDA,EAAE,CAACV,EAAE,KAAKA,EAAE,GAAG;gBAAE,GAAGU,EAAE;gBAAE,GAAGR;cAAQ,CAAC,GAAGQ,EACzC;YACF;UACF;QACF,CAAC;MACH,CAAC,MAAM;QACLpB,OAAO,CAACO,KAAK,CAAC,sCAAsC,EAAEG,EAAE,CAAC;MAC3D;MACA,OAAOd,KAAK;IAEd,KAAKH,WAAW,CAAC4B,eAAe;MAC9BrB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEJ,MAAM,CAAC;MAC9C,MAAMyB,QAAQ,GAAG;QAAE,GAAG1B;MAAM,CAAC;MAC7B,OAAO0B,QAAQ,CAACzB,MAAM,CAACM,OAAO,CAAC;MAC/B,OAAOmB,QAAQ;IAEjB;MACE,OAAO1B,KAAK;EAChB;AACF;AAEA,SAASD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}