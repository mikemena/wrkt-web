{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useCallback, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [program, setProgram] = useState({\n    user_id: 2,\n    // This should be set to the logged in user's ID\n    name: '',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: []\n  });\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2,\n      // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: program.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id,\n        // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order,\n          // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    // console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({\n      ...prev,\n      ...details\n    }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(workout => {\n    // console.log('Adding workout:', workout);\n    const tempId = uuidv4();\n\n    // Find the highest index used in existing workout names\n    const maxIndex = program.workouts.reduce((max, currWorkout) => {\n      const match = currWorkout.name.match(/Workout (\\d+)/); // Assuming the format \"Workout 1\", \"Workout 2\", etc.\n      const index = match ? parseInt(match[1], 10) : 0;\n      return Math.max(max, index);\n    }, 0);\n    const workoutTitle = `Workout ${maxIndex + 1}`;\n    const newWorkout = {\n      ...workout,\n      id: tempId,\n      name: workout.name || workoutTitle\n    };\n    setProgram(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, newWorkout]\n    }));\n  }, [program.workouts]);\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter(workout => workout.id !== workoutId)\n    }));\n  }, []);\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          const currentExercises = Array.isArray(workout.exercises) ? workout.exercises : [];\n\n          // Add the tempId to the new exercise object\n          const newExercise = {\n            ...exercise,\n            id: tempId,\n            exerciseCatalogId: exercise.id,\n            isNew: true,\n            sets: [{\n              id: uuidv4(),\n              reps: '',\n              weight: '',\n              order: 1,\n              isNew: true\n            }]\n          };\n          // console.log('Adding exercise:', newExercise);\n\n          // Determine the next order value for the new exercise\n          const nextOrder = currentExercises.length > 0 ? Math.max(...currentExercises.map(ex => ex.order)) + 1 : 1;\n          return {\n            ...workout,\n            exercises: [...currentExercises, {\n              ...newExercise,\n              order: nextOrder\n            }]\n          };\n        }\n        return workout;\n      });\n      return {\n        ...prev,\n        workouts: newWorkouts\n      };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => exercise.catalog_exercise_id === updatedExercise.catalog_exercise_id ? {\n              ...exercise,\n              ...updatedExercise\n            } : exercise)\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    // console.log(\n    //   `Deleting exercise. Workout ID: ${workoutId}, Exercise ID: ${exerciseId}`\n    // );\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // console.log(\n        //   `Before deletion, number of exercises: ${workout.exercises.length}`\n        // );\n\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(exercise => exercise.id !== exerciseId)\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutId, exerciseId, newSet) => {\n    const tempId = uuidv4();\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its id\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.id === exerciseId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const currentSets = Array.isArray(exercise.sets) ? exercise.sets : [];\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const nextOrder = currentSets.length > 0 ? Math.max(...currentSets.map(set => set.order)) + 1 : 1;\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  order: nextOrder,\n                  isNew: true\n                };\n                return {\n                  ...exercise,\n                  sets: [...currentSets, updatedSet]\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // useEffect(() => {\n  //   // console.log('Program state updated:', program);\n  // }, [program]); // This effect will run whenever the 'program' state changes\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return {\n                        ...set,\n                        ...updatedSet\n                      };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.filter(set => set.id !== setId)\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      program,\n      saveProgram,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      addExercise,\n      updateExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"0VQifSCEGGoKAb8PfZSVVpcqZ7I=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useState","useCallback","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","program","setProgram","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workouts","saveProgram","NewProgram","programData","programName","programDuration","daysPerWeek","durationUnit","mainGoal","map","workout","order","id","exercises","exercise","catalog_exercise_id","sets","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","updateProgramDetails","details","prev","addWorkout","tempId","maxIndex","reduce","max","currWorkout","match","index","parseInt","Math","workoutTitle","newWorkout","updateWorkout","updatedWorkout","prevProgram","deleteWorkout","workoutId","filter","addExercise","newWorkouts","currentExercises","Array","isArray","newExercise","exerciseCatalogId","isNew","reps","weight","nextOrder","length","ex","updateExercise","updatedExercise","deleteExercise","exerciseId","addSet","newSet","currentSets","set","updatedSet","updateSet","deleteSet","setId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useState, useCallback, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [program, setProgram] = useState({\n    user_id: 2, // This should be set to the logged in user's ID\n    name: '',\n    program_duration: 0,\n    duration_unit: '',\n    days_per_week: 0,\n    main_goal: '',\n    workouts: []\n  });\n\n  //Save program to the database\n  const saveProgram = async NewProgram => {\n    const programData = {\n      user_id: 2, // Assuming this is static or retrieved from somewhere else\n      name: program.programName,\n      program_duration: program.programDuration,\n      days_per_week: program.daysPerWeek,\n      duration_unit: program.durationUnit,\n      main_goal: program.mainGoal,\n      workouts: program.workouts.map(workout => ({\n        name: workout.name,\n        order: workout.id, // Assuming `id` can serve as `order`\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order, // Make sure this exists or determine how to set it\n          sets: exercise.sets || [] // Assuming `sets` exist in `exercise`, if not, you'll need to adjust\n        }))\n      }))\n    };\n\n    // console.log('Saving program from front end:', programData);\n\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong with saving the program');\n      }\n\n      // Assuming the backend responds with the created template, you could use it here if needed\n      // const savedTemplate = await response.json();\n    } catch (error) {\n      console.error('Failed to save the program:', error);\n      // Here, you could set an error state and display it to the user if you wish\n    }\n  };\n\n  // Functions to update the state of top-level properties of the program object\n\n  const updateProgramDetails = useCallback(details => {\n    setProgram(prev => ({ ...prev, ...details }));\n  }, []);\n\n  // Function to add a workout to the program\n\n  const addWorkout = useCallback(\n    workout => {\n      // console.log('Adding workout:', workout);\n      const tempId = uuidv4();\n\n      // Find the highest index used in existing workout names\n      const maxIndex = program.workouts.reduce((max, currWorkout) => {\n        const match = currWorkout.name.match(/Workout (\\d+)/); // Assuming the format \"Workout 1\", \"Workout 2\", etc.\n        const index = match ? parseInt(match[1], 10) : 0;\n        return Math.max(max, index);\n      }, 0);\n\n      const workoutTitle = `Workout ${maxIndex + 1}`;\n\n      const newWorkout = {\n        ...workout,\n        id: tempId,\n        name: workout.name || workoutTitle\n      };\n      setProgram(prev => ({\n        ...prev,\n        workouts: [...prev.workouts, newWorkout]\n      }));\n    },\n    [program.workouts]\n  );\n\n  // Function to update a workout\n\n  const updateWorkout = updatedWorkout => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout =>\n        workout.id === updatedWorkout.id ? updatedWorkout : workout\n      )\n    }));\n  };\n\n  // Function to delete a workout\n\n  const deleteWorkout = useCallback(workoutId => {\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter(workout => workout.id !== workoutId)\n    }));\n  }, []);\n\n  // Function to add exercise to a specific workout\n\n  const addExercise = useCallback((workoutId, exercise) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => {\n      const newWorkouts = prev.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          const currentExercises = Array.isArray(workout.exercises)\n            ? workout.exercises\n            : [];\n\n          // Add the tempId to the new exercise object\n          const newExercise = {\n            ...exercise,\n            id: tempId,\n            exerciseCatalogId: exercise.id,\n            isNew: true,\n            sets: [\n              { id: uuidv4(), reps: '', weight: '', order: 1, isNew: true }\n            ]\n          };\n          // console.log('Adding exercise:', newExercise);\n\n          // Determine the next order value for the new exercise\n          const nextOrder =\n            currentExercises.length > 0\n              ? Math.max(...currentExercises.map(ex => ex.order)) + 1\n              : 1;\n\n          return {\n            ...workout,\n            exercises: [\n              ...currentExercises,\n              { ...newExercise, order: nextOrder }\n            ]\n          };\n        }\n        return workout;\n      });\n      return { ...prev, workouts: newWorkouts };\n    });\n  }, []);\n\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Found the workout that contains the exercise, now update the exercise\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise =>\n              exercise.catalog_exercise_id ===\n              updatedExercise.catalog_exercise_id\n                ? { ...exercise, ...updatedExercise }\n                : exercise\n            )\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = useCallback((workoutId, exerciseId) => {\n    // console.log(\n    //   `Deleting exercise. Workout ID: ${workoutId}, Exercise ID: ${exerciseId}`\n    // );\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // console.log(\n        //   `Before deletion, number of exercises: ${workout.exercises.length}`\n        // );\n\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.filter(\n              exercise => exercise.id !== exerciseId\n            )\n          };\n        }\n\n        return workout;\n      })\n    }));\n  }, []);\n\n  // Function to add sets to a specific exercise\n\n  const addSet = useCallback((workoutId, exerciseId, newSet) => {\n    const tempId = uuidv4();\n\n    setProgram(prev => ({\n      ...prev,\n      workouts: prev.workouts.map(workout => {\n        // Find the correct workout by its id\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the correct exercise by its catalog ID within the workout\n              if (exercise.id === exerciseId) {\n                // Add the new set with the temporary ID to the exercise's sets array\n                const currentSets = Array.isArray(exercise.sets)\n                  ? exercise.sets\n                  : [];\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const nextOrder =\n                  currentSets.length > 0\n                    ? Math.max(...currentSets.map(set => set.order)) + 1\n                    : 1;\n\n                // Add the new set with the temporary ID to the exercise's sets array\n                const updatedSet = {\n                  ...newSet,\n                  id: tempId,\n                  order: nextOrder,\n                  isNew: true\n                };\n\n                return { ...exercise, sets: [...currentSets, updatedSet] };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  }, []);\n\n  // useEffect(() => {\n  //   // console.log('Program state updated:', program);\n  // }, [program]); // This effect will run whenever the 'program' state changes\n\n  // Function to update a set\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.map(set => {\n                    // Find the matching set to update\n                    if (set.order === updatedSet.order) {\n                      return { ...set, ...updatedSet };\n                    }\n                    return set;\n                  })\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  // Function to delete a set\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    setProgram(prevProgram => ({\n      ...prevProgram,\n      workouts: prevProgram.workouts.map(workout => {\n        // Find the matching workout\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              // Find the matching exercise\n              if (exercise.catalog_exercise_id === exerciseId) {\n                return {\n                  ...exercise,\n                  sets: exercise.sets.filter(set => set.id !== setId)\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      })\n    }));\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        program,\n        saveProgram,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        addExercise,\n        updateExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}