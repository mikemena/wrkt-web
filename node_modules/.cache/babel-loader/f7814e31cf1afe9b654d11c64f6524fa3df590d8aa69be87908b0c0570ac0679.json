{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  // Define the initial state structure matching the keys used in your combined reducers\n  const initialState = {\n    program: {\n      workouts: []\n    },\n    saveProgram: () => {},\n    addWorkout: () => {}\n  };\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  //Save program to the database\n  const saveProgram = async newProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  // For updating basic program information like name, duration, etc.\n\n  const updateProgramDetails = details => {\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_DETAILS,\n      payload: details\n    });\n  };\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises\n      }\n    });\n  };\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: {\n        workoutId,\n        updatedExercise\n      }\n    });\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n\n  // Function to add sets to a specific exercise\n\n  const addSet = (workoutId, exerciseId, newSet) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        newSet\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    dispatch({\n      type: actionTypes.DELETE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        setId\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      updateProgramDetails,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      addExercise,\n      updateExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","initialState","program","workouts","saveProgram","addWorkout","state","dispatch","newProgram","type","SAVE_PROGRAM_START","response","fetch","method","headers","body","JSON","stringify","ok","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","payload","error","SAVE_PROGRAM_FAILURE","message","updateProgramDetails","details","UPDATE_PROGRAM_DETAILS","workout","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","workoutId","DELETE_WORKOUT","addExercise","exercises","ADD_EXERCISE","updateExercise","updatedExercise","UPDATE_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","newSet","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","DELETE_SET","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  // Define the initial state structure matching the keys used in your combined reducers\n  const initialState = {\n    program: {\n      workouts: []\n    },\n    saveProgram: () => {},\n    addWorkout: () => {}\n  };\n\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  //Save program to the database\n  const saveProgram = async newProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  // For updating basic program information like name, duration, etc.\n\n  const updateProgramDetails = details => {\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_DETAILS,\n      payload: details\n    });\n  };\n\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises }\n    });\n  };\n  // Function to update an exercise\n\n  const updateExercise = (workoutId, updatedExercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: { workoutId, updatedExercise }\n    });\n  };\n\n  // Function to delete exercise from  a specific workout\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  // Function to add sets to a specific exercise\n\n  const addSet = (workoutId, exerciseId, newSet) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, newSet }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    dispatch({\n      type: actionTypes.DELETE_SET,\n      payload: { workoutId, exerciseId, setId }\n    });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        updateProgramDetails,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        addExercise,\n        updateExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}