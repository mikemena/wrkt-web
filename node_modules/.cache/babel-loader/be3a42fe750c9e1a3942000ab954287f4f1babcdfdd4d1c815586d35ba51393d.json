{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nfunction exerciseReducer(state = {}, action) {\n  switch (action.type) {\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId,\n        exercises\n      } = action.payload;\n      const currentExercises = state[workoutId] || [];\n      const exerciseIds = currentExercises.map(ex => ex.id);\n\n      // console.log(\n      //   'Current exercises before adding new ones:',\n      //   currentExercises\n      // );\n\n      // Filter out exercises that already exist in the workout\n      const newExercises = exercises.filter(ex => !exerciseIds.includes(ex.id)).map((exercise, index) => ({\n        ...exercise,\n        id: uuidv4(),\n        catalog_exercise_id: exercise.id,\n        order: currentExercises.length + index + 1,\n        sets: [{\n          id: uuidv4(),\n          weight: 10,\n          reps: 10,\n          order: 1\n        }]\n      }));\n\n      // console.log('New exercises with default sets:', newExercises);\n\n      return {\n        ...state,\n        [workoutId]: [...currentExercises, ...newExercises]\n      };\n    case actionTypes.DELETE_EXERCISE:\n      const {\n        workoutId: wId,\n        exerciseId\n      } = action.payload;\n      if (!wId || !state[wId]) {\n        console.error('No active workout or workout does not exist:', wId);\n        return state;\n      }\n\n      // Filter out the exercise to delete\n      const updatedExercises = state[wId].filter(ex => ex.id !== exerciseId);\n\n      //Recalculate the order of the remaining exercises\n      const reorderedExercises = updatedExercises.map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      return {\n        ...state,\n        [wId]: reorderedExercises\n      };\n    default:\n      return state;\n  }\n}\nexport { exerciseReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","exerciseReducer","state","action","type","ADD_EXERCISE","workoutId","exercises","payload","currentExercises","exerciseIds","map","ex","id","newExercises","filter","includes","exercise","index","catalog_exercise_id","order","length","sets","weight","reps","DELETE_EXERCISE","wId","exerciseId","console","error","updatedExercises","reorderedExercises"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/exerciseReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\n\nfunction exerciseReducer(state = {}, action) {\n  switch (action.type) {\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId, exercises } = action.payload;\n      const currentExercises = state[workoutId] || [];\n      const exerciseIds = currentExercises.map(ex => ex.id);\n\n      // console.log(\n      //   'Current exercises before adding new ones:',\n      //   currentExercises\n      // );\n\n      // Filter out exercises that already exist in the workout\n      const newExercises = exercises\n        .filter(ex => !exerciseIds.includes(ex.id))\n        .map((exercise, index) => ({\n          ...exercise,\n          id: uuidv4(),\n          catalog_exercise_id: exercise.id,\n          order: currentExercises.length + index + 1,\n          sets: [{ id: uuidv4(), weight: 10, reps: 10, order: 1 }]\n        }));\n\n      // console.log('New exercises with default sets:', newExercises);\n\n      return {\n        ...state,\n        [workoutId]: [...currentExercises, ...newExercises]\n      };\n\n    case actionTypes.DELETE_EXERCISE:\n      const { workoutId: wId, exerciseId } = action.payload;\n\n      if (!wId || !state[wId]) {\n        console.error('No active workout or workout does not exist:', wId);\n        return state;\n      }\n\n      // Filter out the exercise to delete\n      const updatedExercises = state[wId].filter(ex => ex.id !== exerciseId);\n\n      //Recalculate the order of the remaining exercises\n      const reorderedExercises = updatedExercises.map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n\n      return {\n        ...state,\n        [wId]: reorderedExercises\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { exerciseReducer };\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,SAASC,eAAeA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAE;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKJ,WAAW,CAACK,YAAY;MAC3B,MAAM;QAAEC,SAAS;QAAEC;MAAU,CAAC,GAAGJ,MAAM,CAACK,OAAO;MAC/C,MAAMC,gBAAgB,GAAGP,KAAK,CAACI,SAAS,CAAC,IAAI,EAAE;MAC/C,MAAMI,WAAW,GAAGD,gBAAgB,CAACE,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,EAAE,CAAC;;MAErD;MACA;MACA;MACA;;MAEA;MACA,MAAMC,YAAY,GAAGP,SAAS,CAC3BQ,MAAM,CAACH,EAAE,IAAI,CAACF,WAAW,CAACM,QAAQ,CAACJ,EAAE,CAACC,EAAE,CAAC,CAAC,CAC1CF,GAAG,CAAC,CAACM,QAAQ,EAAEC,KAAK,MAAM;QACzB,GAAGD,QAAQ;QACXJ,EAAE,EAAEd,MAAM,CAAC,CAAC;QACZoB,mBAAmB,EAAEF,QAAQ,CAACJ,EAAE;QAChCO,KAAK,EAAEX,gBAAgB,CAACY,MAAM,GAAGH,KAAK,GAAG,CAAC;QAC1CI,IAAI,EAAE,CAAC;UAAET,EAAE,EAAEd,MAAM,CAAC,CAAC;UAAEwB,MAAM,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEJ,KAAK,EAAE;QAAE,CAAC;MACzD,CAAC,CAAC,CAAC;;MAEL;;MAEA,OAAO;QACL,GAAGlB,KAAK;QACR,CAACI,SAAS,GAAG,CAAC,GAAGG,gBAAgB,EAAE,GAAGK,YAAY;MACpD,CAAC;IAEH,KAAKd,WAAW,CAACyB,eAAe;MAC9B,MAAM;QAAEnB,SAAS,EAAEoB,GAAG;QAAEC;MAAW,CAAC,GAAGxB,MAAM,CAACK,OAAO;MAErD,IAAI,CAACkB,GAAG,IAAI,CAACxB,KAAK,CAACwB,GAAG,CAAC,EAAE;QACvBE,OAAO,CAACC,KAAK,CAAC,8CAA8C,EAAEH,GAAG,CAAC;QAClE,OAAOxB,KAAK;MACd;;MAEA;MACA,MAAM4B,gBAAgB,GAAG5B,KAAK,CAACwB,GAAG,CAAC,CAACX,MAAM,CAACH,EAAE,IAAIA,EAAE,CAACC,EAAE,KAAKc,UAAU,CAAC;;MAEtE;MACA,MAAMI,kBAAkB,GAAGD,gBAAgB,CAACnB,GAAG,CAAC,CAACM,QAAQ,EAAEC,KAAK,MAAM;QACpE,GAAGD,QAAQ;QACXG,KAAK,EAAEF,KAAK,GAAG;MACjB,CAAC,CAAC,CAAC;MAEH,OAAO;QACL,GAAGhB,KAAK;QACR,CAACwB,GAAG,GAAGK;MACT,CAAC;IAEH;MACE,OAAO7B,KAAK;EAChB;AACF;AAEA,SAASD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}