{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState, action) {\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      {\n        const workoutId = action.payload;\n        console.log('Workout ID to activate:', workoutId);\n        console.log('State before activating workout:', state.program.workouts);\n        return {\n          ...state,\n          activeWorkout: workoutId,\n          workouts: {\n            ...state.workouts,\n            [workoutId]: {\n              ...state.workouts[workoutId],\n              active: true\n            }\n          }\n        };\n      }\n    case actionTypes.ADD_WORKOUT:\n      {\n        const newWorkout = standardizeWorkout(action.payload);\n        if (!newWorkout) {\n          console.error('Failed to standardize workout:', action.payload);\n          return state;\n        }\n        return {\n          ...state,\n          workouts: {\n            ...state.workouts,\n            [newWorkout.id]: newWorkout\n          }\n        };\n      }\n    case actionTypes.UPDATE_WORKOUT:\n      {\n        const updatedWorkout = action.payload;\n        return {\n          ...state,\n          program: {\n            ...state.program,\n            workouts: state.program.workouts.map(workout => workout.id === action.payload.id || workout.tempId === action.payload.tempId ? action.payload : workout)\n          }\n        };\n      }\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        console.log('Reordered Workouts:', reorderedWorkouts);\n        return {\n          ...state,\n          program: {\n            ...state.program,\n            workouts: state.program.workouts.filter(workout => workout.id !== action.payload && workout.tempId !== action.payload)\n          }\n        };\n      }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddExercise = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdAddEx || workout.tempId === workoutIdAddEx) {\n          // Create a Set of existing exercise IDs\n          const existingExerciseIds = new Set(workout.exercises.map(ex => ex.id || ex.tempId));\n\n          // Filter out duplicates and add only new exercises\n          const newExercises = exercises.filter(ex => !existingExerciseIds.has(ex.id || ex.tempId));\n\n          // Combine existing exercises with new ones\n          const updatedExercisesAfterAdd = [...workout.exercises, ...newExercises.map(ex => ({\n            ...exerciseUtils.standardizeExercise(ex),\n            id: ex.id || null,\n            tempId: ex.tempId || uuidv4() // Generate tempId for new exercises if not present\n          }))];\n          return {\n            ...workout,\n            exercises: updatedExercisesAfterAdd\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddExercise\n        }\n      };\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const {\n        workoutId,\n        exerciseIdForToggle,\n        exerciseData\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForToggleExercise = state.program.workouts.map(workout => {\n        if (workout.id === workoutId || workout.tempId === workoutId) {\n          // Find if the exercise already exists\n          const existingExerciseIndex = workout.exercises.findIndex(ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle);\n          let updatedExercises;\n          if (existingExerciseIndex === -1) {\n            // Exercise doesn't exist, add it\n            updatedExercises = [...workout.exercises, {\n              id: exerciseIdForToggle || uuidv4(),\n              // Use provided id or generate tempId\n              tempId: exerciseIdForToggle ? null : uuidv4(),\n              // Set tempId if new\n              name: exerciseData.name,\n              muscle: exerciseData.muscle,\n              equipment: exerciseData.equipment,\n              order: workout.exercises.length + 1,\n              selected: true,\n              sets: [{\n                id: uuidv4(),\n                weight: 10,\n                // Default weight\n                reps: 10,\n                // Default reps\n                order: 1\n              }]\n            }];\n          } else {\n            // Exercise exists, toggle its selection by removing it\n            updatedExercises = workout.exercises.filter((ex, index) => index !== existingExerciseIndex);\n          }\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForToggleExercise\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveExercise = state.program.workouts.map(workout => {\n        if (workout.id === wId5 || workout.tempId === wId5) {\n          // Filter out the exercise to be removed\n          const updatedExercises = workout.exercises.filter(exercise => exercise.id !== exId5 && exercise.tempId !== exId5 && exercise.catalog_exercise_id !== exId5);\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveExercise\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId: exerciseIdAddSet,\n        newSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddSet = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdAddSet || workout.tempId === workoutIdAddSet) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exerciseIdAddSet || exercise.tempId === exerciseIdAddSet) {\n              // Add the new set to the exercise\n              const updatedSets = [...exercise.sets, {\n                ...newSet,\n                id: uuidv4()\n              }];\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddSet\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForUpdateSet = state.program.workouts.map(workout => {\n        if (workout.id === wId2 || workout.tempId === wId2) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exId || exercise.tempId === exId) {\n              // Update the specific set within the exercise\n              const updatedSets = exercise.sets.map(set => set.id === updatedSet.id || set.tempId === updatedSet.tempId ? {\n                ...set,\n                ...updatedSet\n              } : set);\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForUpdateSet\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveSet = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdDeleteSet || workout.tempId === workoutIdDeleteSet) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exerciseIdDeleteSet || exercise.tempId === exerciseIdDeleteSet) {\n              // Remove the specific set from the exercise\n              const updatedSets = exercise.sets.filter(set => set.id !== setIdDeleteSet && set.tempId !== setIdDeleteSet);\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveSet\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","standardizeWorkout","workoutReducer","state","action","type","SET_ACTIVE_WORKOUT","workoutId","payload","console","log","program","workouts","activeWorkout","active","ADD_WORKOUT","newWorkout","error","id","UPDATE_WORKOUT","updatedWorkout","map","workout","tempId","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","order","index","reduce","acc","filter","ADD_EXERCISE","workoutIdAddEx","exercises","workoutsForAddExercise","existingExerciseIds","Set","ex","newExercises","has","updatedExercisesAfterAdd","standardizeExercise","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","exerciseData","workoutsForToggleExercise","existingExerciseIndex","findIndex","updatedExercises","name","muscle","equipment","length","selected","sets","weight","reps","REMOVE_EXERCISE","wId5","exerciseId","exId5","workoutsForRemoveExercise","exercise","catalog_exercise_id","ADD_SET","workoutIdAddSet","exerciseIdAddSet","newSet","workoutsForAddSet","updatedSets","UPDATE_SET","wId2","exId","updatedSet","workoutsForUpdateSet","set","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutsForRemoveSet"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState, action) {\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.SET_ACTIVE_WORKOUT: {\n      const workoutId = action.payload;\n\n      console.log('Workout ID to activate:', workoutId);\n      console.log('State before activating workout:', state.program.workouts);\n\n      return {\n        ...state,\n        activeWorkout: workoutId,\n        workouts: {\n          ...state.workouts,\n          [workoutId]: {\n            ...state.workouts[workoutId],\n            active: true\n          }\n        }\n      };\n    }\n\n    case actionTypes.ADD_WORKOUT: {\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        workouts: {\n          ...state.workouts,\n          [newWorkout.id]: newWorkout\n        }\n      };\n    }\n\n    case actionTypes.UPDATE_WORKOUT: {\n      const updatedWorkout = action.payload;\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout =>\n            workout.id === action.payload.id ||\n            workout.tempId === action.payload.tempId\n              ? action.payload\n              : workout\n          )\n        }\n      };\n    }\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n      console.log('Reordered Workouts:', reorderedWorkouts);\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.filter(\n            workout =>\n              workout.id !== action.payload && workout.tempId !== action.payload\n          )\n        }\n      };\n    }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddExercise = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdAddEx ||\n          workout.tempId === workoutIdAddEx\n        ) {\n          // Create a Set of existing exercise IDs\n          const existingExerciseIds = new Set(\n            workout.exercises.map(ex => ex.id || ex.tempId)\n          );\n\n          // Filter out duplicates and add only new exercises\n          const newExercises = exercises.filter(\n            ex => !existingExerciseIds.has(ex.id || ex.tempId)\n          );\n\n          // Combine existing exercises with new ones\n          const updatedExercisesAfterAdd = [\n            ...workout.exercises,\n            ...newExercises.map(ex => ({\n              ...exerciseUtils.standardizeExercise(ex),\n              id: ex.id || null,\n              tempId: ex.tempId || uuidv4() // Generate tempId for new exercises if not present\n            }))\n          ];\n\n          return {\n            ...workout,\n            exercises: updatedExercisesAfterAdd\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddExercise\n        }\n      };\n\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const { workoutId, exerciseIdForToggle, exerciseData } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForToggleExercise = state.program.workouts.map(workout => {\n        if (workout.id === workoutId || workout.tempId === workoutId) {\n          // Find if the exercise already exists\n          const existingExerciseIndex = workout.exercises.findIndex(\n            ex =>\n              ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle\n          );\n\n          let updatedExercises;\n          if (existingExerciseIndex === -1) {\n            // Exercise doesn't exist, add it\n            updatedExercises = [\n              ...workout.exercises,\n              {\n                id: exerciseIdForToggle || uuidv4(), // Use provided id or generate tempId\n                tempId: exerciseIdForToggle ? null : uuidv4(), // Set tempId if new\n                name: exerciseData.name,\n                muscle: exerciseData.muscle,\n                equipment: exerciseData.equipment,\n                order: workout.exercises.length + 1,\n                selected: true,\n                sets: [\n                  {\n                    id: uuidv4(),\n                    weight: 10, // Default weight\n                    reps: 10, // Default reps\n                    order: 1\n                  }\n                ]\n              }\n            ];\n          } else {\n            // Exercise exists, toggle its selection by removing it\n            updatedExercises = workout.exercises.filter(\n              (ex, index) => index !== existingExerciseIndex\n            );\n          }\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForToggleExercise\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveExercise = state.program.workouts.map(workout => {\n        if (workout.id === wId5 || workout.tempId === wId5) {\n          // Filter out the exercise to be removed\n          const updatedExercises = workout.exercises.filter(\n            exercise =>\n              exercise.id !== exId5 &&\n              exercise.tempId !== exId5 &&\n              exercise.catalog_exercise_id !== exId5\n          );\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveExercise\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId: exerciseIdAddSet,\n        newSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddSet = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdAddSet ||\n          workout.tempId === workoutIdAddSet\n        ) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (\n              exercise.id === exerciseIdAddSet ||\n              exercise.tempId === exerciseIdAddSet\n            ) {\n              // Add the new set to the exercise\n              const updatedSets = [\n                ...exercise.sets,\n                { ...newSet, id: uuidv4() }\n              ];\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddSet\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForUpdateSet = state.program.workouts.map(workout => {\n        if (workout.id === wId2 || workout.tempId === wId2) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exId || exercise.tempId === exId) {\n              // Update the specific set within the exercise\n              const updatedSets = exercise.sets.map(set =>\n                set.id === updatedSet.id || set.tempId === updatedSet.tempId\n                  ? { ...set, ...updatedSet }\n                  : set\n              );\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForUpdateSet\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveSet = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdDeleteSet ||\n          workout.tempId === workoutIdDeleteSet\n        ) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (\n              exercise.id === exerciseIdDeleteSet ||\n              exercise.tempId === exerciseIdDeleteSet\n            ) {\n              // Remove the specific set from the exercise\n              const updatedSets = exercise.sets.filter(\n                set =>\n                  set.id !== setIdDeleteSet && set.tempId !== setIdDeleteSet\n              );\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveSet\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}