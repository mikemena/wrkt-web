{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, {\n    ...initialState,\n    program: {\n      ...initialState.program\n    }\n  });\n\n  // Program Actions\n\n  const setSelectedProgram = program => {\n    console.log();\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: {\n        ...program,\n        selected: true\n      }\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    console.log('workoutId in setActiveWorkout in context', workoutId);\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId // This ID can be either tempId or id\n    });\n  };\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.keys(state.program.workouts).length + 1\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || [],\n      selected: true\n    }));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkout) {\n      console.error('No active workout selected');\n      return;\n    }\n    const workout = state.workouts[state.activeWorkout];\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: {\n          workoutId: state.activeWorkout,\n          exerciseId\n        }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n        payload: {\n          exerciseIdForToggle: exerciseId,\n          exerciseData: exerciseData\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      console.log('Available workout IDs:', Object.keys(state.workouts));\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => exerciseUtils.getExerciseId(ex) === exerciseId ? {\n      ...ex,\n      sets: updatedSets\n    } : ex);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"PUP5n3wZUGmALBYdMf9lprZncfk=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","standardizeWorkout","exerciseUtils","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","program","setSelectedProgram","console","log","type","payload","selected","saveProgram","programId","Object","keys","programs","newProgram","workouts","values","map","workout","id","name","order","exercises","exercise","catalog_exercise_id","sets","set","index","reps","weight","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","error","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","addWorkout","newWorkout","length","ADD_WORKOUT","updateWorkout","standardizedWorkout","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","tempId","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","activeWorkout","exerciseExists","some","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","addSet","find","getExerciseId","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","updatedSets","filter","updatedExercises","clearState","CLEAR_STATE","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, {\n    ...initialState,\n    program: { ...initialState.program }\n  });\n\n  // Program Actions\n\n  const setSelectedProgram = program => {\n    console.log();\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: { ...program, selected: true }\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    console.log('workoutId in setActiveWorkout in context', workoutId);\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId // This ID can be either tempId or id\n    });\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.keys(state.program.workouts).length + 1\n    };\n\n    dispatch({ type: actionTypes.ADD_WORKOUT, payload: newWorkout });\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || [],\n      selected: true\n    }));\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkout) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    const workout = state.workouts[state.activeWorkout];\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: { workoutId: state.activeWorkout, exerciseId }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n        payload: {\n          exerciseIdForToggle: exerciseId,\n          exerciseData: exerciseData\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      console.log('Available workout IDs:', Object.keys(state.workouts));\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex =>\n      exerciseUtils.getExerciseId(ex) === exerciseId\n        ? { ...ex, sets: updatedSets }\n        : ex\n    );\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}