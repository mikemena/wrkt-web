{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport currentProgram from '../reducers/initialState.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, currentProgram);\n\n  // Program Actions\n\n  const clearProgram = () => {\n    dispatch({\n      type: actionTypes.CLEAR_PROGRAM,\n      payload: currentProgram\n    });\n  };\n\n  // Action to initialize state for creating a new program\n  const initializeNewProgramState = () => {\n    const newProgram = {\n      ...currentProgram.program,\n      id: uuidv4(),\n      // Generate a new unique ID for the new program\n      name: '',\n      // Reset other fields as needed\n      program_duration: 0,\n      duration_unit: '',\n      days_per_week: 0,\n      main_goal: ''\n    };\n    dispatch({\n      type: actionTypes.INITIALIZE_NEW_PROGRAM_STATE,\n      payload: {\n        program: newProgram,\n        workouts: [],\n        activeWorkout: null\n      }\n    });\n  };\n\n  // Action to initialize state for editing a program\n  const initializeEditProgramState = (program, workouts) => {\n    dispatch({\n      type: actionTypes.INITIALIZE_EDIT_PROGRAM_STATE,\n      payload: {\n        program,\n        workouts,\n        activeWorkout: workouts.length > 0 ? workouts[0].id : null\n      }\n    });\n  };\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.workout.workouts.map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return;\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: {\n        activeWorkout: workoutId\n      }\n    });\n  };\n  const addWorkout = programId => {\n    const workoutData = {\n      programId: programId,\n      exercises: []\n    };\n    const newWorkout = standardizeWorkout(workoutData, state.workout.workouts.length);\n    console.log('Adding workout in context:', newWorkout);\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n  const updateWorkout = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        updatedWorkout\n      }\n    });\n  };\n  const deleteWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to delete workout without a valid ID');\n      return;\n    }\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: {\n        workoutId\n      }\n    });\n  };\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      id: uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || [],\n      selected: true\n    }));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.workout.activeWorkout) {\n      console.error('No active workout selected');\n      return;\n    }\n    const workout = state.workout.workouts.find(w => w.id === state.workout.activeWorkout);\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: {\n          workoutId: state.workout.activeWorkout,\n          exerciseId\n        }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n        payload: {\n          exerciseIdForToggle: exerciseId,\n          exerciseData: exerciseData\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        setId\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.workout.activeWorkout,\n      initializeNewProgramState,\n      initializeEditProgramState,\n      addProgram,\n      updateProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearProgram\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"iwf4tMYwmHJbmEjwF8qhP8kpfvw=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","currentProgram","standardizeWorkout","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","clearProgram","type","CLEAR_PROGRAM","payload","initializeNewProgramState","newProgram","program","id","name","program_duration","duration_unit","days_per_week","main_goal","INITIALIZE_NEW_PROGRAM_STATE","workouts","activeWorkout","initializeEditProgramState","INITIALIZE_EDIT_PROGRAM_STATE","length","saveProgram","workout","map","order","exercises","exercise","catalog_exercise_id","sets","set","index","reps","weight","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","console","error","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","UPDATE_PROGRAM_SUCCESS","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","programId","DELETE_PROGRAM","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","addWorkout","workoutData","newWorkout","log","ADD_WORKOUT","updateWorkout","updatedWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","selected","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","find","w","exerciseExists","some","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","addSet","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","REMOVE_SET","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport currentProgram from '../reducers/initialState.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, currentProgram);\n\n  // Program Actions\n\n  const clearProgram = () => {\n    dispatch({\n      type: actionTypes.CLEAR_PROGRAM,\n      payload: currentProgram\n    });\n  };\n\n  // Action to initialize state for creating a new program\n  const initializeNewProgramState = () => {\n    const newProgram = {\n      ...currentProgram.program,\n      id: uuidv4(), // Generate a new unique ID for the new program\n      name: '', // Reset other fields as needed\n      program_duration: 0,\n      duration_unit: '',\n      days_per_week: 0,\n      main_goal: ''\n    };\n\n    dispatch({\n      type: actionTypes.INITIALIZE_NEW_PROGRAM_STATE,\n      payload: {\n        program: newProgram,\n        workouts: [],\n        activeWorkout: null\n      }\n    });\n  };\n\n  // Action to initialize state for editing a program\n  const initializeEditProgramState = (program, workouts) => {\n    dispatch({\n      type: actionTypes.INITIALIZE_EDIT_PROGRAM_STATE,\n      payload: {\n        program,\n        workouts,\n        activeWorkout: workouts.length > 0 ? workouts[0].id : null\n      }\n    });\n  };\n\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.workout.workouts.map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return;\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: {\n        activeWorkout: workoutId\n      }\n    });\n  };\n\n  const addWorkout = programId => {\n    const workoutData = {\n      programId: programId,\n      exercises: []\n    };\n\n    const newWorkout = standardizeWorkout(\n      workoutData,\n      state.workout.workouts.length\n    );\n\n    console.log('Adding workout in context:', newWorkout);\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n\n  const updateWorkout = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: { updatedWorkout }\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to delete workout without a valid ID');\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: { workoutId }\n    });\n  };\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      id: uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || [],\n      selected: true\n    }));\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.workout.activeWorkout) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    const workout = state.workout.workouts.find(\n      w => w.id === state.workout.activeWorkout\n    );\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: { workoutId: state.workout.activeWorkout, exerciseId }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n        payload: {\n          exerciseIdForToggle: exerciseId,\n          exerciseData: exerciseData\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: { workoutId, exerciseId, setId }\n    });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.workout.activeWorkout,\n        initializeNewProgramState,\n        initializeEditProgramState,\n        addProgram,\n        updateProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearProgram\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}