{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const selectProgram = program => {\n    dispatch({\n      type: actionTypes.SELECT_PROGRAM,\n      payload: program\n    });\n    program.workouts.forEach(workout => {\n      dispatch({\n        type: actionTypes.UPDATE_WORKOUT,\n        payload: workout\n      });\n    });\n  };\n  const selectWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SELECT_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: 'ADD_PROGRAM',\n      payload: {\n        ...details,\n        workouts: [] // Ensure workouts array is initialized\n      }\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = programId => {\n    console.log('addWorkout programId', programId);\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order: Object.values(state.workouts).filter(w => w.programId === programId).length + 1\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n\n    // Add this line to update the program's workouts array\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n    console.log('addWorkout newWorkout', newWorkout);\n  };\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    // Remove duplicates based on catalog_exercise_id\n    const uniqueExercises = Array.from(new Set(standardizedExercises.map(ex => ex.catalog_exercise_id))).map(id => standardizedExercises.find(ex => ex.catalog_exercise_id === id));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: uniqueExercises\n      }\n    });\n\n    // Update the program's workout\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: {\n        workoutId,\n        exercises: uniqueExercises\n      }\n    });\n  };\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: {\n        workoutId,\n        exercise\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    const workout = state.workouts[workoutId];\n    const updatedExercises = workout.exercises.filter(ex => ex.id !== exerciseId).map((exercise, index) => ({\n      ...exercise,\n      order: index + 1\n    }));\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedExercises\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = [...ex.sets, {\n          id: uuidv4(),\n          weight,\n          reps,\n          order: ex.sets.length + 1\n        }].map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...ex,\n          sets: updatedSets\n        };\n      }\n      return ex;\n    });\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps,\n        updatedExercises\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = ex.sets.filter(set => set.id !== setId).map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...ex,\n          sets: updatedSets\n        };\n      }\n      return ex;\n    });\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      selectProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      selectWorkout,\n      addExercise,\n      updateExercise,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","standardizeWorkout","exerciseUtils","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","selectProgram","program","type","SELECT_PROGRAM","payload","workouts","forEach","workout","UPDATE_WORKOUT","selectWorkout","workoutId","console","error","SELECT_WORKOUT","saveProgram","programId","Object","keys","programs","newProgram","values","map","exercises","exercise","catalog_exercise_id","order","sets","set","index","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","id","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","UPDATE_PROGRAM_WORKOUT","programData","Array","isArray","addProgram","details","deleteProgram","DELETE_PROGRAM","addWorkout","log","newWorkout","name","filter","w","length","ADD_WORKOUT","UPDATE_PROGRAM_WORKOUTS","updateWorkout","standardizedWorkout","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","tempId","uniqueExercises","from","Set","find","ADD_EXERCISE","updateExercise","UPDATE_EXERCISE","removeExercise","exerciseId","updatedExercises","REMOVE_EXERCISE","addSet","weight","reps","getExerciseId","updatedSets","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","clearState","CLEAR_STATE","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nimport exerciseUtils from '../utils/exercise.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const selectProgram = program => {\n    dispatch({\n      type: actionTypes.SELECT_PROGRAM,\n      payload: program\n    });\n\n    program.workouts.forEach(workout => {\n      dispatch({\n        type: actionTypes.UPDATE_WORKOUT,\n        payload: workout\n      });\n    });\n  };\n\n  const selectWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SELECT_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            ...set,\n            order: index + 1\n          }))\n        })),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n\n      return savedProgram; // Return the saved program\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: 'ADD_PROGRAM',\n      payload: {\n        ...details,\n        workouts: [] // Ensure workouts array is initialized\n      }\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = programId => {\n    console.log('addWorkout programId', programId);\n    const newWorkout = {\n      id: uuidv4(),\n      name: 'New Workout',\n      programId: programId,\n      exercises: [],\n      order:\n        Object.values(state.workouts).filter(w => w.programId === programId)\n          .length + 1\n    };\n\n    dispatch({ type: actionTypes.ADD_WORKOUT, payload: newWorkout });\n\n    // Add this line to update the program's workouts array\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUTS,\n      payload: { programId, workout: newWorkout }\n    });\n\n    console.log('addWorkout newWorkout', newWorkout);\n  };\n\n  const updateWorkout = workout => {\n    const standardizedWorkout = standardizeWorkout(workout);\n    if (!standardizedWorkout) {\n      console.error('Invalid workout object:', workout);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: standardizedWorkout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      tempId: ex.tempId || uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      sets: ex.sets || []\n    }));\n\n    // Remove duplicates based on catalog_exercise_id\n    const uniqueExercises = Array.from(\n      new Set(standardizedExercises.map(ex => ex.catalog_exercise_id))\n    ).map(id =>\n      standardizedExercises.find(ex => ex.catalog_exercise_id === id)\n    );\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: uniqueExercises }\n    });\n\n    // Update the program's workout\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_WORKOUT,\n      payload: { workoutId, exercises: uniqueExercises }\n    });\n  };\n\n  const updateExercise = (workoutId, exercise) => {\n    dispatch({\n      type: actionTypes.UPDATE_EXERCISE,\n      payload: { workoutId, exercise }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    const workout = state.workouts[workoutId];\n    const updatedExercises = workout.exercises\n      .filter(ex => ex.id !== exerciseId)\n      .map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId, updatedExercises }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = [\n          ...ex.sets,\n          { id: uuidv4(), weight, reps, order: ex.sets.length + 1 }\n        ].map((set, index) => ({ ...set, order: index + 1 }));\n        return { ...ex, sets: updatedSets };\n      }\n      return ex;\n    });\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps, updatedExercises }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex => {\n      if (exerciseUtils.getExerciseId(ex) === exerciseId) {\n        const updatedSets = ex.sets\n          .filter(set => set.id !== setId)\n          .map((set, index) => ({ ...set, order: index + 1 }));\n        return { ...ex, sets: updatedSets };\n      }\n      return ex;\n    });\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        selectProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        selectWorkout,\n        addExercise,\n        updateExercise,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}