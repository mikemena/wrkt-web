{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/components/ExerciseFilters/ExerciseFilters.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport useFetchData from '../../hooks/useFetchData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExerciseFilters({\n  onMuscleChange,\n  onEquipmentChange\n}) {\n  _s();\n  const [equipments, setEquipments] = useState([]);\n  const [muscles, setMuscles] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch equipment catalog\n        const equipmentResponse = await fetch('http://localhost:9025/api/equipments');\n        const equipmentCatalog = await equipmentResponse.json();\n        setEquipments(equipmentCatalog);\n\n        // Fetch muscle catalog\n        const musclesResponse = await fetch('http://localhost:9025/api/muscles');\n        const musclesCatalog = await musclesResponse.json();\n        setMuscles(musclesCatalog);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      options: muscles.map(option => option.name),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Muscle\",\n        InputProps: {\n          ...params.InputProps,\n          type: 'search'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this),\n      onChange: (event, newValue) => {\n        onMuscleChange(newValue);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      options: equipments.map(option => option.name),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Equipment\",\n        InputProps: {\n          ...params.InputProps,\n          type: 'search'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this),\n      onChange: (event, newValue) => {\n        onEquipmentChange(newValue);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(ExerciseFilters, \"jv/tIGh6xBDFqyoc46Wvt4+gHLQ=\");\n_c = ExerciseFilters;\nexport default ExerciseFilters;\nvar _c;\n$RefreshReg$(_c, \"ExerciseFilters\");","map":{"version":3,"names":["React","useState","useEffect","Autocomplete","Stack","TextField","useFetchData","jsxDEV","_jsxDEV","ExerciseFilters","onMuscleChange","onEquipmentChange","_s","equipments","setEquipments","muscles","setMuscles","fetchData","equipmentResponse","fetch","equipmentCatalog","json","musclesResponse","musclesCatalog","error","console","direction","spacing","children","options","map","option","name","renderInput","params","label","InputProps","type","fileName","_jsxFileName","lineNumber","columnNumber","onChange","event","newValue","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/components/ExerciseFilters/ExerciseFilters.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport useFetchData from '../../hooks/useFetchData';\n\nfunction ExerciseFilters({ onMuscleChange, onEquipmentChange }) {\n  const [equipments, setEquipments] = useState([]);\n  const [muscles, setMuscles] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch equipment catalog\n        const equipmentResponse = await fetch(\n          'http://localhost:9025/api/equipments'\n        );\n        const equipmentCatalog = await equipmentResponse.json();\n        setEquipments(equipmentCatalog);\n\n        // Fetch muscle catalog\n        const musclesResponse = await fetch(\n          'http://localhost:9025/api/muscles'\n        );\n        const musclesCatalog = await musclesResponse.json();\n        setMuscles(musclesCatalog);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this runs once on mount\n\n  return (\n    <Stack direction='row' spacing={2}>\n      <Autocomplete\n        options={muscles.map(option => option.name)}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label='Muscle'\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n        )}\n        onChange={(event, newValue) => {\n          onMuscleChange(newValue);\n        }}\n      />\n      <Autocomplete\n        options={equipments.map(option => option.name)}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label='Equipment'\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n        )}\n        onChange={(event, newValue) => {\n          onEquipmentChange(newValue);\n        }}\n      />\n    </Stack>\n  );\n}\n\nexport default ExerciseFilters;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}