{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.catalog_exercise_id));\n      const updatedExrc = [...existingWorkout.exercises, ...exercises.filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id)).map(ex => exerciseUtils.standardizeExercise(ex))];\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n    case actionTypes.UPDATE_EXERCISE:\n      const {\n        workoutId: wId4,\n        exercise\n      } = action.payload;\n      const workout4 = state[wId4];\n      if (!workout4) return state;\n      const updatedExercises4 = workout4.exercises.map(ex => ex.id === exercise.id ? {\n        ...ex,\n        ...exercise\n      } : ex);\n      return {\n        ...state,\n        [wId4]: {\n          ...workout4,\n          exercises: updatedExercises4\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n      const remainingExercises = workout5.exercises.filter(ex => ex.id !== exId5);\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: remainingExercises\n        }\n      };\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }]\n          } : exercise)\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(exercise => {\n        const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n        if (exerciseIdToCompare === exerciseIdDeleteSet) {\n          return {\n            ...exercise,\n            sets: exercise.sets.filter(set => set.id !== setIdDeleteSet)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        const newState = {\n          ...reorderedWorkouts\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","standardizeWorkout","workoutReducer","state","workouts","action","type","ADD_WORKOUT","newWorkout","payload","console","error","id","UPDATE_WORKOUT","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingWorkout","existingExerciseIds","Set","map","ex","catalog_exercise_id","updatedExrc","filter","has","standardizeExercise","UPDATE_EXERCISE","wId4","exercise","workout4","updatedExercises4","REMOVE_EXERCISE","wId5","exerciseId","exId5","workout5","remainingExercises","ADD_SET","workoutIdAddSet","weight","reps","workoutToUpdate","getExerciseId","sets","order","length","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercises2","set","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutDeleteSet","updatedExercisesDeleteSet","exerciseIdToCompare","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","workout","index","reduce","acc","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.ADD_WORKOUT:\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.catalog_exercise_id)\n      );\n\n      const updatedExrc = [\n        ...existingWorkout.exercises,\n        ...exercises\n          .filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id))\n          .map(ex => exerciseUtils.standardizeExercise(ex))\n      ];\n\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n\n    case actionTypes.UPDATE_EXERCISE:\n      const { workoutId: wId4, exercise } = action.payload;\n      const workout4 = state[wId4];\n      if (!workout4) return state;\n\n      const updatedExercises4 = workout4.exercises.map(ex =>\n        ex.id === exercise.id ? { ...ex, ...exercise } : ex\n      );\n\n      return {\n        ...state,\n        [wId4]: {\n          ...workout4,\n          exercises: updatedExercises4\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n\n      const remainingExercises = workout5.exercises.filter(\n        ex => ex.id !== exId5\n      );\n\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: remainingExercises\n        }\n      };\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise =>\n            exerciseUtils.getExerciseId(exercise) === exerciseId\n              ? {\n                  ...exercise,\n                  sets: [\n                    ...exercise.sets,\n                    {\n                      id: uuidv4(),\n                      weight,\n                      reps,\n                      order: exercise.sets.length + 1\n                    }\n                  ]\n                }\n              : exercise\n          )\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set =>\n              set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n            )\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(\n        exercise => {\n          const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n          if (exerciseIdToCompare === exerciseIdDeleteSet) {\n            return {\n              ...exercise,\n              sets: exercise.sets.filter(set => set.id !== setIdDeleteSet)\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      const newState = {\n        ...reorderedWorkouts\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}