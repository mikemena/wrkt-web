{"ast":null,"code":"const standardizePrograms = (fetchedPrograms, selectedProgramId = null) => {\n  const standardizedState = {\n    programs: {},\n    workouts: {},\n    activeWorkout: null,\n    selectedProgram: null\n  };\n  fetchedPrograms.forEach(program => {\n    const programId = program.id; // Assuming program.id is either an integer or UUID\n\n    // Standardize program data (single program object)\n    standardizedState.program = {\n      user_id: program.user_id || null,\n      id: programId,\n      name: program.name || '',\n      program_duration: program.program_duration || 0,\n      duration_unit: program.duration_unit || 'Days',\n      days_per_week: program.days_per_week || 0,\n      main_goal: program.main_goal || ''\n    };\n\n    // Set the selected program ID if applicable\n    if (program.id === selectedProgramId) {\n      standardizedState.selectedProgram = programId;\n    }\n\n    // Standardize workouts, grouping them under a single key\n    (program.workouts || []).forEach(workout => {\n      const workoutId = workout.id; // Assuming workout.id is either an integer or UUID\n      standardizedState.workouts[workoutId] = {\n        id: workoutId,\n        name: workout.name || '',\n        exercises: (workout.exercises || []).map(exercise => ({\n          id: exercise.id,\n          // Assuming exercise.id is either an integer or UUID\n          catalog_exercise_id: exercise.catalog_exercise_id || null,\n          equipment: exercise.equipment || '',\n          muscle: exercise.muscle || '',\n          name: exercise.name || '',\n          order: exercise.order || 0,\n          sets: (exercise.sets || []).map(set => ({\n            id: set.id,\n            // Assuming set.id is either an integer or UUID\n            order: set.order || 0,\n            reps: set.reps || 0,\n            weight: set.weight || 0,\n            unit: set.unit || 'lbs'\n          }))\n        }))\n      };\n    });\n\n    // Optionally set the first workout as active if no active workout is set\n    if (!standardizedState.activeWorkout) {\n      standardizedState.activeWorkout = Object.keys(standardizedState.workouts)[0];\n    }\n  });\n  return standardizedState;\n};\nexport default standardizePrograms;","map":{"version":3,"names":["standardizePrograms","fetchedPrograms","selectedProgramId","standardizedState","programs","workouts","activeWorkout","selectedProgram","forEach","program","programId","id","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workout","workoutId","exercises","map","exercise","catalog_exercise_id","equipment","muscle","order","sets","set","reps","weight","unit","Object","keys"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/utils/standardizePrograms.js"],"sourcesContent":["const standardizePrograms = (fetchedPrograms, selectedProgramId = null) => {\n  const standardizedState = {\n    programs: {},\n    workouts: {},\n    activeWorkout: null,\n    selectedProgram: null\n  };\n\n  fetchedPrograms.forEach(program => {\n    const programId = program.id; // Assuming program.id is either an integer or UUID\n\n    // Standardize program data (single program object)\n    standardizedState.program = {\n      user_id: program.user_id || null,\n      id: programId,\n      name: program.name || '',\n      program_duration: program.program_duration || 0,\n      duration_unit: program.duration_unit || 'Days',\n      days_per_week: program.days_per_week || 0,\n      main_goal: program.main_goal || ''\n    };\n\n    // Set the selected program ID if applicable\n    if (program.id === selectedProgramId) {\n      standardizedState.selectedProgram = programId;\n    }\n\n    // Standardize workouts, grouping them under a single key\n    (program.workouts || []).forEach(workout => {\n      const workoutId = workout.id; // Assuming workout.id is either an integer or UUID\n      standardizedState.workouts[workoutId] = {\n        id: workoutId,\n        name: workout.name || '',\n        exercises: (workout.exercises || []).map(exercise => ({\n          id: exercise.id, // Assuming exercise.id is either an integer or UUID\n          catalog_exercise_id: exercise.catalog_exercise_id || null,\n          equipment: exercise.equipment || '',\n          muscle: exercise.muscle || '',\n          name: exercise.name || '',\n          order: exercise.order || 0,\n          sets: (exercise.sets || []).map(set => ({\n            id: set.id, // Assuming set.id is either an integer or UUID\n            order: set.order || 0,\n            reps: set.reps || 0,\n            weight: set.weight || 0,\n            unit: set.unit || 'lbs'\n          }))\n        }))\n      };\n    });\n\n    // Optionally set the first workout as active if no active workout is set\n    if (!standardizedState.activeWorkout) {\n      standardizedState.activeWorkout = Object.keys(\n        standardizedState.workouts\n      )[0];\n    }\n  });\n\n  return standardizedState;\n};\n\nexport default standardizePrograms;\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGA,CAACC,eAAe,EAAEC,iBAAiB,GAAG,IAAI,KAAK;EACzE,MAAMC,iBAAiB,GAAG;IACxBC,QAAQ,EAAE,CAAC,CAAC;IACZC,QAAQ,EAAE,CAAC,CAAC;IACZC,aAAa,EAAE,IAAI;IACnBC,eAAe,EAAE;EACnB,CAAC;EAEDN,eAAe,CAACO,OAAO,CAACC,OAAO,IAAI;IACjC,MAAMC,SAAS,GAAGD,OAAO,CAACE,EAAE,CAAC,CAAC;;IAE9B;IACAR,iBAAiB,CAACM,OAAO,GAAG;MAC1BG,OAAO,EAAEH,OAAO,CAACG,OAAO,IAAI,IAAI;MAChCD,EAAE,EAAED,SAAS;MACbG,IAAI,EAAEJ,OAAO,CAACI,IAAI,IAAI,EAAE;MACxBC,gBAAgB,EAAEL,OAAO,CAACK,gBAAgB,IAAI,CAAC;MAC/CC,aAAa,EAAEN,OAAO,CAACM,aAAa,IAAI,MAAM;MAC9CC,aAAa,EAAEP,OAAO,CAACO,aAAa,IAAI,CAAC;MACzCC,SAAS,EAAER,OAAO,CAACQ,SAAS,IAAI;IAClC,CAAC;;IAED;IACA,IAAIR,OAAO,CAACE,EAAE,KAAKT,iBAAiB,EAAE;MACpCC,iBAAiB,CAACI,eAAe,GAAGG,SAAS;IAC/C;;IAEA;IACA,CAACD,OAAO,CAACJ,QAAQ,IAAI,EAAE,EAAEG,OAAO,CAACU,OAAO,IAAI;MAC1C,MAAMC,SAAS,GAAGD,OAAO,CAACP,EAAE,CAAC,CAAC;MAC9BR,iBAAiB,CAACE,QAAQ,CAACc,SAAS,CAAC,GAAG;QACtCR,EAAE,EAAEQ,SAAS;QACbN,IAAI,EAAEK,OAAO,CAACL,IAAI,IAAI,EAAE;QACxBO,SAAS,EAAE,CAACF,OAAO,CAACE,SAAS,IAAI,EAAE,EAAEC,GAAG,CAACC,QAAQ,KAAK;UACpDX,EAAE,EAAEW,QAAQ,CAACX,EAAE;UAAE;UACjBY,mBAAmB,EAAED,QAAQ,CAACC,mBAAmB,IAAI,IAAI;UACzDC,SAAS,EAAEF,QAAQ,CAACE,SAAS,IAAI,EAAE;UACnCC,MAAM,EAAEH,QAAQ,CAACG,MAAM,IAAI,EAAE;UAC7BZ,IAAI,EAAES,QAAQ,CAACT,IAAI,IAAI,EAAE;UACzBa,KAAK,EAAEJ,QAAQ,CAACI,KAAK,IAAI,CAAC;UAC1BC,IAAI,EAAE,CAACL,QAAQ,CAACK,IAAI,IAAI,EAAE,EAAEN,GAAG,CAACO,GAAG,KAAK;YACtCjB,EAAE,EAAEiB,GAAG,CAACjB,EAAE;YAAE;YACZe,KAAK,EAAEE,GAAG,CAACF,KAAK,IAAI,CAAC;YACrBG,IAAI,EAAED,GAAG,CAACC,IAAI,IAAI,CAAC;YACnBC,MAAM,EAAEF,GAAG,CAACE,MAAM,IAAI,CAAC;YACvBC,IAAI,EAAEH,GAAG,CAACG,IAAI,IAAI;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC5B,iBAAiB,CAACG,aAAa,EAAE;MACpCH,iBAAiB,CAACG,aAAa,GAAG0B,MAAM,CAACC,IAAI,CAC3C9B,iBAAiB,CAACE,QACpB,CAAC,CAAC,CAAC,CAAC;IACN;EACF,CAAC,CAAC;EAEF,OAAOF,iBAAiB;AAC1B,CAAC;AAED,eAAeH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}