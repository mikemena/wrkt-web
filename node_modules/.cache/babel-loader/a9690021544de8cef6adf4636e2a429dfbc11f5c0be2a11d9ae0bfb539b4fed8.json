{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.SELECT_WORKOUT:\n      // Unselect all workouts first\n      const updatedWorkouts = Object.keys(state).reduce((acc, workoutId) => {\n        acc[workoutId] = {\n          ...state[workoutId],\n          selected: false\n        };\n        return acc;\n      }, {});\n      return {\n        ...updatedWorkouts,\n        [action.payload]: {\n          ...state[action.payload],\n          selected: true // Select the current workout\n        }\n      };\n    case actionTypes.ADD_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.catalog_exercise_id));\n      const updatedExrc = [...existingWorkout.exercises, ...exercises.filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id))].map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId\n      } = action.payload;\n      const workout = state[workoutId];\n      if (!workout) return state;\n      const remainingExercises = workout.exercises.filter(ex => exerciseUtils.getExerciseId(ex) !== exerciseId).map((exercise, index) => ({\n        ...exercise,\n        order: index + 1\n      }));\n      return {\n        ...state,\n        [workoutId]: {\n          ...workout,\n          exercises: remainingExercises\n        }\n      };\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }].map((set, index) => ({\n              ...set,\n              order: index + 1\n            }))\n          } : exercise)\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(exercise => {\n        const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n        if (exerciseIdToCompare === exerciseIdDeleteSet) {\n          return {\n            ...exercise,\n            sets: exercise.sets.filter(set => set.id !== setIdDeleteSet).map((set, index) => ({\n              ...set,\n              order: index + 1\n            }))\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        const newState = {\n          ...reorderedWorkouts\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","workoutReducer","state","workouts","action","type","SELECT_WORKOUT","updatedWorkouts","Object","keys","reduce","acc","workoutId","selected","payload","ADD_WORKOUT","id","UPDATE_WORKOUT","ADD_EXERCISE","workoutIdAddEx","exercises","existingWorkout","console","error","existingExerciseIds","Set","map","ex","catalog_exercise_id","updatedExrc","filter","has","exercise","index","order","REMOVE_EXERCISE","workout","remainingExercises","getExerciseId","exerciseId","ADD_SET","workoutIdAddSet","weight","reps","workoutToUpdate","sets","length","set","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercises2","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutDeleteSet","updatedExercisesDeleteSet","exerciseIdToCompare","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","values","sort","a","b","newState"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  switch (action.type) {\n    case actionTypes.SELECT_WORKOUT:\n      // Unselect all workouts first\n      const updatedWorkouts = Object.keys(state).reduce((acc, workoutId) => {\n        acc[workoutId] = {\n          ...state[workoutId],\n          selected: false\n        };\n        return acc;\n      }, {});\n\n      return {\n        ...updatedWorkouts,\n        [action.payload]: {\n          ...state[action.payload],\n          selected: true // Select the current workout\n        }\n      };\n    case actionTypes.ADD_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.catalog_exercise_id)\n      );\n\n      const updatedExrc = [\n        ...existingWorkout.exercises,\n        ...exercises.filter(\n          ex => !existingExerciseIds.has(ex.catalog_exercise_id)\n        )\n      ].map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExrc\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId } = action.payload;\n      const workout = state[workoutId];\n      if (!workout) return state;\n\n      const remainingExercises = workout.exercises\n        .filter(ex => exerciseUtils.getExerciseId(ex) !== exerciseId)\n        .map((exercise, index) => ({ ...exercise, order: index + 1 }));\n\n      return {\n        ...state,\n        [workoutId]: {\n          ...workout,\n          exercises: remainingExercises\n        }\n      };\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise =>\n            exerciseUtils.getExerciseId(exercise) === exerciseId\n              ? {\n                  ...exercise,\n                  sets: [\n                    ...exercise.sets,\n                    {\n                      id: uuidv4(),\n                      weight,\n                      reps,\n                      order: exercise.sets.length + 1\n                    }\n                  ].map((set, index) => ({ ...set, order: index + 1 }))\n                }\n              : exercise\n          )\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercises2 = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set =>\n              set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n            )\n          };\n        }\n        return exercise;\n      });\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercises2\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(\n        exercise => {\n          const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n          if (exerciseIdToCompare === exerciseIdDeleteSet) {\n            return {\n              ...exercise,\n              sets: exercise.sets\n                .filter(set => set.id !== setIdDeleteSet)\n                .map((set, index) => ({ ...set, order: index + 1 }))\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      const newState = {\n        ...reorderedWorkouts\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}