{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { createNewProgram, createNewWorkout, createNewExercise, createNewSet } from '../utils/programStructures';\nimport exerciseUtils from '../utils/exercise.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, {\n    currentProgram: createNewProgram(),\n    initialState\n  });\n\n  // Program Actions\n\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: program\n    });\n    program.workouts.forEach(workout => {\n      dispatch({\n        type: actionTypes.UPDATE_WORKOUT,\n        payload: workout\n      });\n    });\n  };\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n    console.log('Saving program with payload:', newProgram);\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      console.log('Sending updated program to server:', updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order = Object.keys(state.programs[programId].workouts).length + 1;\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n  };\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: {\n      programId,\n      workoutId\n    }\n  });\n\n  // Exercise Actions\n\n  // Exercise Actions\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set. Current workouts state:', state.workouts);\n    console.log('Adding set for workoutId:', workoutId, 'exerciseId:', exerciseId);\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      console.log('Available workout IDs:', Object.keys(state.workouts));\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => exerciseUtils.getExerciseId(ex) === exerciseId ? {\n      ...ex,\n      sets: updatedSets\n    } : ex);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"adUBfIToc9/5H0+m07HbiHcjLKM=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","createNewProgram","createNewWorkout","createNewExercise","createNewSet","exerciseUtils","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","currentProgram","setSelectedProgram","program","console","log","type","SET_SELECTED_PROGRAM","payload","workouts","forEach","workout","UPDATE_WORKOUT","setActiveWorkout","workoutId","error","SET_ACTIVE_WORKOUT","saveProgram","programId","Object","keys","programs","newProgram","values","map","id","name","order","exercises","exercise","catalog_exercise_id","sets","set","index","reps","weight","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","UPDATE_PROGRAM_SUCCESS","updateWorkoutAndProgram","updatedWorkout","programData","Array","isArray","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","addWorkout","newWorkout","length","ADD_WORKOUT","updateWorkout","isNew","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","activeWorkoutId","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","addSet","find","getExerciseId","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","updatedSets","filter","updatedExercises","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport {\n  createNewProgram,\n  createNewWorkout,\n  createNewExercise,\n  createNewSet\n} from '../utils/programStructures';\n\nimport exerciseUtils from '../utils/exercise.js';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, {\n    currentProgram: createNewProgram(),\n    initialState\n  });\n\n  // Program Actions\n\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: actionTypes.SET_SELECTED_PROGRAM,\n      payload: program\n    });\n\n    program.workouts.forEach(workout => {\n      dispatch({\n        type: actionTypes.UPDATE_WORKOUT,\n        payload: workout\n      });\n    });\n  };\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n\n    console.log('Saving program with payload:', newProgram);\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      console.log('Sending updated program to server:', updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order =\n      Object.keys(state.programs[programId].workouts).length + 1;\n\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: { programId, workout: newWorkout }\n    });\n  };\n\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: { programId, workout: updatedWorkout }\n    });\n  };\n\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: { programId, workoutId }\n  });\n\n  // Exercise Actions\n\n  // Exercise Actions\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set. Current workouts state:', state.workouts);\n    console.log(\n      'Adding set for workoutId:',\n      workoutId,\n      'exerciseId:',\n      exerciseId\n    );\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      console.log('Available workout IDs:', Object.keys(state.workouts));\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex =>\n      exerciseUtils.getExerciseId(ex) === exerciseId\n        ? { ...ex, sets: updatedSets }\n        : ex\n    );\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}