{"ast":null,"code":"import { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { createNewExercise } from '../utils/programStructures';\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.SET_INITIAL_PROGRAM:\n      console.log('SET_INITIAL_PROGRAM in workoutReducer. Payload:', action.payload);\n      return {\n        ...state,\n        [action.payload.workouts[0].id]: action.payload.workouts[0]\n      };\n    case actionTypes.ADD_WORKOUT:\n      const {\n        programIdForAddWorkout,\n        workoutForAddWorkout\n      } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForAddWorkout]: {\n            ...state.programs[programIdForAddWorkout],\n            workouts: {\n              ...state.programs[programIdForAddWorkout].workouts,\n              [workoutForAddWorkout.id]: workoutForAddWorkout\n            }\n          }\n        }\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      const {\n        programIdForUpdateWorkout,\n        workoutForUpdateWorkout\n      } = action.payload;\n      console.log('Updating workout in reducer:', workoutForUpdateWorkout);\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForUpdateWorkout]: {\n            ...state.programs[programIdForUpdateWorkout],\n            workouts: {\n              ...state.programs[programIdForUpdateWorkout].workouts,\n              [workoutForUpdateWorkout.id]: {\n                ...state.programs[programIdForUpdateWorkout].workouts[workoutForUpdateWorkout.id],\n                ...workoutForUpdateWorkout\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      const {\n        programIdForDeleteWorkout,\n        workoutIdForDeleteWorkout\n      } = action.payload;\n      if (!programIdForDeleteWorkout || !workoutIdForDeleteWorkout) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n      const {\n        [workoutIdForDeleteWorkout]: deletedWorkout,\n        ...remainingWorkouts\n      } = state.programs[programIdForDeleteWorkout].workouts;\n      const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n        ...workout,\n        order: index + 1\n      })).reduce((acc, workout) => {\n        acc[workout.id] = workout;\n        return acc;\n      }, {});\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForDeleteWorkout]: {\n            ...state.programs[programIdForDeleteWorkout],\n            workouts: reorderedWorkouts\n          }\n        }\n      };\n\n    // Exercise Reducers\n\n    // Exercise Reducers\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state.programs[state.activeProgramId].workouts[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.id || ex.tempId));\n      const newExercises = exercises.filter(ex => !existingExerciseIds.has(ex.id || ex.tempId));\n      const updatedExercisesAfterAdd = [...existingWorkout.exercises, ...newExercises.map(ex => createNewExercise(ex))];\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [workoutIdAddEx]: {\n                ...existingWorkout,\n                exercises: updatedExercisesAfterAdd\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const {\n        exerciseIdForToggle,\n        exerciseData\n      } = action.payload;\n      const activeWorkout = state.programs[state.activeProgramId].workouts[state.activeWorkoutId];\n      const existingExerciseIndex = activeWorkout.exercises.findIndex(ex => (ex.id || ex.tempId) === exerciseIdForToggle);\n      let updatedExercises;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedExercises = [...activeWorkout.exercises, createNewExercise({\n          ...exerciseData,\n          order: activeWorkout.exercises.length + 1,\n          selected: true\n        })];\n      } else {\n        // Exercise exists, remove it\n        updatedExercises = activeWorkout.exercises.filter((_, index) => index !== existingExerciseIndex);\n      }\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [state.activeWorkoutId]: {\n                ...activeWorkout,\n                exercises: updatedExercises\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state.programs[state.activeProgramId].workouts[wId5];\n      if (!workout5) return state;\n      const updatedExercisesAfterRemove = workout5.exercises.filter(exercise => (exercise.id || exercise.tempId) !== exId5);\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [wId5]: {\n                ...workout5,\n                exercises: updatedExercisesAfterRemove\n              }\n            }\n          }\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        newSet\n      } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.selectedProgramId]: {\n            ...state.programs[state.selectedProgramId],\n            workouts: {\n              ...state.programs[state.selectedProgramId].workouts,\n              [workoutIdAddSet]: {\n                ...state.programs[state.selectedProgramId].workouts[workoutIdAddSet],\n                exercises: state.programs[state.selectedProgramId].workouts[workoutIdAddSet].exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n                  ...exercise,\n                  sets: [...exercise.sets, newSet]\n                } : exercise)\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.selectedProgramId]: {\n            ...state.programs[state.selectedProgramId],\n            workouts: {\n              ...state.programs[state.selectedProgramId].workouts,\n              [wId2]: {\n                ...state.programs[state.selectedProgramId].workouts[wId2],\n                exercises: state.programs[state.selectedProgramId].workouts[wId2].exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exId ? {\n                  ...exercise,\n                  sets: exercise.sets.map(set => exerciseUtils.getSetId(set) === exerciseUtils.getSetId(updatedSet) ? {\n                    ...set,\n                    ...updatedSet,\n                    isNew: false\n                  } : set)\n                } : exercise)\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.selectedProgramId]: {\n            ...state.programs[state.selectedProgramId],\n            workouts: {\n              ...state.programs[state.selectedProgramId].workouts,\n              [workoutIdDeleteSet]: {\n                ...state.programs[state.selectedProgramId].workouts[workoutIdDeleteSet],\n                exercises: state.programs[state.selectedProgramId].workouts[workoutIdDeleteSet].exercises.map(exercise => {\n                  if (exerciseUtils.getExerciseId(exercise) === exerciseIdDeleteSet) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.filter(set => exerciseUtils.getSetId(set) !== setIdDeleteSet)\n                    };\n                  }\n                  return exercise;\n                })\n              }\n            }\n          }\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["actionTypes","initialState","exerciseUtils","createNewExercise","workoutReducer","state","workouts","action","console","log","type","payload","SET_INITIAL_PROGRAM","id","ADD_WORKOUT","programIdForAddWorkout","workoutForAddWorkout","programs","UPDATE_WORKOUT","programIdForUpdateWorkout","workoutForUpdateWorkout","DELETE_WORKOUT","programIdForDeleteWorkout","workoutIdForDeleteWorkout","error","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","order","map","workout","index","reduce","acc","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingWorkout","activeProgramId","existingExerciseIds","Set","ex","tempId","newExercises","filter","has","updatedExercisesAfterAdd","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","exerciseData","activeWorkout","activeWorkoutId","existingExerciseIndex","findIndex","updatedExercises","length","selected","_","REMOVE_EXERCISE","wId5","exerciseId","exId5","workout5","updatedExercisesAfterRemove","exercise","ADD_SET","workoutIdAddSet","newSet","selectedProgramId","getExerciseId","sets","UPDATE_SET","wId2","exId","updatedSet","set","getSetId","isNew","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { createNewExercise } from '../utils/programStructures';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.SET_INITIAL_PROGRAM:\n      console.log(\n        'SET_INITIAL_PROGRAM in workoutReducer. Payload:',\n        action.payload\n      );\n      return {\n        ...state,\n        [action.payload.workouts[0].id]: action.payload.workouts[0]\n      };\n\n    case actionTypes.ADD_WORKOUT:\n      const { programIdForAddWorkout, workoutForAddWorkout } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForAddWorkout]: {\n            ...state.programs[programIdForAddWorkout],\n            workouts: {\n              ...state.programs[programIdForAddWorkout].workouts,\n              [workoutForAddWorkout.id]: workoutForAddWorkout\n            }\n          }\n        }\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      const { programIdForUpdateWorkout, workoutForUpdateWorkout } =\n        action.payload;\n      console.log('Updating workout in reducer:', workoutForUpdateWorkout);\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForUpdateWorkout]: {\n            ...state.programs[programIdForUpdateWorkout],\n            workouts: {\n              ...state.programs[programIdForUpdateWorkout].workouts,\n              [workoutForUpdateWorkout.id]: {\n                ...state.programs[programIdForUpdateWorkout].workouts[\n                  workoutForUpdateWorkout.id\n                ],\n                ...workoutForUpdateWorkout\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT:\n      const { programIdForDeleteWorkout, workoutIdForDeleteWorkout } =\n        action.payload;\n      if (!programIdForDeleteWorkout || !workoutIdForDeleteWorkout) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const {\n        [workoutIdForDeleteWorkout]: deletedWorkout,\n        ...remainingWorkouts\n      } = state.programs[programIdForDeleteWorkout].workouts;\n\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForDeleteWorkout]: {\n            ...state.programs[programIdForDeleteWorkout],\n            workouts: reorderedWorkouts\n          }\n        }\n      };\n\n    // Exercise Reducers\n\n    // Exercise Reducers\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout =\n        state.programs[state.activeProgramId].workouts[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.id || ex.tempId)\n      );\n      const newExercises = exercises.filter(\n        ex => !existingExerciseIds.has(ex.id || ex.tempId)\n      );\n\n      const updatedExercisesAfterAdd = [\n        ...existingWorkout.exercises,\n        ...newExercises.map(ex => createNewExercise(ex))\n      ];\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [workoutIdAddEx]: {\n                ...existingWorkout,\n                exercises: updatedExercisesAfterAdd\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const { exerciseIdForToggle, exerciseData } = action.payload;\n      const activeWorkout =\n        state.programs[state.activeProgramId].workouts[state.activeWorkoutId];\n\n      const existingExerciseIndex = activeWorkout.exercises.findIndex(\n        ex => (ex.id || ex.tempId) === exerciseIdForToggle\n      );\n\n      let updatedExercises;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedExercises = [\n          ...activeWorkout.exercises,\n          createNewExercise({\n            ...exerciseData,\n            order: activeWorkout.exercises.length + 1,\n            selected: true\n          })\n        ];\n      } else {\n        // Exercise exists, remove it\n        updatedExercises = activeWorkout.exercises.filter(\n          (_, index) => index !== existingExerciseIndex\n        );\n      }\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [state.activeWorkoutId]: {\n                ...activeWorkout,\n                exercises: updatedExercises\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state.programs[state.activeProgramId].workouts[wId5];\n      if (!workout5) return state;\n\n      const updatedExercisesAfterRemove = workout5.exercises.filter(\n        exercise => (exercise.id || exercise.tempId) !== exId5\n      );\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [wId5]: {\n                ...workout5,\n                exercises: updatedExercisesAfterRemove\n              }\n            }\n          }\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const { workoutId: workoutIdAddSet, exerciseId, newSet } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.selectedProgramId]: {\n            ...state.programs[state.selectedProgramId],\n            workouts: {\n              ...state.programs[state.selectedProgramId].workouts,\n              [workoutIdAddSet]: {\n                ...state.programs[state.selectedProgramId].workouts[\n                  workoutIdAddSet\n                ],\n                exercises: state.programs[state.selectedProgramId].workouts[\n                  workoutIdAddSet\n                ].exercises.map(exercise =>\n                  exerciseUtils.getExerciseId(exercise) === exerciseId\n                    ? {\n                        ...exercise,\n                        sets: [...exercise.sets, newSet]\n                      }\n                    : exercise\n                )\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.selectedProgramId]: {\n            ...state.programs[state.selectedProgramId],\n            workouts: {\n              ...state.programs[state.selectedProgramId].workouts,\n              [wId2]: {\n                ...state.programs[state.selectedProgramId].workouts[wId2],\n                exercises: state.programs[state.selectedProgramId].workouts[\n                  wId2\n                ].exercises.map(exercise =>\n                  exerciseUtils.getExerciseId(exercise) === exId\n                    ? {\n                        ...exercise,\n                        sets: exercise.sets.map(set =>\n                          exerciseUtils.getSetId(set) ===\n                          exerciseUtils.getSetId(updatedSet)\n                            ? { ...set, ...updatedSet, isNew: false }\n                            : set\n                        )\n                      }\n                    : exercise\n                )\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.selectedProgramId]: {\n            ...state.programs[state.selectedProgramId],\n            workouts: {\n              ...state.programs[state.selectedProgramId].workouts,\n              [workoutIdDeleteSet]: {\n                ...state.programs[state.selectedProgramId].workouts[\n                  workoutIdDeleteSet\n                ],\n                exercises: state.programs[state.selectedProgramId].workouts[\n                  workoutIdDeleteSet\n                ].exercises.map(exercise => {\n                  if (\n                    exerciseUtils.getExerciseId(exercise) ===\n                    exerciseIdDeleteSet\n                  ) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.filter(\n                        set => exerciseUtils.getSetId(set) !== setIdDeleteSet\n                      )\n                    };\n                  }\n                  return exercise;\n                })\n              }\n            }\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}