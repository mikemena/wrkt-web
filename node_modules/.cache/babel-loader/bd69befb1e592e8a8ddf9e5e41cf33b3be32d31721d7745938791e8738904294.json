{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useCallback } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport { programReducer } from '../reducers/programReducer.js';\nimport { currentProgram } from '../reducers/initialState.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(programReducer, currentProgram);\n\n  // Program Actions\n\n  // Clear program state\n  const clearProgram = () => {\n    dispatch({\n      type: actionTypes.CLEAR_PROGRAM,\n      payload: currentProgram\n    });\n  };\n\n  // Memoized function to initialize state for creating a new program and avoid re-rendering\n  const initializeNewProgramState = useCallback(() => {\n    const newProgramId = uuidv4();\n    const newWorkoutId = uuidv4();\n    const newProgram = {\n      ...currentProgram.program,\n      user_id: 2,\n      id: newProgramId,\n      name: 'Program 1X',\n      program_duration: 0,\n      duration_unit: 'Days',\n      days_per_week: 0,\n      main_goal: 'Strength'\n    };\n    const newWorkout = {\n      id: newWorkoutId,\n      programId: newProgramId,\n      name: 'Workout 1',\n      exercises: []\n    };\n\n    // Dispatch to initialize the new program state\n\n    dispatch({\n      type: actionTypes.INITIALIZE_NEW_PROGRAM_STATE,\n      payload: {\n        program: newProgram,\n        workouts: [newWorkout],\n        activeWorkout: null\n      }\n    });\n  }, [dispatch]);\n\n  // Memoized function to initialize state for editing a program\n\n  const initializeEditProgramState = useCallback((program, workouts) => {\n    dispatch({\n      type: actionTypes.INITIALIZE_EDIT_PROGRAM_STATE,\n      payload: {\n        program,\n        workouts,\n        activeWorkout: workouts.length > 0 ? workouts[0].id : null\n      }\n    });\n  }, [dispatch]);\n\n  // Function to update a single field in the program\n\n  const updateProgramField = (field, value) => {\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_FIELD,\n      payload: {\n        [field]: value\n      }\n    });\n  };\n\n  // Save new program to backend\n\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.workout.workouts.map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  // Update program in backend\n\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_DATABASE,\n        // Use the action for database updates\n        payload: savedProgram // Entire updated program object from response\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  // Validate program data structure\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  // Add new program details\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  // Delete a program\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  // Set active workout by ID\n\n  const setActiveWorkout = workoutId => {\n    // Always set the workoutId passed as the active one\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: {\n        activeWorkout: workoutId\n      }\n    });\n  };\n\n  // const setActiveWorkout = workoutId => {\n  //   if (state.workout.activeWorkout === workoutId) {\n  //     // If the workout is already active, we clear it\n  //     dispatch({\n  //       type: actionTypes.SET_ACTIVE_WORKOUT,\n  //       payload: { activeWorkout: null } // Clear active workout\n  //     });\n  //   } else {\n  //     // If the workout is not active, we set it\n  //     dispatch({\n  //       type: actionTypes.SET_ACTIVE_WORKOUT,\n  //       payload: { activeWorkout: workoutId } // Set new active workout\n  //     });\n  //   }\n  // };\n\n  // Add a new workout to the program\n\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      programId: programId,\n      name: 'Workout',\n      exercises: []\n    };\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n\n  // Function to update a single field in the program\n\n  const updateWorkoutField = (field, value) => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT_FIELD,\n      payload: {\n        [field]: value\n      } // Field and value as key-value pair\n    });\n  };\n\n  // Update existing workout\n\n  const updateWorkout = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  // Delete a workout by ID\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: {\n        workoutId\n      }\n    });\n  };\n\n  // Exercise Actions\n\n  // Add exercises to a workout\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      id: uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      muscle: ex.muscle,\n      equipment: ex.equipment,\n      order: ex.order || null,\n      sets: ex.sets || []\n    }));\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n\n  // Remove an exercise from a workout\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n\n  // Toggle exercise selection within a workout\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    // Directly access the activeWorkout ID\n\n    const activeWorkoutId = state.workout.activeWorkout;\n    if (!activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    // Find the active workout using the ID\n    const workout = state.workout.workouts.find(workout => workout.id === activeWorkoutId);\n    if (!workout) {\n      console.error('Active workout not found');\n      return;\n    }\n\n    // Check if the exercise already exists in the workout's exercises array\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: {\n          workoutId: activeWorkoutId,\n          exerciseId\n        }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.ADD_EXERCISE,\n        payload: {\n          workoutId: activeWorkoutId,\n          exercise: [exerciseData]\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  // Add a new set to an exercise\n  const addSet = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n\n  // Update an existing set within an exercise\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n\n  // Remove a set from an exercise\n  const removeSet = (workoutId, exerciseId, setId) => {\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        setId\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      updateProgramField,\n      initializeNewProgramState,\n      initializeEditProgramState,\n      addProgram,\n      updateProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkoutField,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearProgram\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"xJcQKkjDHxNe/9O+N4VGdyAvSLk=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","useCallback","actionTypes","programReducer","currentProgram","v4","uuidv4","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","clearProgram","type","CLEAR_PROGRAM","payload","initializeNewProgramState","newProgramId","newWorkoutId","newProgram","program","user_id","id","name","program_duration","duration_unit","days_per_week","main_goal","newWorkout","programId","exercises","INITIALIZE_NEW_PROGRAM_STATE","workouts","activeWorkout","initializeEditProgramState","INITIALIZE_EDIT_PROGRAM_STATE","length","updateProgramField","field","value","UPDATE_PROGRAM_FIELD","saveProgram","workout","map","order","exercise","catalog_exercise_id","sets","set","index","reps","weight","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","console","error","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","UPDATE_PROGRAM_DATABASE","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","addWorkout","ADD_WORKOUT","updateWorkoutField","UPDATE_WORKOUT_FIELD","updateWorkout","updatedWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","ex","muscle","equipment","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","activeWorkoutId","find","exerciseExists","some","addSet","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","REMOVE_SET","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer, useCallback } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport { programReducer } from '../reducers/programReducer.js';\nimport { currentProgram } from '../reducers/initialState.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(programReducer, currentProgram);\n\n  // Program Actions\n\n  // Clear program state\n  const clearProgram = () => {\n    dispatch({\n      type: actionTypes.CLEAR_PROGRAM,\n      payload: currentProgram\n    });\n  };\n\n  // Memoized function to initialize state for creating a new program and avoid re-rendering\n  const initializeNewProgramState = useCallback(() => {\n    const newProgramId = uuidv4();\n    const newWorkoutId = uuidv4();\n\n    const newProgram = {\n      ...currentProgram.program,\n      user_id: 2,\n      id: newProgramId,\n      name: 'Program 1X',\n      program_duration: 0,\n      duration_unit: 'Days',\n      days_per_week: 0,\n      main_goal: 'Strength'\n    };\n\n    const newWorkout = {\n      id: newWorkoutId,\n      programId: newProgramId,\n      name: 'Workout 1',\n      exercises: []\n    };\n\n    // Dispatch to initialize the new program state\n\n    dispatch({\n      type: actionTypes.INITIALIZE_NEW_PROGRAM_STATE,\n      payload: {\n        program: newProgram,\n        workouts: [newWorkout],\n        activeWorkout: null\n      }\n    });\n  }, [dispatch]);\n\n  // Memoized function to initialize state for editing a program\n\n  const initializeEditProgramState = useCallback(\n    (program, workouts) => {\n      dispatch({\n        type: actionTypes.INITIALIZE_EDIT_PROGRAM_STATE,\n        payload: {\n          program,\n          workouts,\n          activeWorkout: workouts.length > 0 ? workouts[0].id : null\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  // Function to update a single field in the program\n\n  const updateProgramField = (field, value) => {\n    dispatch({\n      type: actionTypes.UPDATE_PROGRAM_FIELD,\n      payload: { [field]: value }\n    });\n  };\n\n  // Save new program to backend\n\n  const saveProgram = async () => {\n    const newProgram = {\n      ...state.program,\n      workouts: state.workout.workouts.map(workout => ({\n        id: workout.id,\n        name: workout.name,\n        order: workout.order || 1,\n        exercises: workout.exercises.map(exercise => ({\n          catalog_exercise_id: exercise.catalog_exercise_id || exercise.id,\n          order: exercise.order || 1,\n          sets: exercise.sets.map((set, index) => ({\n            reps: set.reps,\n            weight: set.weight,\n            order: set.order || index + 1\n          }))\n        }))\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  // Update program in backend\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n\n    try {\n      validateProgramData(updatedProgram);\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_DATABASE, // Use the action for database updates\n        payload: savedProgram // Entire updated program object from response\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  // Validate program data structure\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  // Add new program details\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  // Delete a program\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  // Set active workout by ID\n\n  const setActiveWorkout = workoutId => {\n    // Always set the workoutId passed as the active one\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: { activeWorkout: workoutId }\n    });\n  };\n\n  // const setActiveWorkout = workoutId => {\n  //   if (state.workout.activeWorkout === workoutId) {\n  //     // If the workout is already active, we clear it\n  //     dispatch({\n  //       type: actionTypes.SET_ACTIVE_WORKOUT,\n  //       payload: { activeWorkout: null } // Clear active workout\n  //     });\n  //   } else {\n  //     // If the workout is not active, we set it\n  //     dispatch({\n  //       type: actionTypes.SET_ACTIVE_WORKOUT,\n  //       payload: { activeWorkout: workoutId } // Set new active workout\n  //     });\n  //   }\n  // };\n\n  // Add a new workout to the program\n\n  const addWorkout = programId => {\n    const newWorkout = {\n      id: uuidv4(),\n      programId: programId,\n      name: 'Workout',\n      exercises: []\n    };\n\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: newWorkout\n    });\n  };\n\n  // Function to update a single field in the program\n\n  const updateWorkoutField = (field, value) => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT_FIELD,\n      payload: { [field]: value } // Field and value as key-value pair\n    });\n  };\n\n  // Update existing workout\n\n  const updateWorkout = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  // Delete a workout by ID\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: { workoutId }\n    });\n  };\n\n  // Exercise Actions\n\n  // Add exercises to a workout\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => ({\n      ...ex,\n      id: uuidv4(),\n      catalog_exercise_id: ex.catalog_exercise_id || ex.id,\n      muscle: ex.muscle,\n      equipment: ex.equipment,\n      order: ex.order || null,\n      sets: ex.sets || []\n    }));\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  // Remove an exercise from a workout\n  const removeExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  // Toggle exercise selection within a workout\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    // Directly access the activeWorkout ID\n\n    const activeWorkoutId = state.workout.activeWorkout;\n\n    if (!activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    // Find the active workout using the ID\n    const workout = state.workout.workouts.find(\n      workout => workout.id === activeWorkoutId\n    );\n\n    if (!workout) {\n      console.error('Active workout not found');\n      return;\n    }\n\n    // Check if the exercise already exists in the workout's exercises array\n    const exerciseExists = workout.exercises.some(ex => ex.id === exerciseId);\n\n    if (exerciseExists) {\n      // If the exercise exists, remove it\n      dispatch({\n        type: actionTypes.REMOVE_EXERCISE,\n        payload: { workoutId: activeWorkoutId, exerciseId }\n      });\n    } else {\n      // If the exercise doesn't exist, add it\n      dispatch({\n        type: actionTypes.ADD_EXERCISE,\n        payload: {\n          workoutId: activeWorkoutId,\n          exercise: [exerciseData]\n        }\n      });\n    }\n  };\n\n  // Set Actions\n\n  // Add a new set to an exercise\n  const addSet = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  // Update an existing set within an exercise\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  // Remove a set from an exercise\n  const removeSet = (workoutId, exerciseId, setId) => {\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: { workoutId, exerciseId, setId }\n    });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        updateProgramField,\n        initializeNewProgramState,\n        initializeEditProgramState,\n        addProgram,\n        updateProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkoutField,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearProgram\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}