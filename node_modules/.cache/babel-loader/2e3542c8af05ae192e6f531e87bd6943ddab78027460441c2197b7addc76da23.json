{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setActiveElement = (type, id) => {\n    dispatch({\n      type: actionTypes.SET_ACTIVE_ELEMENT,\n      payload: {\n        type,\n        id\n      }\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: (state.exercises[workout.id] || []).map(exercise => {\n          // Merge sets from both exercise and state.sets\n          const mergedSets = [...(exercise.sets || []), ...(state.sets[exercise.id] || [])];\n\n          // Ensure no duplicate sets by filtering unique set IDs\n          const uniqueSets = mergedSets.reduce((acc, set) => {\n            if (!acc.some(s => s.id === set.id)) {\n              acc.push(set);\n            }\n            return acc;\n          }, []);\n          return {\n            ...exercise,\n            sets: uniqueSets\n          };\n        }),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises\n      }\n    });\n  };\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(ex => ex.id === exerciseId);\n    const initialState = (exercise === null || exercise === void 0 ? void 0 : exercise.sets) || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    if (combinedSets.length > 1) {\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: {\n          workoutId,\n          exerciseId,\n          setId\n        }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      addProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveElement,\n      addExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setActiveElement","type","id","SET_ACTIVE_ELEMENT","payload","saveProgram","programId","Object","keys","programs","newProgram","workouts","values","map","workout","exercises","exercise","mergedSets","sets","uniqueSets","reduce","acc","set","some","s","push","order","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","console","error","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","addWorkout","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","workoutId","DELETE_WORKOUT","addExercise","ADD_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","weight","reps","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","find","ex","additionalSets","combinedSets","length","DELETE_SET","log","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setActiveElement = (type, id) => {\n    dispatch({\n      type: actionTypes.SET_ACTIVE_ELEMENT,\n      payload: { type, id }\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: (state.exercises[workout.id] || []).map(exercise => {\n          // Merge sets from both exercise and state.sets\n          const mergedSets = [\n            ...(exercise.sets || []),\n            ...(state.sets[exercise.id] || [])\n          ];\n\n          // Ensure no duplicate sets by filtering unique set IDs\n          const uniqueSets = mergedSets.reduce((acc, set) => {\n            if (!acc.some(s => s.id === set.id)) {\n              acc.push(set);\n            }\n            return acc;\n          }, []);\n\n          return {\n            ...exercise,\n            sets: uniqueSets\n          };\n        }),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises }\n    });\n  };\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(\n      ex => ex.id === exerciseId\n    );\n    const initialState = exercise?.sets || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n\n    if (combinedSets.length > 1) {\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: { workoutId, exerciseId, setId }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        addProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveElement,\n        addExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,MAAMC,cAAc,gBAAGP,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMQ,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACE,WAAW,EAAEC,YAAY,CAAC;EAE/D,MAAMS,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IACrCH,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACc,kBAAkB;MACpCC,OAAO,EAAE;QAAEH,IAAI;QAAEC;MAAG;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACV,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMC,UAAU,GAAG;MACjB,GAAGZ,KAAK,CAACW,QAAQ,CAACH,SAAS,CAAC;MAC5BK,QAAQ,EAAEJ,MAAM,CAACK,MAAM,CAACd,KAAK,CAACa,QAAQ,CAAC,CAACE,GAAG,CAACC,OAAO,KAAK;QACtD,GAAGA,OAAO;QACVC,SAAS,EAAE,CAACjB,KAAK,CAACiB,SAAS,CAACD,OAAO,CAACZ,EAAE,CAAC,IAAI,EAAE,EAAEW,GAAG,CAACG,QAAQ,IAAI;UAC7D;UACA,MAAMC,UAAU,GAAG,CACjB,IAAID,QAAQ,CAACE,IAAI,IAAI,EAAE,CAAC,EACxB,IAAIpB,KAAK,CAACoB,IAAI,CAACF,QAAQ,CAACd,EAAE,CAAC,IAAI,EAAE,CAAC,CACnC;;UAED;UACA,MAAMiB,UAAU,GAAGF,UAAU,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;YACjD,IAAI,CAACD,GAAG,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKoB,GAAG,CAACpB,EAAE,CAAC,EAAE;cACnCmB,GAAG,CAACI,IAAI,CAACH,GAAG,CAAC;YACf;YACA,OAAOD,GAAG;UACZ,CAAC,EAAE,EAAE,CAAC;UAEN,OAAO;YACL,GAAGL,QAAQ;YACXE,IAAI,EAAEC;UACR,CAAC;QACH,CAAC,CAAC;QACFO,KAAK,EAAEZ,OAAO,CAACY,KAAK,IAAI;MAC1B,CAAC,CAAC;IACJ,CAAC;IAED3B,QAAQ,CAAC;MAAEE,IAAI,EAAEZ,WAAW,CAACsC;IAAmB,CAAC,CAAC;IAClD,IAAI;MACFC,mBAAmB,CAAClB,UAAU,CAAC,CAAC,CAAC;MACjC,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACzB,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACmB,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QACzCC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEH,SAAS,CAAC,CAAC,CAAC;QACnD,MAAM,IAAII,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,YAAY,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAC1C5C,QAAQ,CAAC;QACPE,IAAI,EAAEZ,WAAW,CAACuD,oBAAoB;QACtCxC,OAAO,EAAEsC;MACX,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CzC,QAAQ,CAAC;QACPE,IAAI,EAAEZ,WAAW,CAACwD,oBAAoB;QACtCzC,OAAO,EAAEoC,KAAK,CAACM;MACjB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMlB,mBAAmB,GAAGmB,WAAW,IAAI;IACzC,IAAI,CAACA,WAAW,CAACpC,QAAQ,IAAI,CAACqC,KAAK,CAACC,OAAO,CAACF,WAAW,CAACpC,QAAQ,CAAC,EAAE;MACjE,MAAM,IAAI8B,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACAM,WAAW,CAACpC,QAAQ,CAACuC,OAAO,CAACpC,OAAO,IAAI;MACtC,IAAI,CAACA,OAAO,CAACC,SAAS,IAAI,CAACiC,KAAK,CAACC,OAAO,CAACnC,OAAO,CAACC,SAAS,CAAC,EAAE;QAC3D,MAAM,IAAI0B,KAAK,CAAC,+BAA+B,CAAC;MAClD;MACA3B,OAAO,CAACC,SAAS,CAACmC,OAAO,CAAClC,QAAQ,IAAI;QACpC,IAAI,CAACA,QAAQ,CAACE,IAAI,IAAI,CAAC8B,KAAK,CAACC,OAAO,CAACjC,QAAQ,CAACE,IAAI,CAAC,EAAE;UACnD,MAAM,IAAIuB,KAAK,CAAC,0BAA0B,CAAC;QAC7C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMU,UAAU,GAAGC,OAAO,IAAI;IAC5BrD,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACgE,WAAW;MAC7BjD,OAAO,EAAEgD;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,aAAa,GAAG,MAAMhD,SAAS,IAAI;IACvC,IAAI;MACF,MAAMuB,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCxB,SAAU,EAAC,EACjD;QACEyB,MAAM,EAAE;MACV,CACF,CAAC;MAED,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEH,SAAS,CAAC;QACnD,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACA1C,QAAQ,CAAC;QACPE,IAAI,EAAEZ,WAAW,CAACkE,cAAc;QAChCnD,OAAO,EAAE;UAAEE;QAAU;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAMgB,UAAU,GAAG1C,OAAO,IAAI;IAC5Bf,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACoE,WAAW;MAC7BrD,OAAO,EAAEU;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAM4C,aAAa,GAAG5C,OAAO,IAAI;IAC/Bf,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACsE,cAAc;MAChCvD,OAAO,EAAEU;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAM8C,aAAa,GAAGC,SAAS,IAAI;IACjC9D,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACyE,cAAc;MAChC1D,OAAO,EAAEyD;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,WAAW,GAAGA,CAACF,SAAS,EAAE9C,SAAS,KAAK;IAC5ChB,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAAC2E,YAAY;MAC9B5D,OAAO,EAAE;QAAEyD,SAAS;QAAE9C;MAAU;IAClC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMkD,cAAc,GAAGA,CAACJ,SAAS,EAAEK,UAAU,KAAK;IAChDnE,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAAC8E,eAAe;MACjC/D,OAAO,EAAE;QAAEyD,SAAS;QAAEK;MAAW;IACnC,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,MAAM,GAAGA,CAACP,SAAS,EAAEK,UAAU,EAAEG,MAAM,GAAG,EAAE,EAAEC,IAAI,GAAG,EAAE,KAAK;IAChEvE,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACkF,OAAO;MACzBnE,OAAO,EAAE;QAAEyD,SAAS;QAAEK,UAAU;QAAEG,MAAM;QAAEC;MAAK;IACjD,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,SAAS,GAAGA,CAACX,SAAS,EAAEK,UAAU,EAAEO,UAAU,KAAK;IACvD1E,QAAQ,CAAC;MACPE,IAAI,EAAEZ,WAAW,CAACqF,UAAU;MAC5BtE,OAAO,EAAE;QAAEyD,SAAS;QAAEK,UAAU;QAAEO;MAAW;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,SAAS,GAAGA,CAACd,SAAS,EAAEK,UAAU,EAAEU,KAAK,KAAK;IAClD,MAAM5D,QAAQ,GAAGlB,KAAK,CAACiB,SAAS,CAAC8C,SAAS,CAAC,CAACgB,IAAI,CAC9CC,EAAE,IAAIA,EAAE,CAAC5E,EAAE,KAAKgE,UAClB,CAAC;IACD,MAAM3E,YAAY,GAAG,CAAAyB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI,KAAI,EAAE;IACzC,MAAM6D,cAAc,GAAGjF,KAAK,CAACoB,IAAI,CAACgD,UAAU,CAAC,IAAI,EAAE;IACnD,MAAMc,YAAY,GAAG,CAAC,GAAGzF,YAAY,EAAE,GAAGwF,cAAc,CAAC;IAEzD,IAAIC,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3BlF,QAAQ,CAAC;QACPE,IAAI,EAAEZ,WAAW,CAAC6F,UAAU;QAC5B9E,OAAO,EAAE;UAAEyD,SAAS;UAAEK,UAAU;UAAEU;QAAM;MAC1C,CAAC,CAAC;IACJ,CAAC,MAAM;MACLrC,OAAO,CAAC4C,GAAG,CAAC,uCAAuC,CAAC;IACtD;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBrF,QAAQ,CAAC;MAAEE,IAAI,EAAEZ,WAAW,CAACgG;IAAY,CAAC,CAAC;EAC7C,CAAC;EAED,oBACE5F,OAAA,CAACC,cAAc,CAAC4F,QAAQ;IACtBC,KAAK,EAAE;MACLzF,KAAK;MACLC,QAAQ;MACRyF,aAAa,EAAE1F,KAAK,CAAC0F,aAAa;MAClCrC,UAAU;MACVG,aAAa;MACbE,UAAU;MACVE,aAAa;MACbE,aAAa;MACb5D,gBAAgB;MAChB+D,WAAW;MACXE,cAAc;MACdG,MAAM;MACNI,SAAS;MACTG,SAAS;MACTtE,WAAW;MACX+E;IACF,CAAE;IAAAxF,QAAA,EAEDA;EAAQ;IAAA6F,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAAC/F,EAAA,CAjNWF,eAAe;AAAAkG,EAAA,GAAflG,eAAe;AAAA,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}