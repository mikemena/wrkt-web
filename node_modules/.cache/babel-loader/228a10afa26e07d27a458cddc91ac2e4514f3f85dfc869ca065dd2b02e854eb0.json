{"ast":null,"code":"import { actionTypes } from '../actions/actionTypes';\nimport { currentProgram } from './initialState';\nfunction programReducer(state = currentProgram, action) {\n  switch (action.type) {\n    case actionTypes.INITIALIZE_NEW_PROGRAM_STATE:\n      return {\n        ...state,\n        program: action.payload.program,\n        workout: {\n          workouts: action.payload.workouts,\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n    case actionTypes.INITIALIZE_EDIT_PROGRAM_STATE:\n      return {\n        ...state,\n        program: action.payload.program,\n        workout: {\n          workouts: action.payload.workouts,\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n    case actionTypes.UPDATE_PROGRAM:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case actionTypes.UPDATE_PROGRAM_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case actionTypes.CLEAR_PROGRAM:\n      return {\n        ...state,\n        ...action.payload\n      };\n\n    // workout reducers\n\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      return {\n        ...state,\n        activeWorkout: action.payload\n      };\n    case actionTypes.ADD_WORKOUT:\n      {\n        const newWorkout = standardizeWorkout(action.payload);\n        if (!newWorkout) {\n          console.error('Failed to standardize workout:', action.payload);\n          return state;\n        }\n        return {\n          ...state,\n          workouts: [...state.workouts, newWorkout]\n        };\n      }\n    case 'UPDATE_NEW_WORKOUT':\n      return {\n        ...state,\n        workouts: state.workouts.map(w => w.id === action.payload.id ? action.payload : w)\n      };\n    case 'UPDATE_SELECTED_WORKOUT':\n      return {\n        ...state,\n        selectedWorkouts: state.selectedWorkouts.map(w => w.id === action.payload.id ? action.payload : w)\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      {\n        const updatedWorkout = action.payload;\n        console.log('UPDATE_WORKOUT action received. Payload:', updatedWorkout);\n        const newState = {\n          ...state,\n          workouts: state.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n        };\n        console.log('New state after UPDATE_WORKOUT:', newState);\n        return newState;\n      }\n    case actionTypes.DELETE_WORKOUT:\n      {\n        const workoutId = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.filter(workout => workout.id !== workoutId),\n          activeWorkout: state.activeWorkout === workoutId ? null : state.activeWorkout\n        };\n      }\n    case actionTypes.ADD_EXERCISE:\n      {\n        const {\n          workoutId,\n          exercises\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: [...workout.exercises, ...exercises.map(ex => ({\n                  ...ex,\n                  id: ex.id || uuidv4()\n                }))]\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.REMOVE_EXERCISE:\n      {\n        const {\n          workoutId,\n          exerciseId\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.filter(ex => ex.id !== exerciseId && ex.catalog_exercise_id !== exerciseId)\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.ADD_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          newSet\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, {\n                        ...newSet,\n                        id: uuidv4()\n                      }]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n                        ...set,\n                        ...updatedSet\n                      } : set)\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.REMOVE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          setId\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.filter(set => set.id !== setId)\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["actionTypes","currentProgram","programReducer","state","action","type","INITIALIZE_NEW_PROGRAM_STATE","program","payload","workout","workouts","activeWorkout","INITIALIZE_EDIT_PROGRAM_STATE","UPDATE_PROGRAM","UPDATE_PROGRAM_SUCCESS","CLEAR_PROGRAM","SET_ACTIVE_WORKOUT","ADD_WORKOUT","newWorkout","standardizeWorkout","console","error","map","w","id","selectedWorkouts","UPDATE_WORKOUT","updatedWorkout","log","newState","DELETE_WORKOUT","workoutId","filter","ADD_EXERCISE","exercises","ex","uuidv4","REMOVE_EXERCISE","exerciseId","catalog_exercise_id","ADD_SET","newSet","exercise","sets","UPDATE_SET","updatedSet","set","REMOVE_SET","setId"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["import { actionTypes } from '../actions/actionTypes';\nimport { currentProgram } from './initialState';\n\nfunction programReducer(state = currentProgram, action) {\n  switch (action.type) {\n    case actionTypes.INITIALIZE_NEW_PROGRAM_STATE:\n      return {\n        ...state,\n        program: action.payload.program,\n        workout: {\n          workouts: action.payload.workouts,\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n\n    case actionTypes.INITIALIZE_EDIT_PROGRAM_STATE:\n      return {\n        ...state,\n        program: action.payload.program,\n        workout: {\n          workouts: action.payload.workouts,\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n\n    case actionTypes.UPDATE_PROGRAM:\n      return {\n        ...state,\n        ...action.payload\n      };\n\n    case actionTypes.UPDATE_PROGRAM_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n\n    case actionTypes.CLEAR_PROGRAM:\n      return {\n        ...state,\n        ...action.payload\n      };\n\n    // workout reducers\n\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      return {\n        ...state,\n        activeWorkout: action.payload\n      };\n\n    case actionTypes.ADD_WORKOUT: {\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n\n      return {\n        ...state,\n        workouts: [...state.workouts, newWorkout]\n      };\n    }\n    case 'UPDATE_NEW_WORKOUT':\n      return {\n        ...state,\n        workouts: state.workouts.map(w =>\n          w.id === action.payload.id ? action.payload : w\n        )\n      };\n    case 'UPDATE_SELECTED_WORKOUT':\n      return {\n        ...state,\n        selectedWorkouts: state.selectedWorkouts.map(w =>\n          w.id === action.payload.id ? action.payload : w\n        )\n      };\n\n    case actionTypes.UPDATE_WORKOUT: {\n      const updatedWorkout = action.payload;\n      console.log('UPDATE_WORKOUT action received. Payload:', updatedWorkout);\n      const newState = {\n        ...state,\n        workouts: state.workouts.map(workout =>\n          workout.id === updatedWorkout.id ? updatedWorkout : workout\n        )\n      };\n      console.log('New state after UPDATE_WORKOUT:', newState);\n      return newState;\n    }\n\n    case actionTypes.DELETE_WORKOUT: {\n      const workoutId = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.filter(workout => workout.id !== workoutId),\n        activeWorkout:\n          state.activeWorkout === workoutId ? null : state.activeWorkout\n      };\n    }\n\n    case actionTypes.ADD_EXERCISE: {\n      const { workoutId, exercises } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: [\n                ...workout.exercises,\n                ...exercises.map(ex => ({\n                  ...ex,\n                  id: ex.id || uuidv4()\n                }))\n              ]\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.REMOVE_EXERCISE: {\n      const { workoutId, exerciseId } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.filter(\n                ex =>\n                  ex.id !== exerciseId && ex.catalog_exercise_id !== exerciseId\n              )\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.ADD_SET: {\n      const { workoutId, exerciseId, newSet } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: [...exercise.sets, { ...newSet, id: uuidv4() }]\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { workoutId, exerciseId, updatedSet } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: exercise.sets.map(set =>\n                      set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n                    )\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.REMOVE_SET: {\n      const { workoutId, exerciseId, setId } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: exercise.sets.filter(set => set.id !== setId)\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}