{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async program => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      const method = program.id ? 'PUT' : 'POST';\n      const url = program.id ? `http://localhost:9025/api/programs/${program.id}` : 'http://localhost:9025/api/programs';\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(program)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      // console.log('Deleting program:', programId);\n\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      // console.log('Dispatching DELETE_PROGRAM for program ID:', programId);\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    // console.log(\n    //   'Adding exercise with workoutId:',\n    //   workoutId,\n    //   'and exercises:',\n    //   exercises\n    // );\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises\n      }\n    });\n  };\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    var _state$exercises$work;\n    console.log('Adding set for workout:', workoutId, 'exercise:', exerciseId);\n\n    // Check if the workout exists\n    if (!state.workouts[workoutId]) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    // Check if the exercise exists\n    const exerciseExists = (_state$exercises$work = state.exercises[workoutId]) === null || _state$exercises$work === void 0 ? void 0 : _state$exercises$work.some(ex => ex.id === exerciseId);\n    if (!exerciseExists) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    // console.log('Dispatching UPDATE_SET:', {\n    //   workoutId,\n    //   exerciseId,\n    //   updatedSet\n    // });\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(ex => ex.id === exerciseId);\n    const initialState = (exercise === null || exercise === void 0 ? void 0 : exercise.sets) || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    // console.log('combinedSets:', combinedSets);\n\n    // const exerciseSets = state.sets[exerciseId];\n    // console.log('exerciseSets in deleteSet:', exerciseSets);\n    // console.log('combinedSets length:', combinedSets.length);\n\n    if (combinedSets.length > 1) {\n      // console.log('Dispatching DELETE_SET:', { workoutId, exerciseId, setId });\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: {\n          workoutId,\n          exerciseId,\n          setId\n        }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      addProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setActiveWorkout","workoutId","console","error","type","SET_ACTIVE_WORKOUT","payload","saveProgram","program","SAVE_PROGRAM_START","method","id","url","response","fetch","headers","body","JSON","stringify","ok","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","validateProgramData","programData","workouts","Array","isArray","forEach","workout","exercises","exercise","sets","addProgram","details","ADD_PROGRAM","deleteProgram","programId","errorText","text","DELETE_PROGRAM","addWorkout","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","ADD_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","weight","reps","_state$exercises$work","log","exerciseExists","some","ex","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","find","additionalSets","combinedSets","length","DELETE_SET","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async program => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n\n    try {\n      const method = program.id ? 'PUT' : 'POST';\n      const url = program.id\n        ? `http://localhost:9025/api/programs/${program.id}`\n        : 'http://localhost:9025/api/programs';\n\n      const response = await fetch(url, {\n        method: method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(program)\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      // console.log('Deleting program:', programId);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      // console.log('Dispatching DELETE_PROGRAM for program ID:', programId);\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const updateWorkout = workout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    // console.log(\n    //   'Adding exercise with workoutId:',\n    //   workoutId,\n    //   'and exercises:',\n    //   exercises\n    // );\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises }\n    });\n  };\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set for workout:', workoutId, 'exercise:', exerciseId);\n\n    // Check if the workout exists\n    if (!state.workouts[workoutId]) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    // Check if the exercise exists\n    const exerciseExists = state.exercises[workoutId]?.some(\n      ex => ex.id === exerciseId\n    );\n    if (!exerciseExists) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    // console.log('Dispatching UPDATE_SET:', {\n    //   workoutId,\n    //   exerciseId,\n    //   updatedSet\n    // });\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(\n      ex => ex.id === exerciseId\n    );\n    const initialState = exercise?.sets || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    // console.log('combinedSets:', combinedSets);\n\n    // const exerciseSets = state.sets[exerciseId];\n    // console.log('exerciseSets in deleteSet:', exerciseSets);\n    // console.log('combinedSets length:', combinedSets.length);\n\n    if (combinedSets.length > 1) {\n      // console.log('Dispatching DELETE_SET:', { workoutId, exerciseId, setId });\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: { workoutId, exerciseId, setId }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        addProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}