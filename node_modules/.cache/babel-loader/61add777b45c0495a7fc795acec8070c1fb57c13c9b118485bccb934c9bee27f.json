{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { createNewWorkout, createNewExercise, createNewSet } from '../utils/programStructures';\nimport exerciseUtils from '../utils/exercise.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatchBase] = useReducer(rootReducer, initialState);\n\n  // Program Actions\n\n  const dispatch = useMemo(() => dispatchBase, []);\n  const createInitialProgram = useCallback(() => {\n    const newProgramId = uuidv4();\n    const newWorkoutId = uuidv4();\n    return {\n      id: newProgramId,\n      tempId: newProgramId,\n      name: 'New Program',\n      program_duration: 0,\n      duration_unit: 'Weeks',\n      days_per_week: 0,\n      main_goal: '',\n      user_id: null,\n      isNew: true,\n      workouts: {\n        [newWorkoutId]: {\n          id: newWorkoutId,\n          tempId: newWorkoutId,\n          name: 'Workout 1',\n          programId: newProgramId,\n          exercises: [],\n          order: 1,\n          isNew: true\n        }\n      }\n    };\n  }, []);\n  const prepareProgramForSave = program => {\n    const {\n      tempId,\n      isNew,\n      ...programToSave\n    } = program;\n    return {\n      ...programToSave,\n      workouts: Object.values(program.workouts).map(prepareWorkoutForSave)\n    };\n  };\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: program\n    });\n  };\n  const saveProgram = async () => {\n    const programToSave = prepareProgramForSave(state.programs[state.selectedProgramId]);\n    console.log('Saving program with payload:', programToSave);\n    dispatch({\n      type: 'SAVE_PROGRAM_START'\n    });\n    try {\n      validateProgramData(programToSave);\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programToSave)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'SAVE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: 'SAVE_PROGRAM_START'\n    });\n    try {\n      const programToUpdate = prepareProgramForSave(updatedProgram);\n      validateProgramData(programToUpdate);\n      console.log('Sending updated program to server:', programToUpdate);\n      const response = await fetch(`http://localhost:9025/api/programs/${programToUpdate.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programToUpdate)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'UPDATE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const prepareWorkoutForSave = workout => {\n    const {\n      tempId,\n      isNew,\n      ...workoutToSave\n    } = workout;\n    return {\n      ...workoutToSave,\n      exercises: workout.exercises.map(prepareExerciseForSave)\n    };\n  };\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order = Object.keys(state.programs[programId].workouts).length + 1;\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n  };\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: {\n      programId,\n      workoutId\n    }\n  });\n\n  // Exercise Actions\n\n  const prepareExerciseForSave = exercise => {\n    const {\n      tempId,\n      isNew,\n      ...exerciseToSave\n    } = exercise;\n    return {\n      ...exerciseToSave,\n      sets: exercise.sets.map(prepareSetForSave)\n    };\n  };\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const prepareSetForSave = set => {\n    const {\n      tempId,\n      isNew,\n      ...setToSave\n    } = set;\n    return setToSave;\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set for workoutId:', workoutId, 'exerciseId:', exerciseId);\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const newSet = createNewSet();\n    newSet.weight = weight;\n    newSet.reps = reps;\n    newSet.order = exercise.sets.length + 1;\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        newSet\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const setExists = exercise.sets.some(set => set.id === setId || set.tempId === setId);\n    if (!setExists) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        setId\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      createInitialProgram,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"EqQ88e+DJjpbwm7VsHbp5/lsU1o=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","useCallback","v4","uuidv4","actionTypes","rootReducer","initialState","createNewWorkout","createNewExercise","createNewSet","exerciseUtils","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatchBase","dispatch","useMemo","createInitialProgram","newProgramId","newWorkoutId","id","tempId","name","program_duration","duration_unit","days_per_week","main_goal","user_id","isNew","workouts","programId","exercises","order","prepareProgramForSave","program","programToSave","Object","values","map","prepareWorkoutForSave","setSelectedProgram","console","log","type","payload","saveProgram","programs","selectedProgramId","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","error","Error","savedProgram","json","message","updateProgram","updatedProgram","programToUpdate","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","programData","Array","isArray","forEach","workout","exercise","sets","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","workoutToSave","prepareExerciseForSave","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","addWorkout","newWorkout","keys","length","ADD_WORKOUT","updateWorkout","deleteWorkout","DELETE_WORKOUT","exerciseToSave","prepareSetForSave","addExercise","standardizedExercises","ex","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","activeWorkoutId","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","set","setToSave","addSet","weight","reps","find","getExerciseId","newSet","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","setExists","some","REMOVE_SET","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport {\n  createNewWorkout,\n  createNewExercise,\n  createNewSet\n} from '../utils/programStructures';\n\nimport exerciseUtils from '../utils/exercise.js';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatchBase] = useReducer(rootReducer, initialState);\n\n  // Program Actions\n\n  const dispatch = useMemo(() => dispatchBase, []);\n\n  const createInitialProgram = useCallback(() => {\n    const newProgramId = uuidv4();\n    const newWorkoutId = uuidv4();\n    return {\n      id: newProgramId,\n      tempId: newProgramId,\n      name: 'New Program',\n      program_duration: 0,\n      duration_unit: 'Weeks',\n      days_per_week: 0,\n      main_goal: '',\n      user_id: null,\n      isNew: true,\n      workouts: {\n        [newWorkoutId]: {\n          id: newWorkoutId,\n          tempId: newWorkoutId,\n          name: 'Workout 1',\n          programId: newProgramId,\n          exercises: [],\n          order: 1,\n          isNew: true\n        }\n      }\n    };\n  }, []);\n\n  const prepareProgramForSave = program => {\n    const { tempId, isNew, ...programToSave } = program;\n    return {\n      ...programToSave,\n      workouts: Object.values(program.workouts).map(prepareWorkoutForSave)\n    };\n  };\n\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: program\n    });\n  };\n\n  const saveProgram = async () => {\n    const programToSave = prepareProgramForSave(\n      state.programs[state.selectedProgramId]\n    );\n\n    console.log('Saving program with payload:', programToSave);\n\n    dispatch({ type: 'SAVE_PROGRAM_START' });\n    try {\n      validateProgramData(programToSave);\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(programToSave)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'SAVE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: 'SAVE_PROGRAM_START' });\n    try {\n      const programToUpdate = prepareProgramForSave(updatedProgram);\n      validateProgramData(programToUpdate);\n\n      console.log('Sending updated program to server:', programToUpdate);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programToUpdate.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(programToUpdate)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: 'UPDATE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const prepareWorkoutForSave = workout => {\n    const { tempId, isNew, ...workoutToSave } = workout;\n    return {\n      ...workoutToSave,\n      exercises: workout.exercises.map(prepareExerciseForSave)\n    };\n  };\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order =\n      Object.keys(state.programs[programId].workouts).length + 1;\n\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: { programId, workout: newWorkout }\n    });\n  };\n\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: { programId, workout: updatedWorkout }\n    });\n  };\n\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: { programId, workoutId }\n  });\n\n  // Exercise Actions\n\n  const prepareExerciseForSave = exercise => {\n    const { tempId, isNew, ...exerciseToSave } = exercise;\n    return {\n      ...exerciseToSave,\n      sets: exercise.sets.map(prepareSetForSave)\n    };\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const prepareSetForSave = set => {\n    const { tempId, isNew, ...setToSave } = set;\n    return setToSave;\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log(\n      'Adding set for workoutId:',\n      workoutId,\n      'exerciseId:',\n      exerciseId\n    );\n\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const newSet = createNewSet();\n    newSet.weight = weight;\n    newSet.reps = reps;\n    newSet.order = exercise.sets.length + 1;\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, newSet }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.programs[state.selectedProgramId].workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const setExists = exercise.sets.some(\n      set => set.id === setId || set.tempId === setId\n    );\n    if (!setExists) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.REMOVE_SET,\n      payload: { workoutId, exerciseId, setId }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        createInitialProgram,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}