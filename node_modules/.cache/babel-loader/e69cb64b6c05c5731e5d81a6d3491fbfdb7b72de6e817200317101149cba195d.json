{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { createNewExercise } from '../utils/programStructures';\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.ADD_WORKOUT:\n      const {\n        programIdForAddWorkout,\n        workoutForAddWorkout\n      } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForAddWorkout]: {\n            ...state.programs[programIdForAddWorkout],\n            workouts: {\n              ...state.programs[programIdForAddWorkout].workouts,\n              [workoutForAddWorkout.id]: workoutForAddWorkout\n            }\n          }\n        }\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      const {\n        programIdForUpdateWorkout,\n        workoutForUpdateWorkout\n      } = action.payload;\n      console.log('Updating workout in reducer:', workoutForUpdateWorkout);\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForUpdateWorkout]: {\n            ...state.programs[programIdForUpdateWorkout],\n            workouts: {\n              ...state.programs[programIdForUpdateWorkout].workouts,\n              [workoutForUpdateWorkout.id]: {\n                ...state.programs[programIdForUpdateWorkout].workouts[workoutForUpdateWorkout.id],\n                ...workoutForUpdateWorkout\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      const {\n        programIdForDeleteWorkout,\n        workoutIdForDeleteWorkout\n      } = action.payload;\n      if (!programIdForDeleteWorkout || !workoutIdForDeleteWorkout) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n      const {\n        [workoutIdForDeleteWorkout]: deletedWorkout,\n        ...remainingWorkouts\n      } = state.programs[programIdForDeleteWorkout].workouts;\n      const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n        ...workout,\n        order: index + 1\n      })).reduce((acc, workout) => {\n        acc[workout.id] = workout;\n        return acc;\n      }, {});\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForDeleteWorkout]: {\n            ...state.programs[programIdForDeleteWorkout],\n            workouts: reorderedWorkouts\n          }\n        }\n      };\n\n    // Exercise Reducers\n\n    // Exercise Reducers\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state.programs[state.activeProgramId].workouts[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.id || ex.tempId));\n      const newExercises = exercises.filter(ex => !existingExerciseIds.has(ex.id || ex.tempId));\n      const updatedExercisesAfterAdd = [...existingWorkout.exercises, ...newExercises.map(ex => createNewExercise(ex))];\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [workoutIdAddEx]: {\n                ...existingWorkout,\n                exercises: updatedExercisesAfterAdd\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const {\n        exerciseIdForToggle,\n        exerciseData\n      } = action.payload;\n      const activeWorkout = state.programs[state.activeProgramId].workouts[state.activeWorkoutId];\n      const existingExerciseIndex = activeWorkout.exercises.findIndex(ex => (ex.id || ex.tempId) === exerciseIdForToggle);\n      let updatedExercises;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedExercises = [...activeWorkout.exercises, createNewExercise({\n          ...exerciseData,\n          order: activeWorkout.exercises.length + 1,\n          selected: true\n        })];\n      } else {\n        // Exercise exists, remove it\n        updatedExercises = activeWorkout.exercises.filter((_, index) => index !== existingExerciseIndex);\n      }\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [state.activeWorkoutId]: {\n                ...activeWorkout,\n                exercises: updatedExercises\n              }\n            }\n          }\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state.programs[state.activeProgramId].workouts[wId5];\n      if (!workout5) return state;\n      const updatedExercisesAfterRemove = workout5.exercises.filter(exercise => (exercise.id || exercise.tempId) !== exId5);\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [wId5]: {\n                ...workout5,\n                exercises: updatedExercisesAfterRemove\n              }\n            }\n          }\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }]\n          } : exercise)\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercisesAfterSetUpdate = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercisesAfterSetUpdate\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(exercise => {\n        const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n        if (exerciseIdToCompare === exerciseIdDeleteSet) {\n          return {\n            ...exercise,\n            sets: exercise.sets.filter(set => set.id !== setIdDeleteSet)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","createNewExercise","workoutReducer","state","workouts","action","console","log","type","payload","ADD_WORKOUT","programIdForAddWorkout","workoutForAddWorkout","programs","id","UPDATE_WORKOUT","programIdForUpdateWorkout","workoutForUpdateWorkout","DELETE_WORKOUT","programIdForDeleteWorkout","workoutIdForDeleteWorkout","error","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","order","map","workout","index","reduce","acc","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingWorkout","activeProgramId","existingExerciseIds","Set","ex","tempId","newExercises","filter","has","updatedExercisesAfterAdd","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","exerciseData","activeWorkout","activeWorkoutId","existingExerciseIndex","findIndex","updatedExercises","length","selected","_","REMOVE_EXERCISE","wId5","exerciseId","exId5","workout5","updatedExercisesAfterRemove","exercise","ADD_SET","workoutIdAddSet","weight","reps","workoutToUpdate","getExerciseId","sets","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercisesAfterSetUpdate","set","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutDeleteSet","updatedExercisesDeleteSet","exerciseIdToCompare"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { createNewExercise } from '../utils/programStructures';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.ADD_WORKOUT:\n      const { programIdForAddWorkout, workoutForAddWorkout } = action.payload;\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForAddWorkout]: {\n            ...state.programs[programIdForAddWorkout],\n            workouts: {\n              ...state.programs[programIdForAddWorkout].workouts,\n              [workoutForAddWorkout.id]: workoutForAddWorkout\n            }\n          }\n        }\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      const { programIdForUpdateWorkout, workoutForUpdateWorkout } =\n        action.payload;\n      console.log('Updating workout in reducer:', workoutForUpdateWorkout);\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForUpdateWorkout]: {\n            ...state.programs[programIdForUpdateWorkout],\n            workouts: {\n              ...state.programs[programIdForUpdateWorkout].workouts,\n              [workoutForUpdateWorkout.id]: {\n                ...state.programs[programIdForUpdateWorkout].workouts[\n                  workoutForUpdateWorkout.id\n                ],\n                ...workoutForUpdateWorkout\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT:\n      const { programIdForDeleteWorkout, workoutIdForDeleteWorkout } =\n        action.payload;\n      if (!programIdForDeleteWorkout || !workoutIdForDeleteWorkout) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const {\n        [workoutIdForDeleteWorkout]: deletedWorkout,\n        ...remainingWorkouts\n      } = state.programs[programIdForDeleteWorkout].workouts;\n\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [programIdForDeleteWorkout]: {\n            ...state.programs[programIdForDeleteWorkout],\n            workouts: reorderedWorkouts\n          }\n        }\n      };\n\n    // Exercise Reducers\n\n    // Exercise Reducers\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout =\n        state.programs[state.activeProgramId].workouts[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.id || ex.tempId)\n      );\n      const newExercises = exercises.filter(\n        ex => !existingExerciseIds.has(ex.id || ex.tempId)\n      );\n\n      const updatedExercisesAfterAdd = [\n        ...existingWorkout.exercises,\n        ...newExercises.map(ex => createNewExercise(ex))\n      ];\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [workoutIdAddEx]: {\n                ...existingWorkout,\n                exercises: updatedExercisesAfterAdd\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const { exerciseIdForToggle, exerciseData } = action.payload;\n      const activeWorkout =\n        state.programs[state.activeProgramId].workouts[state.activeWorkoutId];\n\n      const existingExerciseIndex = activeWorkout.exercises.findIndex(\n        ex => (ex.id || ex.tempId) === exerciseIdForToggle\n      );\n\n      let updatedExercises;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedExercises = [\n          ...activeWorkout.exercises,\n          createNewExercise({\n            ...exerciseData,\n            order: activeWorkout.exercises.length + 1,\n            selected: true\n          })\n        ];\n      } else {\n        // Exercise exists, remove it\n        updatedExercises = activeWorkout.exercises.filter(\n          (_, index) => index !== existingExerciseIndex\n        );\n      }\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [state.activeWorkoutId]: {\n                ...activeWorkout,\n                exercises: updatedExercises\n              }\n            }\n          }\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state.programs[state.activeProgramId].workouts[wId5];\n      if (!workout5) return state;\n\n      const updatedExercisesAfterRemove = workout5.exercises.filter(\n        exercise => (exercise.id || exercise.tempId) !== exId5\n      );\n\n      return {\n        ...state,\n        programs: {\n          ...state.programs,\n          [state.activeProgramId]: {\n            ...state.programs[state.activeProgramId],\n            workouts: {\n              ...state.programs[state.activeProgramId].workouts,\n              [wId5]: {\n                ...workout5,\n                exercises: updatedExercisesAfterRemove\n              }\n            }\n          }\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise =>\n            exerciseUtils.getExerciseId(exercise) === exerciseId\n              ? {\n                  ...exercise,\n                  sets: [\n                    ...exercise.sets,\n                    {\n                      id: uuidv4(),\n                      weight,\n                      reps,\n                      order: exercise.sets.length + 1\n                    }\n                  ]\n                }\n              : exercise\n          )\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercisesAfterSetUpdate = workout2.exercises.map(\n        exercise => {\n          if (exercise.id === exId) {\n            return {\n              ...exercise,\n              sets: exercise.sets.map(set =>\n                set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n              )\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercisesAfterSetUpdate\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(\n        exercise => {\n          const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n          if (exerciseIdToCompare === exerciseIdDeleteSet) {\n            return {\n              ...exercise,\n              sets: exercise.sets.filter(set => set.id !== setIdDeleteSet)\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}