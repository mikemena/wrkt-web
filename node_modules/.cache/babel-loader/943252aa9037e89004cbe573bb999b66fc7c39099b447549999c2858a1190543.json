{"ast":null,"code":"import { initialState } from './initialState';\nfunction programReducer(state = initialState.programs, action) {\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      console.log('SET_SELECTED_PROGRAM action:', action.payload);\n      const newState = {\n        ...state,\n        selectedProgram: action.payload\n      };\n      console.log('New state after SET_SELECTED_PROGRAM:', newState);\n      return newState;\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n      if (!state[id]) {\n        console.error('Program not found:', id);\n        return state; // Return the current state if the program ID does not exist.\n      }\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...state[id],\n          // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal\n        }\n      };\n      return updatedState;\n    case 'UPDATE_PROGRAM':\n      {\n        const updatedProgram = action.payload;\n        console.log('Updating program in reducer:', updatedProgram);\n\n        // Check if the program exists in the selectedProgram\n        const existingProgram = state.selectedProgram;\n        if (!existingProgram || existingProgram.id !== updatedProgram.id) {\n          console.warn(`Program with id ${updatedProgram.id} does not match the selected program. This may cause unexpected behavior.`);\n        }\n        const updatedState = {\n          ...state,\n          selectedProgram: {\n            ...existingProgram,\n            ...updatedProgram\n          }\n        };\n        console.log('Updated state after UPDATE_PROGRAM:', updatedState);\n        return updatedState;\n      }\n    case 'UPDATE_PROGRAM_SUCCESS':\n      {\n        const updatedProgram = action.payload;\n        console.log('Updating program in reducer:', updatedProgram);\n        const existingProgram = state[updatedProgram.id];\n        const updatedState = {\n          ...state,\n          [updatedProgram.id]: {\n            ...existingProgram,\n            ...updatedProgram\n          }\n        };\n\n        // If the updated program is currently selected, update selectedProgram as well\n        if (state.selectedProgram && state.selectedProgram.id === updatedProgram.id) {\n          updatedState.selectedProgram = updatedState[updatedProgram.id];\n        }\n        console.log('Updated state after UPDATE_PROGRAM_SUCCESS:', updatedState);\n        return updatedState;\n      }\n    case 'DELETE_PROGRAM':\n      {\n        const {\n          programId\n        } = action.payload;\n        if (!programId) {\n          console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n          return state;\n        }\n        const newPrograms = {\n          ...state.programs\n        };\n        delete newPrograms[programId];\n        const newState = {\n          ...state,\n          programs: newPrograms\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["initialState","programReducer","state","programs","action","type","console","log","payload","newState","selectedProgram","id","name","program_duration","duration_unit","days_per_week","main_goal","error","updatedState","updatedProgram","existingProgram","warn","programId","newPrograms"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["import { initialState } from './initialState';\n\nfunction programReducer(state = initialState.programs, action) {\n  switch (action.type) {\n    case 'SET_SELECTED_PROGRAM':\n      console.log('SET_SELECTED_PROGRAM action:', action.payload);\n      const newState = {\n        ...state,\n        selectedProgram: action.payload\n      };\n      console.log('New state after SET_SELECTED_PROGRAM:', newState);\n      return newState;\n\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n\n      if (!state[id]) {\n        console.error('Program not found:', id);\n        return state; // Return the current state if the program ID does not exist.\n      }\n\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...state[id], // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal\n        }\n      };\n\n      return updatedState;\n\n    case 'UPDATE_PROGRAM': {\n      const updatedProgram = action.payload;\n      console.log('Updating program in reducer:', updatedProgram);\n\n      // Check if the program exists in the selectedProgram\n      const existingProgram = state.selectedProgram;\n\n      if (!existingProgram || existingProgram.id !== updatedProgram.id) {\n        console.warn(\n          `Program with id ${updatedProgram.id} does not match the selected program. This may cause unexpected behavior.`\n        );\n      }\n\n      const updatedState = {\n        ...state,\n        selectedProgram: {\n          ...existingProgram,\n          ...updatedProgram\n        }\n      };\n\n      console.log('Updated state after UPDATE_PROGRAM:', updatedState);\n      return updatedState;\n    }\n\n    case 'UPDATE_PROGRAM_SUCCESS': {\n      const updatedProgram = action.payload;\n      console.log('Updating program in reducer:', updatedProgram);\n\n      const existingProgram = state[updatedProgram.id];\n\n      const updatedState = {\n        ...state,\n        [updatedProgram.id]: {\n          ...existingProgram,\n          ...updatedProgram\n        }\n      };\n\n      // If the updated program is currently selected, update selectedProgram as well\n      if (\n        state.selectedProgram &&\n        state.selectedProgram.id === updatedProgram.id\n      ) {\n        updatedState.selectedProgram = updatedState[updatedProgram.id];\n      }\n\n      console.log('Updated state after UPDATE_PROGRAM_SUCCESS:', updatedState);\n      return updatedState;\n    }\n\n    case 'DELETE_PROGRAM': {\n      const { programId } = action.payload;\n\n      if (!programId) {\n        console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n        return state;\n      }\n\n      const newPrograms = { ...state.programs };\n      delete newPrograms[programId];\n\n      const newState = {\n        ...state,\n        programs: newPrograms\n      };\n\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}