{"ast":null,"code":"import { initialState } from './initialState';\nfunction programReducer(state = initialState.programs, action) {\n  switch (action.type) {\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n\n      // If the program ID already exists, we should not add it again.\n      if (state[id]) {\n        console.error('Program already exists with ID:', id);\n        return state;\n      }\n      const newProgram = {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal,\n        workouts: []\n      };\n      return {\n        ...state,\n        [id]: newProgram\n      };\n    case 'UPDATE_PROGRAM':\n      {\n        const {\n          id,\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal,\n          user_id\n        } = action.payload;\n        const existingProgram = state[id];\n        if (!existingProgram) {\n          console.error('Program not found:', id);\n          return state;\n        }\n        const updatedState = {\n          ...state,\n          [id]: {\n            ...existingProgram,\n            // Spread the existing program details\n            name,\n            program_duration,\n            duration_unit,\n            days_per_week,\n            main_goal,\n            user_id\n          }\n        };\n        return updatedState;\n      }\n    case 'UPDATE_PROGRAM_SUCCESS':\n      {\n        const {\n          id,\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal,\n          user_id\n        } = action.payload;\n        console.log('Handling UPDATE_PROGRAM_SUCCESS for ID:', id);\n        console.log('Current state:', state);\n        const existingProgram = state[id];\n        if (!existingProgram) {\n          console.error('Program not found:', id);\n          return state;\n        }\n        const updatedProgram = {\n          ...existingProgram,\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal,\n          user_id\n        };\n        return {\n          ...state,\n          [id]: updatedProgram\n        };\n      }\n    case 'SET_PROGRAM':\n      {\n        const {\n          id,\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal,\n          user_id,\n          workouts\n        } = action.payload;\n        return {\n          ...state,\n          [id]: {\n            id,\n            name,\n            program_duration,\n            duration_unit,\n            days_per_week,\n            main_goal,\n            user_id,\n            workouts: workouts.map(workout => workout.id)\n          }\n        };\n      }\n    case 'DELETE_PROGRAM':\n      {\n        const {\n          programId\n        } = action.payload;\n        if (!programId) {\n          console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n          return state;\n        }\n        const newPrograms = {\n          ...state\n        };\n        delete newPrograms[programId];\n        return newPrograms;\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["initialState","programReducer","state","programs","action","type","id","name","program_duration","duration_unit","days_per_week","main_goal","payload","console","error","newProgram","workouts","user_id","existingProgram","updatedState","log","updatedProgram","map","workout","programId","newPrograms"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["import { initialState } from './initialState';\n\nfunction programReducer(state = initialState.programs, action) {\n  switch (action.type) {\n    case 'ADD_PROGRAM':\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal\n      } = action.payload;\n\n      // If the program ID already exists, we should not add it again.\n      if (state[id]) {\n        console.error('Program already exists with ID:', id);\n        return state;\n      }\n\n      const newProgram = {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal,\n        workouts: []\n      };\n\n      return {\n        ...state,\n        [id]: newProgram\n      };\n\n    case 'UPDATE_PROGRAM': {\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal,\n        user_id\n      } = action.payload;\n\n      const existingProgram = state[id];\n      if (!existingProgram) {\n        console.error('Program not found:', id);\n        return state;\n      }\n\n      const updatedState = {\n        ...state,\n        [id]: {\n          ...existingProgram, // Spread the existing program details\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal,\n          user_id\n        }\n      };\n\n      return updatedState;\n    }\n\n    case 'UPDATE_PROGRAM_SUCCESS': {\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal,\n        user_id\n      } = action.payload;\n\n      console.log('Handling UPDATE_PROGRAM_SUCCESS for ID:', id);\n      console.log('Current state:', state);\n\n      const existingProgram = state[id];\n      if (!existingProgram) {\n        console.error('Program not found:', id);\n        return state;\n      }\n\n      const updatedProgram = {\n        ...existingProgram,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal,\n        user_id\n      };\n\n      return {\n        ...state,\n        [id]: updatedProgram\n      };\n    }\n\n    case 'SET_PROGRAM': {\n      const {\n        id,\n        name,\n        program_duration,\n        duration_unit,\n        days_per_week,\n        main_goal,\n        user_id,\n        workouts\n      } = action.payload;\n\n      return {\n        ...state,\n        [id]: {\n          id,\n          name,\n          program_duration,\n          duration_unit,\n          days_per_week,\n          main_goal,\n          user_id,\n          workouts: workouts.map(workout => workout.id)\n        }\n      };\n    }\n\n    case 'DELETE_PROGRAM': {\n      const { programId } = action.payload;\n\n      if (!programId) {\n        console.error('Invalid payload for DELETE_PROGRAM', action.payload);\n        return state;\n      }\n\n      const newPrograms = { ...state };\n      delete newPrograms[programId];\n\n      return newPrograms;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}