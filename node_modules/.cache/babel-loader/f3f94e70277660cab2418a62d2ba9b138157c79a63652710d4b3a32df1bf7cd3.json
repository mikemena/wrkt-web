{"ast":null,"code":"import { actionTypes } from '../actions/actionTypes';\nimport { currentProgram } from './initialState';\nimport { v4 as uuidv4 } from 'uuid';\nfunction programReducer(state = currentProgram, action) {\n  switch (action.type) {\n    case actionTypes.INITIALIZE_NEW_PROGRAM_STATE:\n    case actionTypes.INITIALIZE_EDIT_PROGRAM_STATE:\n      return {\n        ...state,\n        program: action.payload.program,\n        workout: {\n          workouts: action.payload.workouts,\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n    case actionTypes.UPDATE_PROGRAM_FIELD:\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          ...action.payload\n        }\n      };\n    case actionTypes.UPDATE_PROGRAM_DATABASE:\n      // For full database updates\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          ...action.payload.program // Merge full program updates from database response\n        },\n        workout: {\n          workouts: action.payload.workouts,\n          // Update workouts from database response\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n    case actionTypes.CLEAR_PROGRAM:\n      return {\n        ...currentProgram\n      };\n\n    // Workout-related actions\n\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      {\n        const {\n          activeWorkout\n        } = action.payload;\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            activeWorkout: activeWorkout\n          }\n        };\n      }\n    case actionTypes.ADD_WORKOUT:\n      {\n        const newWorkout = action.payload;\n        if (!newWorkout) {\n          console.error('Failed to standardize workout:', action.payload);\n          return state;\n        }\n        const updatedState = {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: [...state.workout.workouts, newWorkout]\n          }\n        };\n        return updatedState;\n      }\n    case actionTypes.UPDATE_WORKOUT_FIELD:\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          ...action.payload\n        }\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      {\n        const updatedWorkout = action.payload;\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: state.workout.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n          }\n        };\n      }\n    case actionTypes.DELETE_WORKOUT:\n      {\n        const {\n          workoutId\n        } = action.payload;\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: state.workout.workouts.filter(workout => workout.id !== workoutId),\n            activeWorkout: state.workout.activeWorkout === workoutId ? null : state.workout.activeWorkout\n          }\n        };\n      }\n    case actionTypes.ADD_EXERCISE:\n      {\n        const {\n          workoutId,\n          exercises\n        } = action.payload;\n\n        // Ensure the active workout ID is available and matches the workoutId\n        if (state.workout.activeWorkout !== workoutId) {\n          console.error('Workout ID does not match the active workout.');\n          return state;\n        }\n\n        // Check if exercises is defined and an array\n        if (!Array.isArray(exercises)) {\n          console.error('Exercises payload is not an array or is undefined.');\n          return state;\n        }\n        const updatedWorkouts = state.workout.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            // Create a Set of existing catalog_exercise_ids to prevent duplicates\n            const existingExerciseIds = new Set(workout.exercises.map(ex => ex.catalog_exercise_id));\n\n            // Filter out exercises that already exist in the workout\n            const newExercises = exercises.filter(ex => !existingExerciseIds.has(ex.catalog_exercise_id));\n\n            // Combine the existing exercises with the new ones\n\n            const currentExerciseCount = workout.exercises.length;\n            return {\n              ...workout,\n              exercises: [...workout.exercises, ...newExercises.map((ex, index) => ({\n                ...ex,\n                catalog_exercise_id: ex.catalog_exercise_id,\n                id: ex.id || uuidv4(),\n                order: currentExerciseCount + index + 1,\n                sets: ex.sets || [{\n                  id: uuidv4(),\n                  weight: '',\n                  reps: '',\n                  order: 1\n                }]\n              }))]\n            };\n          }\n          return workout;\n        });\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: updatedWorkouts\n          }\n        };\n      }\n    case actionTypes.UPDATE_EXERCISE:\n      console.log('Updating exercise:', action.payload);\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: state.workout.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: action.payload.updatedExercises\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    case actionTypes.REMOVE_EXERCISE:\n      {\n        const {\n          workoutId,\n          exerciseId\n        } = action.payload;\n\n        // Ensure the active workout ID is available and matches the workoutId\n        if (state.workout.activeWorkout !== workoutId) {\n          console.error('Workout ID does not match the active workout.');\n          return state;\n        }\n        const updatedWorkouts = state.workout.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            // Filter out the exercise to be deleted\n            const updatedExercises = workout.exercises.filter(exercise => exercise.id !== exerciseId);\n\n            // Reorder the remaining exercises\n            const reorderedExercises = updatedExercises.map((exercise, index) => ({\n              ...exercise,\n              order: index + 1 // Adjust the order\n            }));\n            return {\n              ...workout,\n              exercises: reorderedExercises\n            };\n          }\n          return workout;\n        });\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: updatedWorkouts\n          }\n        };\n      }\n    case actionTypes.ADD_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          newSet\n        } = action.payload;\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: state.workout.workouts.map(workout => {\n              if (workout.id === workoutId) {\n                return {\n                  ...workout,\n                  exercises: workout.exercises.map(exercise => {\n                    if (exercise.id === exerciseId) {\n                      // Calculate the new order based on the current number of sets\n                      const newOrder = exercise.sets.length + 1;\n                      return {\n                        ...exercise,\n                        sets: [...exercise.sets, {\n                          ...newSet,\n                          id: uuidv4(),\n                          order: newOrder\n                        }]\n                      };\n                    }\n                    return exercise;\n                  })\n                };\n              }\n              return workout;\n            })\n          }\n        };\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: state.workout.workouts.map(workout => {\n              if (workout.id === workoutId) {\n                return {\n                  ...workout,\n                  exercises: workout.exercises.map(exercise => {\n                    if (exercise.id === exerciseId) {\n                      return {\n                        ...exercise,\n                        sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n                          ...set,\n                          ...updatedSet\n                        } : set)\n                      };\n                    }\n                    return exercise;\n                  })\n                };\n              }\n              return workout;\n            })\n          }\n        };\n      }\n    case actionTypes.REMOVE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          setId\n        } = action.payload;\n        const updatedWorkouts = state.workout.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.catalog_exercise_id === exerciseId) {\n                  const updatedSets = exercise.sets.filter(set => set.id !== setId);\n                  return {\n                    ...exercise,\n                    sets: updatedSets\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        });\n        return {\n          ...state,\n          workout: {\n            ...state.workout,\n            workouts: updatedWorkouts\n          }\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { programReducer };","map":{"version":3,"names":["actionTypes","currentProgram","v4","uuidv4","programReducer","state","action","type","INITIALIZE_NEW_PROGRAM_STATE","INITIALIZE_EDIT_PROGRAM_STATE","program","payload","workout","workouts","activeWorkout","UPDATE_PROGRAM_FIELD","UPDATE_PROGRAM_DATABASE","CLEAR_PROGRAM","SET_ACTIVE_WORKOUT","ADD_WORKOUT","newWorkout","console","error","updatedState","UPDATE_WORKOUT_FIELD","UPDATE_WORKOUT","updatedWorkout","map","id","DELETE_WORKOUT","workoutId","filter","ADD_EXERCISE","exercises","Array","isArray","updatedWorkouts","existingExerciseIds","Set","ex","catalog_exercise_id","newExercises","has","currentExerciseCount","length","index","order","sets","weight","reps","UPDATE_EXERCISE","log","updatedExercises","REMOVE_EXERCISE","exerciseId","exercise","reorderedExercises","ADD_SET","newSet","newOrder","UPDATE_SET","updatedSet","set","REMOVE_SET","setId","updatedSets"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/programReducer.js"],"sourcesContent":["import { actionTypes } from '../actions/actionTypes';\nimport { currentProgram } from './initialState';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction programReducer(state = currentProgram, action) {\n  switch (action.type) {\n    case actionTypes.INITIALIZE_NEW_PROGRAM_STATE:\n    case actionTypes.INITIALIZE_EDIT_PROGRAM_STATE:\n      return {\n        ...state,\n        program: action.payload.program,\n        workout: {\n          workouts: action.payload.workouts,\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n\n    case actionTypes.UPDATE_PROGRAM_FIELD:\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          ...action.payload\n        }\n      };\n\n    case actionTypes.UPDATE_PROGRAM_DATABASE: // For full database updates\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          ...action.payload.program // Merge full program updates from database response\n        },\n        workout: {\n          workouts: action.payload.workouts, // Update workouts from database response\n          activeWorkout: action.payload.activeWorkout\n        }\n      };\n\n    case actionTypes.CLEAR_PROGRAM:\n      return {\n        ...currentProgram\n      };\n\n    // Workout-related actions\n\n    case actionTypes.SET_ACTIVE_WORKOUT: {\n      const { activeWorkout } = action.payload;\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          activeWorkout: activeWorkout\n        }\n      };\n    }\n\n    case actionTypes.ADD_WORKOUT: {\n      const newWorkout = action.payload;\n\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n\n      const updatedState = {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: [...state.workout.workouts, newWorkout]\n        }\n      };\n\n      return updatedState;\n    }\n\n    case actionTypes.UPDATE_WORKOUT_FIELD:\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          ...action.payload\n        }\n      };\n\n    case actionTypes.UPDATE_WORKOUT: {\n      const updatedWorkout = action.payload;\n\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: state.workout.workouts.map(workout =>\n            workout.id === updatedWorkout.id ? updatedWorkout : workout\n          )\n        }\n      };\n    }\n\n    case actionTypes.DELETE_WORKOUT: {\n      const { workoutId } = action.payload;\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: state.workout.workouts.filter(\n            workout => workout.id !== workoutId\n          ),\n          activeWorkout:\n            state.workout.activeWorkout === workoutId\n              ? null\n              : state.workout.activeWorkout\n        }\n      };\n    }\n\n    case actionTypes.ADD_EXERCISE: {\n      const { workoutId, exercises } = action.payload;\n\n      // Ensure the active workout ID is available and matches the workoutId\n      if (state.workout.activeWorkout !== workoutId) {\n        console.error('Workout ID does not match the active workout.');\n        return state;\n      }\n\n      // Check if exercises is defined and an array\n      if (!Array.isArray(exercises)) {\n        console.error('Exercises payload is not an array or is undefined.');\n        return state;\n      }\n\n      const updatedWorkouts = state.workout.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Create a Set of existing catalog_exercise_ids to prevent duplicates\n          const existingExerciseIds = new Set(\n            workout.exercises.map(ex => ex.catalog_exercise_id)\n          );\n\n          // Filter out exercises that already exist in the workout\n          const newExercises = exercises.filter(\n            ex => !existingExerciseIds.has(ex.catalog_exercise_id)\n          );\n\n          // Combine the existing exercises with the new ones\n\n          const currentExerciseCount = workout.exercises.length;\n\n          return {\n            ...workout,\n            exercises: [\n              ...workout.exercises,\n              ...newExercises.map((ex, index) => ({\n                ...ex,\n                catalog_exercise_id: ex.catalog_exercise_id,\n                id: ex.id || uuidv4(),\n                order: currentExerciseCount + index + 1,\n                sets: ex.sets || [\n                  { id: uuidv4(), weight: '', reps: '', order: 1 }\n                ]\n              }))\n            ]\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: updatedWorkouts\n        }\n      };\n    }\n\n    case actionTypes.UPDATE_EXERCISE:\n      console.log('Updating exercise:', action.payload);\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: state.workout.workouts.map(workout => {\n            if (workout.id === action.payload.workoutId) {\n              return {\n                ...workout,\n                exercises: action.payload.updatedExercises\n              };\n            }\n            return workout;\n          })\n        }\n      };\n\n    case actionTypes.REMOVE_EXERCISE: {\n      const { workoutId, exerciseId } = action.payload;\n\n      // Ensure the active workout ID is available and matches the workoutId\n      if (state.workout.activeWorkout !== workoutId) {\n        console.error('Workout ID does not match the active workout.');\n        return state;\n      }\n      const updatedWorkouts = state.workout.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          // Filter out the exercise to be deleted\n          const updatedExercises = workout.exercises.filter(\n            exercise => exercise.id !== exerciseId\n          );\n\n          // Reorder the remaining exercises\n          const reorderedExercises = updatedExercises.map(\n            (exercise, index) => ({\n              ...exercise,\n              order: index + 1 // Adjust the order\n            })\n          );\n\n          return { ...workout, exercises: reorderedExercises };\n        }\n\n        return workout;\n      });\n\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: updatedWorkouts\n        }\n      };\n    }\n\n    case actionTypes.ADD_SET: {\n      const { workoutId, exerciseId, newSet } = action.payload;\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: state.workout.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    // Calculate the new order based on the current number of sets\n                    const newOrder = exercise.sets.length + 1;\n                    return {\n                      ...exercise,\n                      sets: [\n                        ...exercise.sets,\n                        { ...newSet, id: uuidv4(), order: newOrder }\n                      ]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { workoutId, exerciseId, updatedSet } = action.payload;\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: state.workout.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set =>\n                        set.id === updatedSet.id\n                          ? { ...set, ...updatedSet }\n                          : set\n                      )\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        }\n      };\n    }\n\n    case actionTypes.REMOVE_SET: {\n      const { workoutId, exerciseId, setId } = action.payload;\n\n      const updatedWorkouts = state.workout.workouts.map(workout => {\n        if (workout.id === workoutId) {\n          return {\n            ...workout,\n            exercises: workout.exercises.map(exercise => {\n              if (exercise.catalog_exercise_id === exerciseId) {\n                const updatedSets = exercise.sets.filter(\n                  set => set.id !== setId\n                );\n\n                return {\n                  ...exercise,\n                  sets: updatedSets\n                };\n              }\n              return exercise;\n            })\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        workout: {\n          ...state.workout,\n          workouts: updatedWorkouts\n        }\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { programReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}