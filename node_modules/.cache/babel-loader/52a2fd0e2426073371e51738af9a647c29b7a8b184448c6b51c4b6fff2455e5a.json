{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.ADD_WORKOUT:\n      console.log('Action Type: ADD_WORKOUT');\n      console.log('State Before:', state);\n      console.log('Action Payload:', action.payload);\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      console.log('Adding workout in reducer:', newWorkout);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: [...state.program.workouts, newWorkout]\n        }\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      console.log('Updating workout in reducer:', action.payload);\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout => workout.id === action.payload.id || workout.tempId === action.payload.tempId ? action.payload : workout)\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        console.log('Reordered Workouts:', reorderedWorkouts);\n        return {\n          ...state,\n          program: {\n            ...state.program,\n            workouts: state.program.workouts.filter(workout => workout.id !== action.payload && workout.tempId !== action.payload)\n          }\n        };\n      }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const updatedWorkouts = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdAddEx || workout.tempId === workoutIdAddEx) {\n          // Create a Set of existing exercise IDs\n          const existingExerciseIds = new Set(workout.exercises.map(ex => ex.id || ex.tempId));\n          console.log('Set of Existing Exercise IDs:', existingExerciseIds);\n\n          // Filter out duplicates and add only new exercises\n          const newExercises = exercises.filter(ex => !existingExerciseIds.has(ex.id || ex.tempId));\n          console.log('New Exercises:', newExercises);\n\n          // Combine existing exercises with new ones\n          const updatedExercisesAfterAdd = [...workout.exercises, ...newExercises.map(ex => ({\n            ...exerciseUtils.standardizeExercise(ex),\n            id: ex.id || null,\n            tempId: ex.tempId || uuidv4() // Generate tempId for new exercises if not present\n          }))];\n          return {\n            ...workout,\n            exercises: updatedExercisesAfterAdd\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: updatedWorkouts\n        }\n      };\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const {\n        exerciseIdForToggle,\n        exerciseData\n      } = action.payload;\n      console.log('Toggling exercise:', exerciseIdForToggle);\n      console.log('Current exercises:', state.exercises);\n      const existingExerciseIndex = state.exercises.findIndex(ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle);\n      let updatedState;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedState = {\n          ...state,\n          exercises: [...state.exercises, {\n            id: exerciseIdForToggle,\n            name: exerciseData.name,\n            muscle: exerciseData.muscle,\n            equipment: exerciseData.equipment,\n            order: state.exercises.length + 1,\n            selected: true,\n            sets: [{\n              id: uuidv4(),\n              weight: 10,\n              // Default weight\n              reps: 10,\n              // Default reps\n              order: 1\n            }]\n          }]\n        };\n      } else {\n        // Exercise exists, toggle its selection\n        const updatedExercises = state.exercises.filter((ex, index) => index !== existingExerciseIndex);\n        updatedState = {\n          ...state,\n          exercises: updatedExercises\n        };\n      }\n      console.log('Updated state:', updatedState);\n      return updatedState;\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n      const updatedExercisesAfterRemove = workout5.exercises.filter(exercise => exercise.id !== exId5 && exercise.tempId !== exId5 && exercise.catalog_exercise_id !== exId5);\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: updatedExercisesAfterRemove\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId: exerciseIdAddSet,\n        newSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddSet = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdAddSet || workout.tempId === workoutIdAddSet) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exerciseIdAddSet || exercise.tempId === exerciseIdAddSet) {\n              // Add the new set to the exercise\n              const updatedSets = [...exercise.sets, {\n                ...newSet,\n                id: uuidv4()\n              }];\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddSet\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForUpdateSet = state.program.workouts.map(workout => {\n        if (workout.id === wId2 || workout.tempId === wId2) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exId || exercise.tempId === exId) {\n              // Update the specific set within the exercise\n              const updatedSets = exercise.sets.map(set => set.id === updatedSet.id || set.tempId === updatedSet.tempId ? {\n                ...set,\n                ...updatedSet\n              } : set);\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForUpdateSet\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveSet = state.program.workouts.map(workout => {\n        if (workout.id === workoutIdDeleteSet || workout.tempId === workoutIdDeleteSet) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exerciseIdDeleteSet || exercise.tempId === exerciseIdDeleteSet) {\n              // Remove the specific set from the exercise\n              const updatedSets = exercise.sets.filter(set => set.id !== setIdDeleteSet && set.tempId !== setIdDeleteSet);\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveSet\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","standardizeWorkout","workoutReducer","state","workouts","action","console","log","type","payload","ADD_WORKOUT","newWorkout","error","program","UPDATE_WORKOUT","map","workout","id","tempId","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","order","index","reduce","acc","filter","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","updatedWorkouts","existingExerciseIds","Set","ex","newExercises","has","updatedExercisesAfterAdd","standardizeExercise","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","exerciseData","existingExerciseIndex","findIndex","updatedState","name","muscle","equipment","length","selected","sets","weight","reps","updatedExercises","REMOVE_EXERCISE","wId5","exerciseId","exId5","workout5","updatedExercisesAfterRemove","exercise","catalog_exercise_id","ADD_SET","workoutIdAddSet","exerciseIdAddSet","newSet","workoutsForAddSet","updatedSets","UPDATE_SET","wId2","exId","updatedSet","workoutsForUpdateSet","set","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutsForRemoveSet"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.ADD_WORKOUT:\n      console.log('Action Type: ADD_WORKOUT');\n      console.log('State Before:', state);\n      console.log('Action Payload:', action.payload);\n\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      console.log('Adding workout in reducer:', newWorkout);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: [...state.program.workouts, newWorkout]\n        }\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      console.log('Updating workout in reducer:', action.payload);\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.map(workout =>\n            workout.id === action.payload.id ||\n            workout.tempId === action.payload.tempId\n              ? action.payload\n              : workout\n          )\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n      console.log('Reordered Workouts:', reorderedWorkouts);\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: state.program.workouts.filter(\n            workout =>\n              workout.id !== action.payload && workout.tempId !== action.payload\n          )\n        }\n      };\n    }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n\n      // Find the workout that needs to be updated\n      const updatedWorkouts = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdAddEx ||\n          workout.tempId === workoutIdAddEx\n        ) {\n          // Create a Set of existing exercise IDs\n          const existingExerciseIds = new Set(\n            workout.exercises.map(ex => ex.id || ex.tempId)\n          );\n\n          console.log('Set of Existing Exercise IDs:', existingExerciseIds);\n\n          // Filter out duplicates and add only new exercises\n          const newExercises = exercises.filter(\n            ex => !existingExerciseIds.has(ex.id || ex.tempId)\n          );\n\n          console.log('New Exercises:', newExercises);\n\n          // Combine existing exercises with new ones\n          const updatedExercisesAfterAdd = [\n            ...workout.exercises,\n            ...newExercises.map(ex => ({\n              ...exerciseUtils.standardizeExercise(ex),\n              id: ex.id || null,\n              tempId: ex.tempId || uuidv4() // Generate tempId for new exercises if not present\n            }))\n          ];\n\n          return {\n            ...workout,\n            exercises: updatedExercisesAfterAdd\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: updatedWorkouts\n        }\n      };\n\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const { exerciseIdForToggle, exerciseData } = action.payload;\n      console.log('Toggling exercise:', exerciseIdForToggle);\n      console.log('Current exercises:', state.exercises);\n\n      const existingExerciseIndex = state.exercises.findIndex(\n        ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle\n      );\n\n      let updatedState;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedState = {\n          ...state,\n          exercises: [\n            ...state.exercises,\n            {\n              id: exerciseIdForToggle,\n              name: exerciseData.name,\n              muscle: exerciseData.muscle,\n              equipment: exerciseData.equipment,\n              order: state.exercises.length + 1,\n              selected: true,\n              sets: [\n                {\n                  id: uuidv4(),\n                  weight: 10, // Default weight\n                  reps: 10, // Default reps\n                  order: 1\n                }\n              ]\n            }\n          ]\n        };\n      } else {\n        // Exercise exists, toggle its selection\n        const updatedExercises = state.exercises.filter(\n          (ex, index) => index !== existingExerciseIndex\n        );\n        updatedState = {\n          ...state,\n          exercises: updatedExercises\n        };\n      }\n\n      console.log('Updated state:', updatedState);\n      return updatedState;\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n\n      const updatedExercisesAfterRemove = workout5.exercises.filter(\n        exercise =>\n          exercise.id !== exId5 &&\n          exercise.tempId !== exId5 &&\n          exercise.catalog_exercise_id !== exId5\n      );\n\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: updatedExercisesAfterRemove\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId: exerciseIdAddSet,\n        newSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForAddSet = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdAddSet ||\n          workout.tempId === workoutIdAddSet\n        ) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (\n              exercise.id === exerciseIdAddSet ||\n              exercise.tempId === exerciseIdAddSet\n            ) {\n              // Add the new set to the exercise\n              const updatedSets = [\n                ...exercise.sets,\n                { ...newSet, id: uuidv4() }\n              ];\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForAddSet\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForUpdateSet = state.program.workouts.map(workout => {\n        if (workout.id === wId2 || workout.tempId === wId2) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (exercise.id === exId || exercise.tempId === exId) {\n              // Update the specific set within the exercise\n              const updatedSets = exercise.sets.map(set =>\n                set.id === updatedSet.id || set.tempId === updatedSet.tempId\n                  ? { ...set, ...updatedSet }\n                  : set\n              );\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForUpdateSet\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n\n      // Find the workout that needs to be updated\n      const workoutsForRemoveSet = state.program.workouts.map(workout => {\n        if (\n          workout.id === workoutIdDeleteSet ||\n          workout.tempId === workoutIdDeleteSet\n        ) {\n          // Find the exercise within the workout that needs to be updated\n          const updatedExercises = workout.exercises.map(exercise => {\n            if (\n              exercise.id === exerciseIdDeleteSet ||\n              exercise.tempId === exerciseIdDeleteSet\n            ) {\n              // Remove the specific set from the exercise\n              const updatedSets = exercise.sets.filter(\n                set =>\n                  set.id !== setIdDeleteSet && set.tempId !== setIdDeleteSet\n              );\n\n              return {\n                ...exercise,\n                sets: updatedSets\n              };\n            }\n            return exercise;\n          });\n\n          return {\n            ...workout,\n            exercises: updatedExercises\n          };\n        }\n        return workout;\n      });\n\n      return {\n        ...state,\n        program: {\n          ...state.program,\n          workouts: workoutsForRemoveSet\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}