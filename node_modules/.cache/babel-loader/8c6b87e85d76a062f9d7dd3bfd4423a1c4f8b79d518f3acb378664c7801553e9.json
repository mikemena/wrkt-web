{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { createNewProgram, createNewWorkout, createNewExercise, createNewSet } from '../utils/programStructures';\nimport exerciseUtils from '../utils/exercise.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, {\n    currentProgram: createNewProgram(),\n    initialState\n  });\n\n  // Program Actions\n\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: program\n    });\n  };\n  const saveProgram = async () => {\n    const programToSave = prepareProgramForSave(state.programs[state.selectedProgramId]);\n    console.log('Saving program with payload:', programToSave);\n    dispatch({\n      type: 'SAVE_PROGRAM_START'\n    });\n    try {\n      validateProgramData(programToSave);\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(programToSave)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'SAVE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async updatedProgram => {\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram);\n      console.log('Sending updated program to server:', updatedProgram);\n      const response = await fetch(`http://localhost:9025/api/programs/${updatedProgram.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order = Object.keys(state.programs[programId].workouts).length + 1;\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: {\n        programId,\n        workout: newWorkout\n      }\n    });\n  };\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        programId,\n        workout: updatedWorkout\n      }\n    });\n  };\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: {\n      programId,\n      workoutId\n    }\n  });\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises: standardizedExercises\n      }\n    });\n  };\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set. Current workouts state:', state.workouts);\n    console.log('Adding set for workoutId:', workoutId, 'exerciseId:', exerciseId);\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      console.log('Available workout IDs:', Object.keys(state.workouts));\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n    const exercise = workout.exercises.find(ex => exerciseUtils.getExerciseId(ex) === exerciseId);\n    if (!exercise) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n    const updatedExercises = workout.exercises.map(ex => exerciseUtils.getExerciseId(ex) === exerciseId ? {\n      ...ex,\n      sets: updatedSets\n    } : ex);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      setSelectedProgram,\n      addProgram,\n      updateProgram,\n      updateWorkoutAndProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      toggleExerciseSelection,\n      removeExercise,\n      addSet,\n      updateSet,\n      removeSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"adUBfIToc9/5H0+m07HbiHcjLKM=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","createNewProgram","createNewWorkout","createNewExercise","createNewSet","exerciseUtils","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","currentProgram","setSelectedProgram","program","console","log","type","payload","saveProgram","programToSave","prepareProgramForSave","programs","selectedProgramId","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","error","Error","savedProgram","json","message","updateProgram","updatedProgram","SAVE_PROGRAM_START","id","UPDATE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","updateWorkoutAndProgram","updatedWorkout","UPDATE_WORKOUT","programData","workouts","Array","isArray","forEach","workout","exercises","exercise","sets","addProgram","details","ADD_PROGRAM","deleteProgram","programId","DELETE_PROGRAM","setActiveWorkout","workoutId","SET_ACTIVE_WORKOUT","addWorkout","newWorkout","name","order","Object","keys","length","ADD_WORKOUT","updateWorkout","isNew","deleteWorkout","DELETE_WORKOUT","addExercise","standardizedExercises","map","ex","ADD_EXERCISE","removeExercise","exerciseId","REMOVE_EXERCISE","toggleExerciseSelection","exerciseData","activeWorkoutId","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","addSet","weight","reps","find","getExerciseId","ADD_SET","updateSet","updatedSet","UPDATE_SET","removeSet","setId","updatedSets","filter","set","updatedExercises","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport {\n  createNewProgram,\n  createNewWorkout,\n  createNewExercise,\n  createNewSet\n} from '../utils/programStructures';\n\nimport exerciseUtils from '../utils/exercise.js';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, {\n    currentProgram: createNewProgram(),\n    initialState\n  });\n\n  // Program Actions\n\n  const setSelectedProgram = program => {\n    console.log('Setting selected program:', program);\n    dispatch({\n      type: 'SET_SELECTED_PROGRAM',\n      payload: program\n    });\n  };\n\n  const saveProgram = async () => {\n    const programToSave = prepareProgramForSave(\n      state.programs[state.selectedProgramId]\n    );\n\n    console.log('Saving program with payload:', programToSave);\n\n    dispatch({ type: 'SAVE_PROGRAM_START' });\n    try {\n      validateProgramData(programToSave);\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(programToSave)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error saving program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: 'SAVE_PROGRAM_SUCCESS',\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: 'SAVE_PROGRAM_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async updatedProgram => {\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram);\n\n      console.log('Sending updated program to server:', updatedProgram);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${updatedProgram.id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error updating program:', errorText);\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateWorkoutAndProgram = updatedWorkout => {\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: updatedWorkout\n    });\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  // Workout Actions\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addWorkout = programId => {\n    const newWorkout = createNewWorkout();\n    newWorkout.name = 'New Workout';\n    newWorkout.order =\n      Object.keys(state.programs[programId].workouts).length + 1;\n\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: { programId, workout: newWorkout }\n    });\n  };\n\n  const updateWorkout = (programId, workout) => {\n    const updatedWorkout = {\n      ...workout,\n      isNew: false\n    };\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: { programId, workout: updatedWorkout }\n    });\n  };\n\n  const deleteWorkout = (programId, workoutId) => ({\n    type: actionTypes.DELETE_WORKOUT,\n    payload: { programId, workoutId }\n  });\n\n  // Exercise Actions\n\n  const addExercise = (workoutId, exercises) => {\n    const standardizedExercises = exercises.map(ex => {\n      if (ex.id) {\n        // This is an existing exercise (from editing)\n        return {\n          ...createNewExercise(),\n          ...ex,\n          isNew: false\n        };\n      } else {\n        // This is a new exercise being added\n        return createNewExercise(ex);\n      }\n    });\n\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises: standardizedExercises }\n    });\n  };\n\n  const removeExercise = (workoutId, exerciseId) => {\n    console.log('Removing exercise:', exerciseId, 'from workout:', workoutId);\n    dispatch({\n      type: actionTypes.REMOVE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const toggleExerciseSelection = (exerciseId, exerciseData) => {\n    if (!state.activeWorkoutId) {\n      console.error('No active workout selected');\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.TOGGLE_EXERCISE_SELECTION,\n      payload: {\n        exerciseIdForToggle: exerciseId,\n        exerciseData: exerciseData\n      }\n    });\n  };\n\n  // Set Actions\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    console.log('Adding set. Current workouts state:', state.workouts);\n    console.log(\n      'Adding set for workoutId:',\n      workoutId,\n      'exerciseId:',\n      exerciseId\n    );\n    const workout = state.workouts[workoutId];\n\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      console.log('Available workout IDs:', Object.keys(state.workouts));\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const removeSet = (workoutId, exerciseId, setId) => {\n    const workout = state.workouts[workoutId];\n    if (!workout) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    const exercise = workout.exercises.find(\n      ex => exerciseUtils.getExerciseId(ex) === exerciseId\n    );\n    if (!exercise) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    const updatedSets = exercise.sets.filter(set => set.id !== setId);\n    if (updatedSets.length === exercise.sets.length) {\n      console.error('Set not found:', setId, 'in exercise:', exerciseId);\n      return;\n    }\n\n    const updatedExercises = workout.exercises.map(ex =>\n      exerciseUtils.getExerciseId(ex) === exerciseId\n        ? { ...ex, sets: updatedSets }\n        : ex\n    );\n\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: {\n        ...workout,\n        exercises: updatedExercises\n      }\n    });\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        setSelectedProgram,\n        addProgram,\n        updateProgram,\n        updateWorkoutAndProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        toggleExerciseSelection,\n        removeExercise,\n        addSet,\n        updateSet,\n        removeSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}