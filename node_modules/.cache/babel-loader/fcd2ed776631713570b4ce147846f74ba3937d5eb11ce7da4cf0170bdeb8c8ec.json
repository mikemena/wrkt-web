{"ast":null,"code":"const standardizePrograms = fetchedPrograms => {\n  const standardizedState = {\n    programs: {},\n    workouts: {}\n  };\n  fetchedPrograms.forEach(program => {\n    const programId = program.id; // Assuming program.id is either an integer or UUID\n\n    // Standardize program data (each program object)\n    standardizedState.programs[programId] = {\n      user_id: program.user_id || null,\n      id: programId,\n      name: program.name || '',\n      program_duration: program.program_duration || 0,\n      duration_unit: program.duration_unit || 'Days',\n      days_per_week: program.days_per_week || 0,\n      main_goal: program.main_goal || ''\n    };\n\n    // Standardize workouts, grouping them by programId\n    (program.workouts || []).forEach(workout => {\n      const workoutId = workout.id;\n      standardizedState.workouts[workoutId] = {\n        id: workoutId,\n        programId: programId,\n        name: workout.name || '',\n        exercises: (workout.exercises || []).map(exercise => ({\n          id: exercise.id,\n          catalog_exercise_id: exercise.catalog_exercise_id || null,\n          equipment: exercise.equipment || '',\n          muscle: exercise.muscle || '',\n          name: exercise.name || '',\n          order: exercise.order || 0,\n          sets: (exercise.sets || []).map(set => ({\n            id: set.id,\n            order: set.order || 0,\n            reps: set.reps || 0,\n            weight: set.weight || 0,\n            unit: set.unit || 'lbs'\n          }))\n        }))\n      };\n    });\n  });\n  return standardizedState;\n};\nexport default standardizePrograms;","map":{"version":3,"names":["standardizePrograms","fetchedPrograms","standardizedState","programs","workouts","forEach","program","programId","id","user_id","name","program_duration","duration_unit","days_per_week","main_goal","workout","workoutId","exercises","map","exercise","catalog_exercise_id","equipment","muscle","order","sets","set","reps","weight","unit"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/utils/standardizePrograms.js"],"sourcesContent":["const standardizePrograms = fetchedPrograms => {\n  const standardizedState = {\n    programs: {},\n    workouts: {}\n  };\n\n  fetchedPrograms.forEach(program => {\n    const programId = program.id; // Assuming program.id is either an integer or UUID\n\n    // Standardize program data (each program object)\n    standardizedState.programs[programId] = {\n      user_id: program.user_id || null,\n      id: programId,\n      name: program.name || '',\n      program_duration: program.program_duration || 0,\n      duration_unit: program.duration_unit || 'Days',\n      days_per_week: program.days_per_week || 0,\n      main_goal: program.main_goal || ''\n    };\n\n    // Standardize workouts, grouping them by programId\n    (program.workouts || []).forEach(workout => {\n      const workoutId = workout.id;\n      standardizedState.workouts[workoutId] = {\n        id: workoutId,\n        programId: programId,\n        name: workout.name || '',\n        exercises: (workout.exercises || []).map(exercise => ({\n          id: exercise.id,\n          catalog_exercise_id: exercise.catalog_exercise_id || null,\n          equipment: exercise.equipment || '',\n          muscle: exercise.muscle || '',\n          name: exercise.name || '',\n          order: exercise.order || 0,\n          sets: (exercise.sets || []).map(set => ({\n            id: set.id,\n            order: set.order || 0,\n            reps: set.reps || 0,\n            weight: set.weight || 0,\n            unit: set.unit || 'lbs'\n          }))\n        }))\n      };\n    });\n  });\n\n  return standardizedState;\n};\n\nexport default standardizePrograms;\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGC,eAAe,IAAI;EAC7C,MAAMC,iBAAiB,GAAG;IACxBC,QAAQ,EAAE,CAAC,CAAC;IACZC,QAAQ,EAAE,CAAC;EACb,CAAC;EAEDH,eAAe,CAACI,OAAO,CAACC,OAAO,IAAI;IACjC,MAAMC,SAAS,GAAGD,OAAO,CAACE,EAAE,CAAC,CAAC;;IAE9B;IACAN,iBAAiB,CAACC,QAAQ,CAACI,SAAS,CAAC,GAAG;MACtCE,OAAO,EAAEH,OAAO,CAACG,OAAO,IAAI,IAAI;MAChCD,EAAE,EAAED,SAAS;MACbG,IAAI,EAAEJ,OAAO,CAACI,IAAI,IAAI,EAAE;MACxBC,gBAAgB,EAAEL,OAAO,CAACK,gBAAgB,IAAI,CAAC;MAC/CC,aAAa,EAAEN,OAAO,CAACM,aAAa,IAAI,MAAM;MAC9CC,aAAa,EAAEP,OAAO,CAACO,aAAa,IAAI,CAAC;MACzCC,SAAS,EAAER,OAAO,CAACQ,SAAS,IAAI;IAClC,CAAC;;IAED;IACA,CAACR,OAAO,CAACF,QAAQ,IAAI,EAAE,EAAEC,OAAO,CAACU,OAAO,IAAI;MAC1C,MAAMC,SAAS,GAAGD,OAAO,CAACP,EAAE;MAC5BN,iBAAiB,CAACE,QAAQ,CAACY,SAAS,CAAC,GAAG;QACtCR,EAAE,EAAEQ,SAAS;QACbT,SAAS,EAAEA,SAAS;QACpBG,IAAI,EAAEK,OAAO,CAACL,IAAI,IAAI,EAAE;QACxBO,SAAS,EAAE,CAACF,OAAO,CAACE,SAAS,IAAI,EAAE,EAAEC,GAAG,CAACC,QAAQ,KAAK;UACpDX,EAAE,EAAEW,QAAQ,CAACX,EAAE;UACfY,mBAAmB,EAAED,QAAQ,CAACC,mBAAmB,IAAI,IAAI;UACzDC,SAAS,EAAEF,QAAQ,CAACE,SAAS,IAAI,EAAE;UACnCC,MAAM,EAAEH,QAAQ,CAACG,MAAM,IAAI,EAAE;UAC7BZ,IAAI,EAAES,QAAQ,CAACT,IAAI,IAAI,EAAE;UACzBa,KAAK,EAAEJ,QAAQ,CAACI,KAAK,IAAI,CAAC;UAC1BC,IAAI,EAAE,CAACL,QAAQ,CAACK,IAAI,IAAI,EAAE,EAAEN,GAAG,CAACO,GAAG,KAAK;YACtCjB,EAAE,EAAEiB,GAAG,CAACjB,EAAE;YACVe,KAAK,EAAEE,GAAG,CAACF,KAAK,IAAI,CAAC;YACrBG,IAAI,EAAED,GAAG,CAACC,IAAI,IAAI,CAAC;YACnBC,MAAM,EAAEF,GAAG,CAACE,MAAM,IAAI,CAAC;YACvBC,IAAI,EAAEH,GAAG,CAACG,IAAI,IAAI;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO1B,iBAAiB;AAC1B,CAAC;AAED,eAAeF,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}