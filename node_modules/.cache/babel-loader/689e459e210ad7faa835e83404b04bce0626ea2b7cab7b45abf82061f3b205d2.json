{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.ADD_WORKOUT:\n      console.log('Action Type: ADD_WORKOUT');\n      console.log('State Before:', state);\n      console.log('Action Payload:', action.payload);\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      console.log('Adding workout in reducer:', newWorkout);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      console.log('Updating workout in reducer:', action.payload);\n      return {\n        ...state,\n        [action.payload.id]: {\n          ...state[action.payload.id],\n          ...action.payload\n        }\n      };\n    case actionTypes.DELETE_WORKOUT:\n      {\n        if (!action.payload) {\n          console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n          return state;\n        }\n        const {\n          [action.payload]: deletedWorkout,\n          ...remainingWorkouts\n        } = state;\n        const reorderedWorkouts = Object.values(remainingWorkouts).sort((a, b) => a.order - b.order).map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        })).reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n        const newState = {\n          ...reorderedWorkouts\n        };\n        return newState;\n      }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      const {\n        workoutId: workoutIdAddEx,\n        exercises\n      } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      // Create a Set of existing exercise IDs\n      const existingExerciseIds = new Set(existingWorkout.exercises.map(ex => ex.id));\n      console.log('Set of Existing Exercise IDs:', existingExerciseIds);\n\n      // Filter out duplicates and add only new exercises\n      const newExercises = exercises.filter(ex => !existingExerciseIds.has(ex.id));\n      console.log('New Exercises:', newExercises);\n\n      // Combine existing exercises with new ones\n      const updatedExercisesAfterAdd = [...existingWorkout.exercises, ...newExercises.map(ex => exerciseUtils.standardizeExercise(ex))];\n      console.log('Updated Exercises After Add:', updatedExercisesAfterAdd);\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExercisesAfterAdd\n        }\n      };\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const {\n        exerciseIdForToggle\n      } = action.payload;\n      console.log('Toggling exercise:', exerciseIdForToggle);\n      console.log('Current exercises:', state.exercises);\n      const existingExerciseIndex = state.exercises.findIndex(ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle);\n      let updatedState;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedState = {\n          ...state,\n          exercises: [...state.exercises, {\n            id: exerciseIdForToggle,\n            name: exerciseData.name,\n            muscle: exerciseData.muscle,\n            equipment: exerciseData.equipment,\n            order: state.exercises.length + 1,\n            selected: true\n          }]\n        };\n      } else {\n        // Exercise exists, toggle its selection\n        updatedState = {\n          ...state,\n          exercises: state.exercises.map((ex, index) => index === existingExerciseIndex ? {\n            ...ex,\n            selected: !ex.selected\n          } : ex)\n        };\n      }\n      console.log('Updated state:', updatedState);\n      return updatedState;\n    case actionTypes.REMOVE_EXERCISE:\n      const {\n        workoutId: wId5,\n        exerciseId: exId5\n      } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n      const updatedExercisesAfterRemove = workout5.exercises.filter(exercise => exercise.id !== exId5 && exercise.tempId !== exId5 && exercise.catalog_exercise_id !== exId5);\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: updatedExercisesAfterRemove\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise => exerciseUtils.getExerciseId(exercise) === exerciseId ? {\n            ...exercise,\n            sets: [...exercise.sets, {\n              id: uuidv4(),\n              weight,\n              reps,\n              order: exercise.sets.length + 1\n            }]\n          } : exercise)\n        }\n      };\n    case actionTypes.UPDATE_SET:\n      const {\n        workoutId: wId2,\n        exerciseId: exId,\n        updatedSet\n      } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n      const updatedExercisesAfterSetUpdate = workout2.exercises.map(exercise => {\n        if (exercise.id === exId) {\n          return {\n            ...exercise,\n            sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n              ...set,\n              ...updatedSet\n            } : set)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercisesAfterSetUpdate\n        }\n      };\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(exercise => {\n        const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n        if (exerciseIdToCompare === exerciseIdDeleteSet) {\n          return {\n            ...exercise,\n            sets: exercise.sets.filter(set => set.id !== setIdDeleteSet)\n          };\n        }\n        return exercise;\n      });\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","exerciseUtils","standardizeWorkout","workoutReducer","state","workouts","action","console","log","type","payload","ADD_WORKOUT","newWorkout","error","id","UPDATE_WORKOUT","DELETE_WORKOUT","deletedWorkout","remainingWorkouts","reorderedWorkouts","Object","values","sort","a","b","order","map","workout","index","reduce","acc","newState","ADD_EXERCISE","workoutId","workoutIdAddEx","exercises","existingWorkout","existingExerciseIds","Set","ex","newExercises","filter","has","updatedExercisesAfterAdd","standardizeExercise","TOGGLE_EXERCISE_SELECTION","exerciseIdForToggle","existingExerciseIndex","findIndex","tempId","updatedState","name","exerciseData","muscle","equipment","length","selected","REMOVE_EXERCISE","wId5","exerciseId","exId5","workout5","updatedExercisesAfterRemove","exercise","catalog_exercise_id","ADD_SET","workoutIdAddSet","weight","reps","workoutToUpdate","getExerciseId","sets","UPDATE_SET","wId2","exId","updatedSet","workout2","updatedExercisesAfterSetUpdate","set","REMOVE_SET","workoutIdDeleteSet","exerciseIdDeleteSet","setId","setIdDeleteSet","workoutDeleteSet","updatedExercisesDeleteSet","exerciseIdToCompare"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nimport exerciseUtils from '../utils/exercise.js';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = initialState.workouts, action) {\n  console.log('Action Type:', action.type);\n  console.log('State Before:', state);\n  console.log('Action Payload:', action.payload);\n\n  switch (action.type) {\n    // Workout Reducers\n\n    case actionTypes.ADD_WORKOUT:\n      console.log('Action Type: ADD_WORKOUT');\n      console.log('State Before:', state);\n      console.log('Action Payload:', action.payload);\n\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) return state;\n      console.log('Adding workout in reducer:', newWorkout);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n      return {\n        ...state,\n        [newWorkout.id]: newWorkout\n      };\n\n    case actionTypes.UPDATE_WORKOUT:\n      console.log('Updating workout in reducer:', action.payload);\n      return {\n        ...state,\n        [action.payload.id]: {\n          ...state[action.payload.id],\n          ...action.payload\n        }\n      };\n\n    case actionTypes.DELETE_WORKOUT: {\n      if (!action.payload) {\n        console.error('Invalid payload for DELETE_WORKOUT', action.payload);\n        return state;\n      }\n\n      const { [action.payload]: deletedWorkout, ...remainingWorkouts } = state;\n      const reorderedWorkouts = Object.values(remainingWorkouts)\n        .sort((a, b) => a.order - b.order)\n        .map((workout, index) => ({\n          ...workout,\n          order: index + 1\n        }))\n        .reduce((acc, workout) => {\n          acc[workout.id] = workout;\n          return acc;\n        }, {});\n\n      const newState = {\n        ...reorderedWorkouts\n      };\n\n      return newState;\n    }\n\n    // Exercise Reducers\n\n    case actionTypes.ADD_EXERCISE:\n      const { workoutId: workoutIdAddEx, exercises } = action.payload;\n      const existingWorkout = state[workoutIdAddEx];\n\n      if (!existingWorkout) {\n        console.error(`Workout with id ${workoutIdAddEx} not found`);\n        return state;\n      }\n\n      // Create a Set of existing exercise IDs\n      const existingExerciseIds = new Set(\n        existingWorkout.exercises.map(ex => ex.id)\n      );\n\n      console.log('Set of Existing Exercise IDs:', existingExerciseIds);\n\n      // Filter out duplicates and add only new exercises\n      const newExercises = exercises.filter(\n        ex => !existingExerciseIds.has(ex.id)\n      );\n\n      console.log('New Exercises:', newExercises);\n\n      // Combine existing exercises with new ones\n      const updatedExercisesAfterAdd = [\n        ...existingWorkout.exercises,\n        ...newExercises.map(ex => exerciseUtils.standardizeExercise(ex))\n      ];\n\n      console.log('Updated Exercises After Add:', updatedExercisesAfterAdd);\n\n      return {\n        ...state,\n        [workoutIdAddEx]: {\n          ...existingWorkout,\n          exercises: updatedExercisesAfterAdd\n        }\n      };\n\n    case actionTypes.TOGGLE_EXERCISE_SELECTION:\n      const { exerciseIdForToggle } = action.payload;\n      console.log('Toggling exercise:', exerciseIdForToggle);\n      console.log('Current exercises:', state.exercises);\n\n      const existingExerciseIndex = state.exercises.findIndex(\n        ex => ex.id === exerciseIdForToggle || ex.tempId === exerciseIdForToggle\n      );\n\n      let updatedState;\n      if (existingExerciseIndex === -1) {\n        // Exercise doesn't exist, add it\n        updatedState = {\n          ...state,\n          exercises: [\n            ...state.exercises,\n            {\n              id: exerciseIdForToggle,\n              name: exerciseData.name,\n              muscle: exerciseData.muscle,\n              equipment: exerciseData.equipment,\n              order: state.exercises.length + 1,\n              selected: true\n            }\n          ]\n        };\n      } else {\n        // Exercise exists, toggle its selection\n        updatedState = {\n          ...state,\n          exercises: state.exercises.map((ex, index) =>\n            index === existingExerciseIndex\n              ? { ...ex, selected: !ex.selected }\n              : ex\n          )\n        };\n      }\n\n      console.log('Updated state:', updatedState);\n      return updatedState;\n\n    case actionTypes.REMOVE_EXERCISE:\n      const { workoutId: wId5, exerciseId: exId5 } = action.payload;\n      const workout5 = state[wId5];\n      if (!workout5) return state;\n\n      const updatedExercisesAfterRemove = workout5.exercises.filter(\n        exercise =>\n          exercise.id !== exId5 &&\n          exercise.tempId !== exId5 &&\n          exercise.catalog_exercise_id !== exId5\n      );\n\n      return {\n        ...state,\n        [wId5]: {\n          ...workout5,\n          exercises: updatedExercisesAfterRemove\n        }\n      };\n\n    // Set Reducers\n\n    case actionTypes.ADD_SET:\n      const {\n        workoutId: workoutIdAddSet,\n        exerciseId,\n        weight,\n        reps\n      } = action.payload;\n      const workoutToUpdate = state[workoutIdAddSet];\n      if (!workoutToUpdate) return state;\n\n      return {\n        ...state,\n        [workoutIdAddSet]: {\n          ...workoutToUpdate,\n          exercises: workoutToUpdate.exercises.map(exercise =>\n            exerciseUtils.getExerciseId(exercise) === exerciseId\n              ? {\n                  ...exercise,\n                  sets: [\n                    ...exercise.sets,\n                    {\n                      id: uuidv4(),\n                      weight,\n                      reps,\n                      order: exercise.sets.length + 1\n                    }\n                  ]\n                }\n              : exercise\n          )\n        }\n      };\n\n    case actionTypes.UPDATE_SET:\n      const { workoutId: wId2, exerciseId: exId, updatedSet } = action.payload;\n      const workout2 = state[wId2];\n      if (!workout2) return state;\n\n      const updatedExercisesAfterSetUpdate = workout2.exercises.map(\n        exercise => {\n          if (exercise.id === exId) {\n            return {\n              ...exercise,\n              sets: exercise.sets.map(set =>\n                set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n              )\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [wId2]: {\n          ...workout2,\n          exercises: updatedExercisesAfterSetUpdate\n        }\n      };\n\n    case actionTypes.REMOVE_SET:\n      const {\n        workoutId: workoutIdDeleteSet,\n        exerciseId: exerciseIdDeleteSet,\n        setId: setIdDeleteSet\n      } = action.payload;\n      const workoutDeleteSet = state[workoutIdDeleteSet];\n      if (!workoutDeleteSet) return state;\n\n      const updatedExercisesDeleteSet = workoutDeleteSet.exercises.map(\n        exercise => {\n          const exerciseIdToCompare = exerciseUtils.getExerciseId(exercise);\n          if (exerciseIdToCompare === exerciseIdDeleteSet) {\n            return {\n              ...exercise,\n              sets: exercise.sets.filter(set => set.id !== setIdDeleteSet)\n            };\n          }\n          return exercise;\n        }\n      );\n\n      return {\n        ...state,\n        [workoutIdDeleteSet]: {\n          ...workoutDeleteSet,\n          exercises: updatedExercisesDeleteSet\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}