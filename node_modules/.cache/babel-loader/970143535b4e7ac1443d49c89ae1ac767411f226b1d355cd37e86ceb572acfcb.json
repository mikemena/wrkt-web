{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\nfunction workoutReducer(state = {\n  workouts: [],\n  activeWorkout: null\n}, action) {\n  switch (action.type) {\n    case actionTypes.INITIALIZE_NEW_WORKOUT_STATE:\n      const newWorkout = {\n        id: uuidv4(),\n        // Generate a new unique ID for the workout\n        programId: action.payload.programId,\n        // Link to the new program\n        name: 'Workout 1',\n        exercises: []\n      };\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      return {\n        ...state,\n        activeWorkout: action.payload\n      };\n    case actionTypes.ADD_WORKOUT:\n      {\n        const newWorkout = standardizeWorkout(action.payload);\n        if (!newWorkout) {\n          console.error('Failed to standardize workout:', action.payload);\n          return state;\n        }\n        return {\n          ...state,\n          workouts: [...state.workouts, newWorkout]\n        };\n      }\n    case 'UPDATE_NEW_WORKOUT':\n      return {\n        ...state,\n        workouts: state.workouts.map(w => w.id === action.payload.id ? action.payload : w)\n      };\n    case 'UPDATE_SELECTED_WORKOUT':\n      return {\n        ...state,\n        selectedWorkouts: state.selectedWorkouts.map(w => w.id === action.payload.id ? action.payload : w)\n      };\n    case actionTypes.UPDATE_WORKOUT:\n      {\n        const updatedWorkout = action.payload;\n        console.log('UPDATE_WORKOUT action received. Payload:', updatedWorkout);\n        const newState = {\n          ...state,\n          workouts: state.workouts.map(workout => workout.id === updatedWorkout.id ? updatedWorkout : workout)\n        };\n        console.log('New state after UPDATE_WORKOUT:', newState);\n        return newState;\n      }\n    case actionTypes.DELETE_WORKOUT:\n      {\n        const workoutId = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.filter(workout => workout.id !== workoutId),\n          activeWorkout: state.activeWorkout === workoutId ? null : state.activeWorkout\n        };\n      }\n    case actionTypes.ADD_EXERCISE:\n      {\n        const {\n          workoutId,\n          exercises\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: [...workout.exercises, ...exercises.map(ex => ({\n                  ...ex,\n                  id: ex.id || uuidv4()\n                }))]\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.REMOVE_EXERCISE:\n      {\n        const {\n          workoutId,\n          exerciseId\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.filter(ex => ex.id !== exerciseId && ex.catalog_exercise_id !== exerciseId)\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.ADD_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          newSet\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: [...exercise.sets, {\n                        ...newSet,\n                        id: uuidv4()\n                      }]\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.map(set => set.id === updatedSet.id ? {\n                        ...set,\n                        ...updatedSet\n                      } : set)\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    case actionTypes.REMOVE_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          setId\n        } = action.payload;\n        return {\n          ...state,\n          workouts: state.workouts.map(workout => {\n            if (workout.id === workoutId) {\n              return {\n                ...workout,\n                exercises: workout.exercises.map(exercise => {\n                  if (exercise.id === exerciseId) {\n                    return {\n                      ...exercise,\n                      sets: exercise.sets.filter(set => set.id !== setId)\n                    };\n                  }\n                  return exercise;\n                })\n              };\n            }\n            return workout;\n          })\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { workoutReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","standardizeWorkout","workoutReducer","state","workouts","activeWorkout","action","type","INITIALIZE_NEW_WORKOUT_STATE","newWorkout","id","programId","payload","name","exercises","SET_ACTIVE_WORKOUT","ADD_WORKOUT","console","error","map","w","selectedWorkouts","UPDATE_WORKOUT","updatedWorkout","log","newState","workout","DELETE_WORKOUT","workoutId","filter","ADD_EXERCISE","ex","REMOVE_EXERCISE","exerciseId","catalog_exercise_id","ADD_SET","newSet","exercise","sets","UPDATE_SET","updatedSet","set","REMOVE_SET","setId"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/workoutReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { standardizeWorkout } from '../utils/standardizeWorkout';\n\nfunction workoutReducer(state = { workouts: [], activeWorkout: null }, action) {\n  switch (action.type) {\n    case actionTypes.INITIALIZE_NEW_WORKOUT_STATE:\n      const newWorkout = {\n        id: uuidv4(), // Generate a new unique ID for the workout\n        programId: action.payload.programId, // Link to the new program\n        name: 'Workout 1',\n        exercises: []\n      };\n\n    case actionTypes.SET_ACTIVE_WORKOUT:\n      return {\n        ...state,\n        activeWorkout: action.payload\n      };\n\n    case actionTypes.ADD_WORKOUT: {\n      const newWorkout = standardizeWorkout(action.payload);\n      if (!newWorkout) {\n        console.error('Failed to standardize workout:', action.payload);\n        return state;\n      }\n\n      return {\n        ...state,\n        workouts: [...state.workouts, newWorkout]\n      };\n    }\n    case 'UPDATE_NEW_WORKOUT':\n      return {\n        ...state,\n        workouts: state.workouts.map(w =>\n          w.id === action.payload.id ? action.payload : w\n        )\n      };\n    case 'UPDATE_SELECTED_WORKOUT':\n      return {\n        ...state,\n        selectedWorkouts: state.selectedWorkouts.map(w =>\n          w.id === action.payload.id ? action.payload : w\n        )\n      };\n\n    case actionTypes.UPDATE_WORKOUT: {\n      const updatedWorkout = action.payload;\n      console.log('UPDATE_WORKOUT action received. Payload:', updatedWorkout);\n      const newState = {\n        ...state,\n        workouts: state.workouts.map(workout =>\n          workout.id === updatedWorkout.id ? updatedWorkout : workout\n        )\n      };\n      console.log('New state after UPDATE_WORKOUT:', newState);\n      return newState;\n    }\n\n    case actionTypes.DELETE_WORKOUT: {\n      const workoutId = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.filter(workout => workout.id !== workoutId),\n        activeWorkout:\n          state.activeWorkout === workoutId ? null : state.activeWorkout\n      };\n    }\n\n    case actionTypes.ADD_EXERCISE: {\n      const { workoutId, exercises } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: [\n                ...workout.exercises,\n                ...exercises.map(ex => ({\n                  ...ex,\n                  id: ex.id || uuidv4()\n                }))\n              ]\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.REMOVE_EXERCISE: {\n      const { workoutId, exerciseId } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.filter(\n                ex =>\n                  ex.id !== exerciseId && ex.catalog_exercise_id !== exerciseId\n              )\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.ADD_SET: {\n      const { workoutId, exerciseId, newSet } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: [...exercise.sets, { ...newSet, id: uuidv4() }]\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { workoutId, exerciseId, updatedSet } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: exercise.sets.map(set =>\n                      set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n                    )\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    case actionTypes.REMOVE_SET: {\n      const { workoutId, exerciseId, setId } = action.payload;\n      return {\n        ...state,\n        workouts: state.workouts.map(workout => {\n          if (workout.id === workoutId) {\n            return {\n              ...workout,\n              exercises: workout.exercises.map(exercise => {\n                if (exercise.id === exerciseId) {\n                  return {\n                    ...exercise,\n                    sets: exercise.sets.filter(set => set.id !== setId)\n                  };\n                }\n                return exercise;\n              })\n            };\n          }\n          return workout;\n        })\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport { workoutReducer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}