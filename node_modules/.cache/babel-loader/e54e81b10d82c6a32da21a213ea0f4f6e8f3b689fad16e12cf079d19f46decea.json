{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case actionTypes.ADD_SET:\n      {\n        const {\n          workoutId,\n          exerciseId,\n          weight,\n          reps\n        } = action.payload;\n        const workout = state[workoutId];\n        const setId = uuidv4();\n        if (!workout) {\n          console.error('Workout not found for ADD_SET', workoutId);\n          return state;\n        }\n        const newSet = {\n          id: setId,\n          weight,\n          reps,\n          order: (state[exerciseId] || []).length + 1\n        };\n\n        // console.log('Adding new set:', newSet);\n        // console.log('State before:', state);\n\n        const newState = {\n          ...state,\n          [exerciseId]: [...(state[exerciseId] || []), newSet]\n        };\n\n        // console.log('State after:', newState);\n\n        return newState;\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        // console.log('Updating set:', updatedSet);\n\n        return {\n          ...state,\n          [exerciseId]: state[exerciseId].map(set => set.id === updatedSet.id ? {\n            ...set,\n            ...updatedSet\n          } : set)\n        };\n      }\n    case actionTypes.DELETE_SET:\n      {\n        const {\n          exerciseId,\n          setId\n        } = action.payload;\n        // console.log('Deleting set with id:', setId);\n\n        const updatedSets = state[exerciseId].filter(set => set.id !== setId).map((set, index) => ({\n          ...set,\n          order: index + 1\n        }));\n        return {\n          ...state,\n          [exerciseId]: updatedSets\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { setReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","initialState","setReducer","state","sets","action","type","ADD_SET","workoutId","exerciseId","weight","reps","payload","workout","setId","console","error","newSet","id","order","length","newState","UPDATE_SET","updatedSet","map","set","DELETE_SET","updatedSets","filter","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\nimport { initialState } from './initialState';\n\nfunction setReducer(state = initialState.sets, action) {\n  switch (action.type) {\n    case actionTypes.ADD_SET: {\n      const { workoutId, exerciseId, weight, reps } = action.payload;\n      const workout = state[workoutId];\n      const setId = uuidv4();\n\n      if (!workout) {\n        console.error('Workout not found for ADD_SET', workoutId);\n        return state;\n      }\n\n      const newSet = {\n        id: setId,\n        weight,\n        reps,\n        order: (state[exerciseId] || []).length + 1\n      };\n\n      // console.log('Adding new set:', newSet);\n      // console.log('State before:', state);\n\n      const newState = {\n        ...state,\n        [exerciseId]: [...(state[exerciseId] || []), newSet]\n      };\n\n      // console.log('State after:', newState);\n\n      return newState;\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { exerciseId, updatedSet } = action.payload;\n      // console.log('Updating set:', updatedSet);\n\n      return {\n        ...state,\n        [exerciseId]: state[exerciseId].map(set =>\n          set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n        )\n      };\n    }\n\n    case actionTypes.DELETE_SET: {\n      const { exerciseId, setId } = action.payload;\n      // console.log('Deleting set with id:', setId);\n\n      const updatedSets = state[exerciseId]\n        .filter(set => set.id !== setId)\n        .map((set, index) => ({ ...set, order: index + 1 }));\n\n      return {\n        ...state,\n        [exerciseId]: updatedSets\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport { setReducer };\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,UAAUA,CAACC,KAAK,GAAGF,YAAY,CAACG,IAAI,EAAEC,MAAM,EAAE;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,WAAW,CAACO,OAAO;MAAE;QACxB,MAAM;UAAEC,SAAS;UAAEC,UAAU;UAAEC,MAAM;UAAEC;QAAK,CAAC,GAAGN,MAAM,CAACO,OAAO;QAC9D,MAAMC,OAAO,GAAGV,KAAK,CAACK,SAAS,CAAC;QAChC,MAAMM,KAAK,GAAGf,MAAM,CAAC,CAAC;QAEtB,IAAI,CAACc,OAAO,EAAE;UACZE,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAER,SAAS,CAAC;UACzD,OAAOL,KAAK;QACd;QAEA,MAAMc,MAAM,GAAG;UACbC,EAAE,EAAEJ,KAAK;UACTJ,MAAM;UACNC,IAAI;UACJQ,KAAK,EAAE,CAAChB,KAAK,CAACM,UAAU,CAAC,IAAI,EAAE,EAAEW,MAAM,GAAG;QAC5C,CAAC;;QAED;QACA;;QAEA,MAAMC,QAAQ,GAAG;UACf,GAAGlB,KAAK;UACR,CAACM,UAAU,GAAG,CAAC,IAAIN,KAAK,CAACM,UAAU,CAAC,IAAI,EAAE,CAAC,EAAEQ,MAAM;QACrD,CAAC;;QAED;;QAEA,OAAOI,QAAQ;MACjB;IAEA,KAAKrB,WAAW,CAACsB,UAAU;MAAE;QAC3B,MAAM;UAAEb,UAAU;UAAEc;QAAW,CAAC,GAAGlB,MAAM,CAACO,OAAO;QACjD;;QAEA,OAAO;UACL,GAAGT,KAAK;UACR,CAACM,UAAU,GAAGN,KAAK,CAACM,UAAU,CAAC,CAACe,GAAG,CAACC,GAAG,IACrCA,GAAG,CAACP,EAAE,KAAKK,UAAU,CAACL,EAAE,GAAG;YAAE,GAAGO,GAAG;YAAE,GAAGF;UAAW,CAAC,GAAGE,GACzD;QACF,CAAC;MACH;IAEA,KAAKzB,WAAW,CAAC0B,UAAU;MAAE;QAC3B,MAAM;UAAEjB,UAAU;UAAEK;QAAM,CAAC,GAAGT,MAAM,CAACO,OAAO;QAC5C;;QAEA,MAAMe,WAAW,GAAGxB,KAAK,CAACM,UAAU,CAAC,CAClCmB,MAAM,CAACH,GAAG,IAAIA,GAAG,CAACP,EAAE,KAAKJ,KAAK,CAAC,CAC/BU,GAAG,CAAC,CAACC,GAAG,EAAEI,KAAK,MAAM;UAAE,GAAGJ,GAAG;UAAEN,KAAK,EAAEU,KAAK,GAAG;QAAE,CAAC,CAAC,CAAC;QAEtD,OAAO;UACL,GAAG1B,KAAK;UACR,CAACM,UAAU,GAAGkB;QAChB,CAAC;MACH;IACA;MACE,OAAOxB,KAAK;EAChB;AACF;AAEA,SAASD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}