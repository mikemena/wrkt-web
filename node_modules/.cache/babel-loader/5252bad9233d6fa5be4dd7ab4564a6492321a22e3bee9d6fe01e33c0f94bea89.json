{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\n// import { initialState } from './initialState';\n\nfunction setReducer(state = {}, action) {\n  // console.log('initialState.sets:', initialState.sets);\n  switch (action.type) {\n    case actionTypes.ADD_SET:\n      {\n        const {\n          exerciseId,\n          weight,\n          reps\n        } = action.payload;\n        const setId = uuidv4();\n        const newSet = {\n          id: setId,\n          weight,\n          reps,\n          order: (state[exerciseId] || []).length + 2\n        };\n\n        // console.log('Adding new set:', newSet);\n        // console.log('State before:', state);\n\n        const newState = {\n          ...state,\n          [exerciseId]: [...(state[exerciseId] || []), newSet]\n        };\n\n        // console.log('State after:', newState);\n\n        return newState;\n      }\n    case actionTypes.UPDATE_SET:\n      {\n        const {\n          exerciseId,\n          updatedSet\n        } = action.payload;\n        // console.log('Updating set:', updatedSet);\n\n        // Ensure the state for exerciseId is an array before using map\n        // const currentSets = state[exerciseId] || [];\n        // console.log('Current sets:', currentSets);\n\n        return {\n          ...state,\n          [exerciseId]: state[exerciseId].map(set => set.id === updatedSet.id ? {\n            ...set,\n            ...updatedSet\n          } : set)\n        };\n      }\n    case actionTypes.DELETE_SET:\n      {\n        var _state$exercises;\n        const {\n          exerciseId,\n          setId\n        } = action.payload;\n        // console.log('Deleting set with id:', setId);\n\n        // Get all the sets for the exercise, including the ined from the exercise object and the state\n        const exerciseSets = state[exerciseId] || [];\n        // console.log('exerciseSets:', exerciseSets);\n\n        const exercise = (_state$exercises = state.exercises) === null || _state$exercises === void 0 ? void 0 : _state$exercises.find(ex => ex.id === exerciseId);\n        // console.log('exercise:', exercise);\n\n        const initialState = exercise ? exercise.sets : [];\n        // console.log('initialState:', initialState);\n\n        // Combine the initial sets with the state sets\n        const allSets = [...initialState, ...exerciseSets];\n        // console.log('allSets:', allSets);\n\n        // Filter out the set to delete\n        const updatedSets = allSets.filter(set => set.id !== setId);\n\n        // Recalculate the order of the remaining sets\n        const reorderedSets = updatedSets.map((set, index) => ({\n          ...set,\n          order: index + 2\n        }));\n        return {\n          ...state,\n          [exerciseId]: reorderedSets\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport { setReducer };","map":{"version":3,"names":["v4","uuidv4","actionTypes","setReducer","state","action","type","ADD_SET","exerciseId","weight","reps","payload","setId","newSet","id","order","length","newState","UPDATE_SET","updatedSet","map","set","DELETE_SET","_state$exercises","exerciseSets","exercise","exercises","find","ex","initialState","sets","allSets","updatedSets","filter","reorderedSets","index"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/reducers/setReducer.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { actionTypes } from '../actions/actionTypes';\n// import { initialState } from './initialState';\n\nfunction setReducer(state = {}, action) {\n  // console.log('initialState.sets:', initialState.sets);\n  switch (action.type) {\n    case actionTypes.ADD_SET: {\n      const { exerciseId, weight, reps } = action.payload;\n      const setId = uuidv4();\n      const newSet = {\n        id: setId,\n        weight,\n        reps,\n        order: (state[exerciseId] || []).length + 2\n      };\n\n      // console.log('Adding new set:', newSet);\n      // console.log('State before:', state);\n\n      const newState = {\n        ...state,\n        [exerciseId]: [...(state[exerciseId] || []), newSet]\n      };\n\n      // console.log('State after:', newState);\n\n      return newState;\n    }\n\n    case actionTypes.UPDATE_SET: {\n      const { exerciseId, updatedSet } = action.payload;\n      // console.log('Updating set:', updatedSet);\n\n      // Ensure the state for exerciseId is an array before using map\n      // const currentSets = state[exerciseId] || [];\n      // console.log('Current sets:', currentSets);\n\n      return {\n        ...state,\n        [exerciseId]: state[exerciseId].map(set =>\n          set.id === updatedSet.id ? { ...set, ...updatedSet } : set\n        )\n      };\n    }\n\n    case actionTypes.DELETE_SET: {\n      const { exerciseId, setId } = action.payload;\n      // console.log('Deleting set with id:', setId);\n\n      // Get all the sets for the exercise, including the ined from the exercise object and the state\n      const exerciseSets = state[exerciseId] || [];\n      // console.log('exerciseSets:', exerciseSets);\n\n      const exercise = state.exercises?.find(ex => ex.id === exerciseId);\n      // console.log('exercise:', exercise);\n\n      const initialState = exercise ? exercise.sets : [];\n      // console.log('initialState:', initialState);\n\n      // Combine the initial sets with the state sets\n      const allSets = [...initialState, ...exerciseSets];\n      // console.log('allSets:', allSets);\n\n      // Filter out the set to delete\n      const updatedSets = allSets.filter(set => set.id !== setId);\n\n      // Recalculate the order of the remaining sets\n      const reorderedSets = updatedSets.map((set, index) => ({\n        ...set,\n        order: index + 2\n      }));\n\n      return {\n        ...state,\n        [exerciseId]: reorderedSets\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport { setReducer };\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,WAAW,QAAQ,wBAAwB;AACpD;;AAEA,SAASC,UAAUA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAE;EACtC;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKJ,WAAW,CAACK,OAAO;MAAE;QACxB,MAAM;UAAEC,UAAU;UAAEC,MAAM;UAAEC;QAAK,CAAC,GAAGL,MAAM,CAACM,OAAO;QACnD,MAAMC,KAAK,GAAGX,MAAM,CAAC,CAAC;QACtB,MAAMY,MAAM,GAAG;UACbC,EAAE,EAAEF,KAAK;UACTH,MAAM;UACNC,IAAI;UACJK,KAAK,EAAE,CAACX,KAAK,CAACI,UAAU,CAAC,IAAI,EAAE,EAAEQ,MAAM,GAAG;QAC5C,CAAC;;QAED;QACA;;QAEA,MAAMC,QAAQ,GAAG;UACf,GAAGb,KAAK;UACR,CAACI,UAAU,GAAG,CAAC,IAAIJ,KAAK,CAACI,UAAU,CAAC,IAAI,EAAE,CAAC,EAAEK,MAAM;QACrD,CAAC;;QAED;;QAEA,OAAOI,QAAQ;MACjB;IAEA,KAAKf,WAAW,CAACgB,UAAU;MAAE;QAC3B,MAAM;UAAEV,UAAU;UAAEW;QAAW,CAAC,GAAGd,MAAM,CAACM,OAAO;QACjD;;QAEA;QACA;QACA;;QAEA,OAAO;UACL,GAAGP,KAAK;UACR,CAACI,UAAU,GAAGJ,KAAK,CAACI,UAAU,CAAC,CAACY,GAAG,CAACC,GAAG,IACrCA,GAAG,CAACP,EAAE,KAAKK,UAAU,CAACL,EAAE,GAAG;YAAE,GAAGO,GAAG;YAAE,GAAGF;UAAW,CAAC,GAAGE,GACzD;QACF,CAAC;MACH;IAEA,KAAKnB,WAAW,CAACoB,UAAU;MAAE;QAAA,IAAAC,gBAAA;QAC3B,MAAM;UAAEf,UAAU;UAAEI;QAAM,CAAC,GAAGP,MAAM,CAACM,OAAO;QAC5C;;QAEA;QACA,MAAMa,YAAY,GAAGpB,KAAK,CAACI,UAAU,CAAC,IAAI,EAAE;QAC5C;;QAEA,MAAMiB,QAAQ,IAAAF,gBAAA,GAAGnB,KAAK,CAACsB,SAAS,cAAAH,gBAAA,uBAAfA,gBAAA,CAAiBI,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACd,EAAE,KAAKN,UAAU,CAAC;QAClE;;QAEA,MAAMqB,YAAY,GAAGJ,QAAQ,GAAGA,QAAQ,CAACK,IAAI,GAAG,EAAE;QAClD;;QAEA;QACA,MAAMC,OAAO,GAAG,CAAC,GAAGF,YAAY,EAAE,GAAGL,YAAY,CAAC;QAClD;;QAEA;QACA,MAAMQ,WAAW,GAAGD,OAAO,CAACE,MAAM,CAACZ,GAAG,IAAIA,GAAG,CAACP,EAAE,KAAKF,KAAK,CAAC;;QAE3D;QACA,MAAMsB,aAAa,GAAGF,WAAW,CAACZ,GAAG,CAAC,CAACC,GAAG,EAAEc,KAAK,MAAM;UACrD,GAAGd,GAAG;UACNN,KAAK,EAAEoB,KAAK,GAAG;QACjB,CAAC,CAAC,CAAC;QAEH,OAAO;UACL,GAAG/B,KAAK;UACR,CAACI,UAAU,GAAG0B;QAChB,CAAC;MACH;IACA;MACE,OAAO9B,KAAK;EAChB;AACF;AAEA,SAASD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}