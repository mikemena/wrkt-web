{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramContext = /*#__PURE__*/createContext();\nexport const ProgramProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: (state.exercises[workout.id] || []).map(exercise => ({\n          ...exercise,\n          sets: state.sets[exercise.id] || []\n        })),\n        order: workout.order || 1\n      }))\n    };\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      // console.log('Saving program:', newProgram);\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const updateProgram = async programId => {\n    const updatedProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => {\n        if (!workout.id || workout.id.includes('-')) {\n          return null; // Exclude invalid or temporary workouts\n        }\n        const updatedExercises = (state.exercises[workout.id] || []).map(exercise => {\n          if (!exercise.id || exercise.id.includes('-')) {\n            return null; // Exclude invalid or temporary exercises\n          }\n          return {\n            ...exercise,\n            sets: state.sets[exercise.id] || [],\n            id: exercise.id\n          };\n        }).filter(exercise => exercise !== null); // Remove null exercises\n\n        return {\n          ...workout,\n          exercises: updatedExercises,\n          id: workout.id,\n          programId: programId\n        };\n      }).filter(workout => workout !== null),\n      // Remove null workouts\n      id: programId\n    };\n    console.log('Original Program:', state.programs[programId]);\n    console.log('Updated Program Data being sent to API:', updatedProgram);\n    dispatch({\n      type: actionTypes.SAVE_PROGRAM_START\n    });\n    try {\n      validateProgramData(updatedProgram); // Validate data before sending\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedProgram)\n      });\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error updating program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      console.log('Dispatching UPDATE_PROGRAM_SUCCESS with payload:', savedProgram);\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n  const deleteProgram = async programId => {\n    try {\n      // console.log('Deleting program:', programId);\n\n      const response = await fetch(`http://localhost:9025/api/programs/${programId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: {\n          programId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n  const updateWorkout = workout => {\n    console.log('Updating workout with payload:', workout);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: {\n        workoutId,\n        exercises\n      }\n    });\n  };\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: {\n        workoutId,\n        exerciseId\n      }\n    });\n  };\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    var _state$exercises$work;\n    // Check if the workout exists\n    if (!state.workouts[workoutId]) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    // Check if the exercise exists\n    const exerciseExists = (_state$exercises$work = state.exercises[workoutId]) === null || _state$exercises$work === void 0 ? void 0 : _state$exercises$work.some(ex => ex.id === exerciseId);\n    if (!exerciseExists) {\n      console.error('Exercise not found:', exerciseId, 'in workout:', workoutId);\n      return;\n    }\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        weight,\n        reps\n      }\n    });\n  };\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: {\n        workoutId,\n        exerciseId,\n        updatedSet\n      }\n    });\n  };\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(ex => ex.id === exerciseId);\n    const initialState = (exercise === null || exercise === void 0 ? void 0 : exercise.sets) || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n    if (combinedSets.length > 1) {\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: {\n          workoutId,\n          exerciseId,\n          setId\n        }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n  const clearState = () => {\n    dispatch({\n      type: actionTypes.CLEAR_STATE\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ProgramContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      activeWorkout: state.activeWorkout,\n      addProgram,\n      updateProgram,\n      deleteProgram,\n      addWorkout,\n      updateWorkout,\n      deleteWorkout,\n      setActiveWorkout,\n      addExercise,\n      deleteExercise,\n      addSet,\n      updateSet,\n      deleteSet,\n      saveProgram,\n      clearState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgramProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ProgramProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgramProvider\");","map":{"version":3,"names":["createContext","useReducer","actionTypes","rootReducer","initialState","jsxDEV","_jsxDEV","ProgramContext","ProgramProvider","children","_s","state","dispatch","setActiveWorkout","workoutId","console","error","type","SET_ACTIVE_WORKOUT","payload","saveProgram","programId","Object","keys","programs","newProgram","workouts","values","map","workout","exercises","id","exercise","sets","order","SAVE_PROGRAM_START","validateProgramData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","savedProgram","json","SAVE_PROGRAM_SUCCESS","SAVE_PROGRAM_FAILURE","message","updateProgram","updatedProgram","includes","updatedExercises","filter","log","UPDATE_PROGRAM_SUCCESS","programData","Array","isArray","forEach","addProgram","details","ADD_PROGRAM","deleteProgram","DELETE_PROGRAM","addWorkout","ADD_WORKOUT","updateWorkout","UPDATE_WORKOUT","deleteWorkout","DELETE_WORKOUT","addExercise","ADD_EXERCISE","deleteExercise","exerciseId","DELETE_EXERCISE","addSet","weight","reps","_state$exercises$work","exerciseExists","some","ex","ADD_SET","updateSet","updatedSet","UPDATE_SET","deleteSet","setId","find","additionalSets","combinedSets","length","DELETE_SET","clearState","CLEAR_STATE","Provider","value","activeWorkout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mike/Documents/purple.nosync/pow/web-frontend/src/contexts/programContext.js"],"sourcesContent":["import { createContext, useReducer } from 'react';\nimport { actionTypes } from '../actions/actionTypes';\nimport rootReducer from '../reducers/rootReducer';\nimport { initialState } from '../reducers/initialState';\n\nexport const ProgramContext = createContext();\n\nexport const ProgramProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, initialState);\n\n  const setActiveWorkout = workoutId => {\n    if (!workoutId) {\n      console.error('Attempted to set active workout without a valid ID');\n      return; // Optionally return to avoid dispatching undefined ID\n    }\n    dispatch({\n      type: actionTypes.SET_ACTIVE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const saveProgram = async () => {\n    const programId = Object.keys(state.programs)[0];\n    const newProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts).map(workout => ({\n        ...workout,\n        exercises: (state.exercises[workout.id] || []).map(exercise => ({\n          ...exercise,\n          sets: state.sets[exercise.id] || []\n        })),\n        order: workout.order || 1\n      }))\n    };\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      // console.log('Saving program:', newProgram);\n      validateProgramData(newProgram); // Validate data before sending\n      const response = await fetch('http://localhost:9025/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newProgram)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error saving program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to save program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const updateProgram = async programId => {\n    const updatedProgram = {\n      ...state.programs[programId],\n      workouts: Object.values(state.workouts)\n        .map(workout => {\n          if (!workout.id || workout.id.includes('-')) {\n            return null; // Exclude invalid or temporary workouts\n          }\n\n          const updatedExercises = (state.exercises[workout.id] || [])\n            .map(exercise => {\n              if (!exercise.id || exercise.id.includes('-')) {\n                return null; // Exclude invalid or temporary exercises\n              }\n\n              return {\n                ...exercise,\n                sets: state.sets[exercise.id] || [],\n                id: exercise.id\n              };\n            })\n            .filter(exercise => exercise !== null); // Remove null exercises\n\n          return {\n            ...workout,\n            exercises: updatedExercises,\n            id: workout.id,\n            programId: programId\n          };\n        })\n        .filter(workout => workout !== null), // Remove null workouts\n      id: programId\n    };\n\n    console.log('Original Program:', state.programs[programId]);\n    console.log('Updated Program Data being sent to API:', updatedProgram);\n\n    dispatch({ type: actionTypes.SAVE_PROGRAM_START });\n    try {\n      validateProgramData(updatedProgram); // Validate data before sending\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedProgram)\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text(); // Get the response text\n        console.error('Error updating program:', errorText); // Log the error text\n        throw new Error('Network response was not ok');\n      }\n      const savedProgram = await response.json();\n      console.log(\n        'Dispatching UPDATE_PROGRAM_SUCCESS with payload:',\n        savedProgram\n      );\n      dispatch({\n        type: actionTypes.UPDATE_PROGRAM_SUCCESS,\n        payload: savedProgram\n      });\n    } catch (error) {\n      console.error('Failed to update program:', error);\n      dispatch({\n        type: actionTypes.SAVE_PROGRAM_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n\n  const validateProgramData = programData => {\n    if (!programData.workouts || !Array.isArray(programData.workouts)) {\n      throw new Error('Workouts should be an array.');\n    }\n    programData.workouts.forEach(workout => {\n      if (!workout.exercises || !Array.isArray(workout.exercises)) {\n        throw new Error('Exercises should be an array.');\n      }\n      workout.exercises.forEach(exercise => {\n        if (!exercise.sets || !Array.isArray(exercise.sets)) {\n          throw new Error('Sets should be an array.');\n        }\n      });\n    });\n  };\n\n  const addProgram = details => {\n    dispatch({\n      type: actionTypes.ADD_PROGRAM,\n      payload: details\n    });\n  };\n\n  const deleteProgram = async programId => {\n    try {\n      // console.log('Deleting program:', programId);\n\n      const response = await fetch(\n        `http://localhost:9025/api/programs/${programId}`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error deleting program:', errorText);\n        throw new Error('Failed to delete program');\n      }\n      dispatch({\n        type: actionTypes.DELETE_PROGRAM,\n        payload: { programId }\n      });\n    } catch (error) {\n      console.error('Failed to delete program:', error);\n    }\n  };\n\n  const addWorkout = workout => {\n    dispatch({\n      type: actionTypes.ADD_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const updateWorkout = workout => {\n    console.log('Updating workout with payload:', workout);\n    dispatch({\n      type: actionTypes.UPDATE_WORKOUT,\n      payload: workout\n    });\n  };\n\n  const deleteWorkout = workoutId => {\n    dispatch({\n      type: actionTypes.DELETE_WORKOUT,\n      payload: workoutId\n    });\n  };\n\n  const addExercise = (workoutId, exercises) => {\n    dispatch({\n      type: actionTypes.ADD_EXERCISE,\n      payload: { workoutId, exercises }\n    });\n  };\n\n  const deleteExercise = (workoutId, exerciseId) => {\n    dispatch({\n      type: actionTypes.DELETE_EXERCISE,\n      payload: { workoutId, exerciseId }\n    });\n  };\n\n  const addSet = (workoutId, exerciseId, weight = 10, reps = 10) => {\n    // Check if the workout exists\n    if (!state.workouts[workoutId]) {\n      console.error('Workout not found:', workoutId);\n      return;\n    }\n\n    // Check if the exercise exists\n    const exerciseExists = state.exercises[workoutId]?.some(\n      ex => ex.id === exerciseId\n    );\n    if (!exerciseExists) {\n      console.error(\n        'Exercise not found:',\n        exerciseId,\n        'in workout:',\n        workoutId\n      );\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_SET,\n      payload: { workoutId, exerciseId, weight, reps }\n    });\n  };\n\n  const updateSet = (workoutId, exerciseId, updatedSet) => {\n    dispatch({\n      type: actionTypes.UPDATE_SET,\n      payload: { workoutId, exerciseId, updatedSet }\n    });\n  };\n\n  const deleteSet = (workoutId, exerciseId, setId) => {\n    const exercise = state.exercises[workoutId].find(\n      ex => ex.id === exerciseId\n    );\n    const initialState = exercise?.sets || [];\n    const additionalSets = state.sets[exerciseId] || [];\n    const combinedSets = [...initialState, ...additionalSets];\n\n    if (combinedSets.length > 1) {\n      dispatch({\n        type: actionTypes.DELETE_SET,\n        payload: { workoutId, exerciseId, setId }\n      });\n    } else {\n      console.log('Cannot delete the only remaining set.');\n    }\n  };\n\n  const clearState = () => {\n    dispatch({ type: actionTypes.CLEAR_STATE });\n  };\n\n  return (\n    <ProgramContext.Provider\n      value={{\n        state,\n        dispatch,\n        activeWorkout: state.activeWorkout,\n        addProgram,\n        updateProgram,\n        deleteProgram,\n        addWorkout,\n        updateWorkout,\n        deleteWorkout,\n        setActiveWorkout,\n        addExercise,\n        deleteExercise,\n        addSet,\n        updateSet,\n        deleteSet,\n        saveProgram,\n        clearState\n      }}\n    >\n      {children}\n    </ProgramContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,MAAMC,cAAc,gBAAGP,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMQ,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACE,WAAW,EAAEC,YAAY,CAAC;EAE/D,MAAMS,gBAAgB,GAAGC,SAAS,IAAI;IACpC,IAAI,CAACA,SAAS,EAAE;MACdC,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;MACnE,OAAO,CAAC;IACV;IACAJ,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACgB,kBAAkB;MACpCC,OAAO,EAAEL;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACZ,KAAK,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMC,UAAU,GAAG;MACjB,GAAGd,KAAK,CAACa,QAAQ,CAACH,SAAS,CAAC;MAC5BK,QAAQ,EAAEJ,MAAM,CAACK,MAAM,CAAChB,KAAK,CAACe,QAAQ,CAAC,CAACE,GAAG,CAACC,OAAO,KAAK;QACtD,GAAGA,OAAO;QACVC,SAAS,EAAE,CAACnB,KAAK,CAACmB,SAAS,CAACD,OAAO,CAACE,EAAE,CAAC,IAAI,EAAE,EAAEH,GAAG,CAACI,QAAQ,KAAK;UAC9D,GAAGA,QAAQ;UACXC,IAAI,EAAEtB,KAAK,CAACsB,IAAI,CAACD,QAAQ,CAACD,EAAE,CAAC,IAAI;QACnC,CAAC,CAAC,CAAC;QACHG,KAAK,EAAEL,OAAO,CAACK,KAAK,IAAI;MAC1B,CAAC,CAAC;IACJ,CAAC;IAEDtB,QAAQ,CAAC;MAAEK,IAAI,EAAEf,WAAW,CAACiC;IAAmB,CAAC,CAAC;IAClD,IAAI;MACF;MACAC,mBAAmB,CAACX,UAAU,CAAC,CAAC,CAAC;MACjC,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAClB,UAAU;MACjC,CAAC,CAAC;MAEF,IAAI,CAACY,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC/B,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAE6B,SAAS,CAAC,CAAC,CAAC;QACnD,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAC1CrC,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACgD,oBAAoB;QACtC/B,OAAO,EAAE6B;MACX,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CJ,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACiD,oBAAoB;QACtChC,OAAO,EAAEH,KAAK,CAACoC;MACjB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAMhC,SAAS,IAAI;IACvC,MAAMiC,cAAc,GAAG;MACrB,GAAG3C,KAAK,CAACa,QAAQ,CAACH,SAAS,CAAC;MAC5BK,QAAQ,EAAEJ,MAAM,CAACK,MAAM,CAAChB,KAAK,CAACe,QAAQ,CAAC,CACpCE,GAAG,CAACC,OAAO,IAAI;QACd,IAAI,CAACA,OAAO,CAACE,EAAE,IAAIF,OAAO,CAACE,EAAE,CAACwB,QAAQ,CAAC,GAAG,CAAC,EAAE;UAC3C,OAAO,IAAI,CAAC,CAAC;QACf;QAEA,MAAMC,gBAAgB,GAAG,CAAC7C,KAAK,CAACmB,SAAS,CAACD,OAAO,CAACE,EAAE,CAAC,IAAI,EAAE,EACxDH,GAAG,CAACI,QAAQ,IAAI;UACf,IAAI,CAACA,QAAQ,CAACD,EAAE,IAAIC,QAAQ,CAACD,EAAE,CAACwB,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC7C,OAAO,IAAI,CAAC,CAAC;UACf;UAEA,OAAO;YACL,GAAGvB,QAAQ;YACXC,IAAI,EAAEtB,KAAK,CAACsB,IAAI,CAACD,QAAQ,CAACD,EAAE,CAAC,IAAI,EAAE;YACnCA,EAAE,EAAEC,QAAQ,CAACD;UACf,CAAC;QACH,CAAC,CAAC,CACD0B,MAAM,CAACzB,QAAQ,IAAIA,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;;QAE1C,OAAO;UACL,GAAGH,OAAO;UACVC,SAAS,EAAE0B,gBAAgB;UAC3BzB,EAAE,EAAEF,OAAO,CAACE,EAAE;UACdV,SAAS,EAAEA;QACb,CAAC;MACH,CAAC,CAAC,CACDoC,MAAM,CAAC5B,OAAO,IAAIA,OAAO,KAAK,IAAI,CAAC;MAAE;MACxCE,EAAE,EAAEV;IACN,CAAC;IAEDN,OAAO,CAAC2C,GAAG,CAAC,mBAAmB,EAAE/C,KAAK,CAACa,QAAQ,CAACH,SAAS,CAAC,CAAC;IAC3DN,OAAO,CAAC2C,GAAG,CAAC,yCAAyC,EAAEJ,cAAc,CAAC;IAEtE1C,QAAQ,CAAC;MAAEK,IAAI,EAAEf,WAAW,CAACiC;IAAmB,CAAC,CAAC;IAClD,IAAI;MACFC,mBAAmB,CAACkB,cAAc,CAAC,CAAC,CAAC;MACrC,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCjB,SAAU,EAAC,EACjD;QACEkB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,cAAc;MACrC,CACF,CAAC;MAED,IAAI,CAACjB,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC/B,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAE6B,SAAS,CAAC,CAAC,CAAC;QACrD,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAC1ClC,OAAO,CAAC2C,GAAG,CACT,kDAAkD,EAClDV,YACF,CAAC;MACDpC,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACyD,sBAAsB;QACxCxC,OAAO,EAAE6B;MACX,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDJ,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACiD,oBAAoB;QACtChC,OAAO,EAAEH,KAAK,CAACoC;MACjB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMhB,mBAAmB,GAAGwB,WAAW,IAAI;IACzC,IAAI,CAACA,WAAW,CAAClC,QAAQ,IAAI,CAACmC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAClC,QAAQ,CAAC,EAAE;MACjE,MAAM,IAAIqB,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACAa,WAAW,CAAClC,QAAQ,CAACqC,OAAO,CAAClC,OAAO,IAAI;MACtC,IAAI,CAACA,OAAO,CAACC,SAAS,IAAI,CAAC+B,KAAK,CAACC,OAAO,CAACjC,OAAO,CAACC,SAAS,CAAC,EAAE;QAC3D,MAAM,IAAIiB,KAAK,CAAC,+BAA+B,CAAC;MAClD;MACAlB,OAAO,CAACC,SAAS,CAACiC,OAAO,CAAC/B,QAAQ,IAAI;QACpC,IAAI,CAACA,QAAQ,CAACC,IAAI,IAAI,CAAC4B,KAAK,CAACC,OAAO,CAAC9B,QAAQ,CAACC,IAAI,CAAC,EAAE;UACnD,MAAM,IAAIc,KAAK,CAAC,0BAA0B,CAAC;QAC7C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMiB,UAAU,GAAGC,OAAO,IAAI;IAC5BrD,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACgE,WAAW;MAC7B/C,OAAO,EAAE8C;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,aAAa,GAAG,MAAM9C,SAAS,IAAI;IACvC,IAAI;MACF;;MAEA,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCjB,SAAU,EAAC,EACjD;QACEkB,MAAM,EAAE;MACV,CACF,CAAC;MAED,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC/B,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAE6B,SAAS,CAAC;QACnD,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACAnC,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAACkE,cAAc;QAChCjD,OAAO,EAAE;UAAEE;QAAU;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAMqD,UAAU,GAAGxC,OAAO,IAAI;IAC5BjB,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACoE,WAAW;MAC7BnD,OAAO,EAAEU;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAM0C,aAAa,GAAG1C,OAAO,IAAI;IAC/Bd,OAAO,CAAC2C,GAAG,CAAC,gCAAgC,EAAE7B,OAAO,CAAC;IACtDjB,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACsE,cAAc;MAChCrD,OAAO,EAAEU;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAM4C,aAAa,GAAG3D,SAAS,IAAI;IACjCF,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACwE,cAAc;MAChCvD,OAAO,EAAEL;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAM6D,WAAW,GAAGA,CAAC7D,SAAS,EAAEgB,SAAS,KAAK;IAC5ClB,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC0E,YAAY;MAC9BzD,OAAO,EAAE;QAAEL,SAAS;QAAEgB;MAAU;IAClC,CAAC,CAAC;EACJ,CAAC;EAED,MAAM+C,cAAc,GAAGA,CAAC/D,SAAS,EAAEgE,UAAU,KAAK;IAChDlE,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAAC6E,eAAe;MACjC5D,OAAO,EAAE;QAAEL,SAAS;QAAEgE;MAAW;IACnC,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,MAAM,GAAGA,CAAClE,SAAS,EAAEgE,UAAU,EAAEG,MAAM,GAAG,EAAE,EAAEC,IAAI,GAAG,EAAE,KAAK;IAAA,IAAAC,qBAAA;IAChE;IACA,IAAI,CAACxE,KAAK,CAACe,QAAQ,CAACZ,SAAS,CAAC,EAAE;MAC9BC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,SAAS,CAAC;MAC9C;IACF;;IAEA;IACA,MAAMsE,cAAc,IAAAD,qBAAA,GAAGxE,KAAK,CAACmB,SAAS,CAAChB,SAAS,CAAC,cAAAqE,qBAAA,uBAA1BA,qBAAA,CAA4BE,IAAI,CACrDC,EAAE,IAAIA,EAAE,CAACvD,EAAE,KAAK+C,UAClB,CAAC;IACD,IAAI,CAACM,cAAc,EAAE;MACnBrE,OAAO,CAACC,KAAK,CACX,qBAAqB,EACrB8D,UAAU,EACV,aAAa,EACbhE,SACF,CAAC;MACD;IACF;IAEAF,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACqF,OAAO;MACzBpE,OAAO,EAAE;QAAEL,SAAS;QAAEgE,UAAU;QAAEG,MAAM;QAAEC;MAAK;IACjD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,SAAS,GAAGA,CAAC1E,SAAS,EAAEgE,UAAU,EAAEW,UAAU,KAAK;IACvD7E,QAAQ,CAAC;MACPK,IAAI,EAAEf,WAAW,CAACwF,UAAU;MAC5BvE,OAAO,EAAE;QAAEL,SAAS;QAAEgE,UAAU;QAAEW;MAAW;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,SAAS,GAAGA,CAAC7E,SAAS,EAAEgE,UAAU,EAAEc,KAAK,KAAK;IAClD,MAAM5D,QAAQ,GAAGrB,KAAK,CAACmB,SAAS,CAAChB,SAAS,CAAC,CAAC+E,IAAI,CAC9CP,EAAE,IAAIA,EAAE,CAACvD,EAAE,KAAK+C,UAClB,CAAC;IACD,MAAM1E,YAAY,GAAG,CAAA4B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,KAAI,EAAE;IACzC,MAAM6D,cAAc,GAAGnF,KAAK,CAACsB,IAAI,CAAC6C,UAAU,CAAC,IAAI,EAAE;IACnD,MAAMiB,YAAY,GAAG,CAAC,GAAG3F,YAAY,EAAE,GAAG0F,cAAc,CAAC;IAEzD,IAAIC,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3BpF,QAAQ,CAAC;QACPK,IAAI,EAAEf,WAAW,CAAC+F,UAAU;QAC5B9E,OAAO,EAAE;UAAEL,SAAS;UAAEgE,UAAU;UAAEc;QAAM;MAC1C,CAAC,CAAC;IACJ,CAAC,MAAM;MACL7E,OAAO,CAAC2C,GAAG,CAAC,uCAAuC,CAAC;IACtD;EACF,CAAC;EAED,MAAMwC,UAAU,GAAGA,CAAA,KAAM;IACvBtF,QAAQ,CAAC;MAAEK,IAAI,EAAEf,WAAW,CAACiG;IAAY,CAAC,CAAC;EAC7C,CAAC;EAED,oBACE7F,OAAA,CAACC,cAAc,CAAC6F,QAAQ;IACtBC,KAAK,EAAE;MACL1F,KAAK;MACLC,QAAQ;MACR0F,aAAa,EAAE3F,KAAK,CAAC2F,aAAa;MAClCtC,UAAU;MACVX,aAAa;MACbc,aAAa;MACbE,UAAU;MACVE,aAAa;MACbE,aAAa;MACb5D,gBAAgB;MAChB8D,WAAW;MACXE,cAAc;MACdG,MAAM;MACNQ,SAAS;MACTG,SAAS;MACTvE,WAAW;MACX8E;IACF,CAAE;IAAAzF,QAAA,EAEDA;EAAQ;IAAA8F,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAAChG,EAAA,CAtSWF,eAAe;AAAAmG,EAAA,GAAfnG,eAAe;AAAA,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}